<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Bug日常</title>
    <link href="/2022/05/21/Bug%E5%95%8A/"/>
    <url>/2022/05/21/Bug%E5%95%8A/</url>
    
    <content type="html"><![CDATA[<p>嘿咻，嘿咻</p><p>这几天忽然出现的一个bug，就挺离谱的，前几天没问题，就突然蹦出来的。</p><hr><h2 id="第一个bug"><a href="#第一个bug" class="headerlink" title="第一个bug"></a>第一个bug</h2><p>报错如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">The last packet successfully received <span class="hljs-keyword">from</span> the server was <span class="hljs-number">1</span>,<span class="hljs-number">548</span> milliseconds ago.  The last packet sent successfully to the server was <span class="hljs-number">1</span>,<span class="hljs-number">540</span> milliseconds ago.<br>### The error may exist <span class="hljs-keyword">in</span> com/liu/dao/StudentMapper.xml<br>### The error may involve com.liu.dao.StudentMapper.getStudentById<br>### The error occurred <span class="hljs-keyword">while</span> executing a query<br>### Cause: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure<br></code></pre></div></td></tr></table></figure><hr><p>最终查找原因解决办法如下；</p><ul><li><p>第一种：</p><p>我之前使用的mysql版本是 5.7  驱动使用的是 com.mysql.jdbc.Driver</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">driver=com.mysql.jdbc.Driver<br>url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/mybatisuseSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br></code></pre></div></td></tr></table></figure><p>原因：useSSL=true时 数据库连接 安全认证不通过 </p><p>解决办法：将useSSL true改为false  （可以使用）</p></li><li><p>第二种办法：</p><p>更换JDBC驱动：使用：com.mysql.cj.jdbc.Driver （需注意：需要指定时区serverTimezone:）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">driver=com.mysql.cj.jdbc.Driver<br>url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/mybatis？useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span><br></code></pre></div></td></tr></table></figure><p>最终使用了第二种办法 并且更换了连接驱动的版本 之前为 5.1的</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;dependency&gt;<br>        &lt;groupId&gt;mysql&lt;/groupId&gt;<br>        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">8.0</span><span class="hljs-number">.20</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure></li></ul><hr><h2 id="第二个bug"><a href="#第二个bug" class="headerlink" title="第二个bug"></a>第二个bug</h2><ul><li>报错如下图：</li></ul><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20220522141742.png" alt="image-20220521215757689"></p><ul><li><p>分析异常：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Caused by:java.io.InvalidClassException: com.zhiyou.model.Article; local <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">incompatible</span>: <span class="hljs-title">stream</span> <span class="hljs-title">classdesc</span> <span class="hljs-title">serialVersionUID</span> </span>= <span class="hljs-number">5064638946701408977</span>, local <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">serialVersionUID</span> </span>= <span class="hljs-number">8540152099422222493</span>=<br></code></pre></div></td></tr></table></figure></li><li><p>原因分析：</p><blockquote><p><strong>大致原因如下：</strong></p><p><strong>由于序列化时该类的serialVersionUID是JVM根据类名及其属性的哈希值生成的。当类的属性有变动时，serialVersionUID也会相应变动，从而导致redis中的老数据反序列化为AlarmReq bean对象时，serialVersionUID匹配不上而失败，会报出java. io. InvalidClassException。</strong></p></blockquote></li><li><p>解决方案：</p><p><strong>方法1：</strong>不考虑和老数据兼容的话，直接在你实现了Serializable的这个对象加一段serialVersionUID代码，如果还报InvalidClassException，将redis上的老数据清除</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br></code></pre></div></td></tr></table></figure><hr></hr><p><strong>方法2：</strong>兼容老数据，找到老数据的serialVersionUID，就是上述报错的地方，会将老数据的serialVersionUID报出来，比如我这里的老数据的就是1631280650588763177 这一串，你只要加 UID=1631280650588763177 这个就可以了。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1631280650588763177L</span>;<br></code></pre></div></td></tr></table></figure><hr><p>使用第二种完美解决问题!!!</p></li><li><p>总结</p><p>可能好多人在写对象以及序列化对象的时候，是没有加<strong>private static final long serialVersionUID</strong>的，但是也没有见到有报InvalidClassException异常的，那是因为你部署的单体系统架构，实时序列化和反序列化的，每次系统重启就又重新实例对象，所以即使改变了对象增加属性，也不会出现老对象和新对象serialVersionUID 不一致的情况，所以也就不会出现java. io. InvalidClassException。</p><p>所以以后你们写对象并且要序列化的话，一定要随手加上serialVersionUID这段代码。</p><p>如果你们去看源码，HashMap、ArrayList 等这些神级代码的时候，你们可以看到，他们都是加了 serialVersionUID 代码的</p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20220522141750.png" alt="image-20220521220936603"></p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20220522141759.png" alt="image-20220521220948162"></p></li><li><p>补充</p><p>使用idea工具自动生成</p><p>1、按照下图所示，设置好后，不要忘记点击【Apply】应用一下</p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20220522141802.png" alt="image-20220521221344900"></p><p>2、在实现了 Serializable的bean类下， 鼠标移到bean类名处，按住 alt+enter，就会自动弹出【Add serialVersionUID field】</p><p>选中即可自动生成啦，</p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20220522141811.png" alt="image-20220521221448689"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java的反射机制</title>
    <link href="/2021/12/06/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/12/06/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p><strong>Java的反射机制</strong></p><hr><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意一个方法和属性，这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p><ul><li><p><code>Reflection</code> （反射）是被视为动态语言的关键，反射机制允许程序在执行期 借助于<code>Reflection API</code> 取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。 </p></li><li><p>加载完类之后，在堆内存的方法区中就产生了一个<code>Class</code> 类型的对象（一个 类只有一个<code>Class</code> 对象），这个对象就包含了完整的类的结构信息。我们可 以通过这个对象看到类的结构。</p><p><strong>这个对象就像一面镜子，透过这个镜子看 到类的结构，所以，我们形象的称之为：反射。</strong></p></li></ul><p>-</p><center><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211206210930.png" alt="image-20211206210929044" style="zoom:67%;" /></center><p>-</p><br><p> <strong>Java反射机制提供的功能</strong> </p><ul><li>在运行时判断任意一个对象所属的类 </li><li>在运行时构造任意一个类的对象 </li><li>在运行时判断任意一个类所具有的成员变量和方法 </li><li>在运行时获取泛型信息 </li><li>在运行时调用任意一个对象的成员变量和方法 </li><li>在运行时处理注解 生成动态代理</li></ul><br><p><strong>反射相关的主要API</strong></p><ul><li><code>java.lang.Class</code> ：代表一个<strong>类</strong></li><li><code>java.lang.reflect.Method</code> ：代表类的<strong>方法</strong> </li><li><code>java.lang.reflect.Field </code>：代表类的成员<strong>变量</strong> </li><li><code>java.lang.reflect.Constructor</code> ：代表类的<strong>构造器</strong></li></ul><hr><h3 id="二、获取Class的实例"><a href="#二、获取Class的实例" class="headerlink" title="二、获取Class的实例"></a>二、获取Class的实例</h3><h4 id="获取字节码文件的三种方式"><a href="#获取字节码文件的三种方式" class="headerlink" title="获取字节码文件的三种方式"></a>获取字节码文件的三种方式</h4><ul><li><p>（1）前提：已知一个类的全类名，且该类在类路径下，可通过Class类的静态方 法forName()获取，可能抛出ClassNotFoundException 实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class clazz =Class.forName(<span class="hljs-string">&quot;类名&quot;</span>); <br></code></pre></div></td></tr></table></figure></li><li><p>（2）前提：若已知具体的类，通过类的class属性获取，该方法最为安全可靠， 程序性能最高 实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class clazz = Person.getClass(); <br></code></pre></div></td></tr></table></figure></li><li><p>（3）前提：已知某个类的实例，调用该实例的getClass()方法获取Class对象 实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Person p = <span class="hljs-keyword">new</span> Person();<br>Class clazz = p.getClass();<br></code></pre></div></td></tr></table></figure></li></ul><p>-</p><center><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211206222906.png" alt="image-20211206222905495" style="zoom: 80%;" /></center><p>-</p><p style="color:red;font-size:20px">ps：三个阶段创建出来的对象是相同的</p><hr><h4 id="哪些类型可以有Class对象？"><a href="#哪些类型可以有Class对象？" class="headerlink" title="哪些类型可以有Class对象？"></a>哪些类型可以有Class对象？</h4><ul><li>（1）<code>class</code> ： 外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类 </li><li>（2）<code>interface</code> ：接口 </li><li>（3）<code>[]</code> ：数组 </li><li>（4）<code>enum</code> ：枚举 </li><li>（5）<code>annotation</code> ：注解@interface </li><li>（6）<code>primitive type</code> ：基本数据类型 </li><li>（7）<code>void</code> </li></ul><hr><h3 id="三、类的加载与-ClassLoader-的理解"><a href="#三、类的加载与-ClassLoader-的理解" class="headerlink" title="三、类的加载与 ClassLoader 的理解"></a>三、类的加载与 ClassLoader 的理解</h3><h4 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h4><p>当程序主动使用某个类时，如果该类还未被加载到内存中，</p><p>则系统会通过 <code>加载</code>，<code>连接</code> ，<code>初始化</code> 三步来实现对这个类进行初始化。</p><p>-</p><center><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211206212934.png" alt="image-20211206212933506" style="zoom: 67%;" /></center><p>-</p><br><ul><li><p>（1）<code>加载</code></p><blockquote><p>将class文件字节码内容加载到内存中，然后生成一个代表这个类的 <code>java.lang.Class</code> 对象，作为方法区中类数据的访问 入口（即引用地址）。所有需要访问和使用类数据只能通过这个 <code>Class</code> 对象。任何类被使用时系统都会建立一个 <code>Class</code> 对象。</p></blockquote></li><li><p>（2）<code>链接</code> </p><blockquote><p>将Java类的二进制代码合并到JVM的运行状态之中的过程。 </p><ul><li><p>验证：确保加载的类信息符合 <code>JVM</code> 规范，是否有正确的内部结构，并和其他类协调一致</p></li><li><p>准备：负责为类的静态成员分配内存，并设置默认初始化值</p></li><li><p>解析：虚拟机常量池内的 <code>符号引用</code>（常量名）替换为 <code>直接引用</code>（地址）的过程。简而言之,j就是将类的二进制数据中的 <code>符号引用</code> 替换为 <code>直接引用</code></p></li></ul></blockquote></li><li><p>（3）<code>初始化</code></p><blockquote><p>字节码文件加载进内存,创建对象,默认初始化,显示初始化等</p></blockquote></li></ul><hr><h4 id="类的加载时机-类初始化"><a href="#类的加载时机-类初始化" class="headerlink" title="类的加载时机(类初始化)"></a>类的加载时机(类初始化)</h4><p><strong><code>类的主动引用</code></strong> （一定会发生类的初始化）</p><ul><li>当虚拟机启动，先初始化<code>main</code>方法所在的类 </li><li><code>new</code>一个类的对象 </li><li>调用类的静态成员（除了<code>final</code>常量）和静态方法 </li><li>使用<code>java.lang.reflect</code>包的方法对类进行反射调用 </li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类 </li></ul><br><p><strong><code>类的被动引用</code></strong> （不会发生类的初始化） </p><ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化 </li><li>当通过子类引用父类的静态变量，不会导致子类初始化 </li><li>通过数组定义类引用，不会触发此类的初始化 </li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常 量池中了）</li></ul><hr><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><p><strong>什么是类加载器？</strong></p><blockquote><p>负责将.class文件加载到内存中，并为之生成对应的Class对象。</p><p>虽然我们不需要关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行。</p></blockquote><br><p><strong>类加载器的分类</strong></p><ul><li><p><code>Bootstrap ClassLoader</code> 根类加载器                               </p></li><li><p><code>Extension ClassLoader</code> 扩展类加载器</p></li><li><p><code>Sysetm ClassLoader</code> 系统类加载器</p></li></ul><hr><p><strong>类加载器的作用</strong></p><ul><li><p><code>Bootstrap ClassLoader</code> 根类加载器</p><p>也被称为引导类加载器，负责Java核心类的加载</p><p>比如System，String等。在JDK中JRE的lib目录下rt.jar文件中</p></li><li><p><code>Extension ClassLoader</code> 扩展类加载器</p><p>负责JRE的扩展目录中jar包的加载。</p><p>在JDK中JRE的lib目录下ext目录</p></li><li><p><code>Sysetm ClassLoader</code> 系统类加载器</p><p>负责在JVM启动时加载来自java命令的class文件，以及classpath环境变量所指定的jar包和类路径</p></li></ul><br><p><strong>概括：</strong></p><blockquote><p>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，</p><p>然后在堆中生成一个代表这个类的java.lang.Class对象，作为 方法区中类数据的访问入口。</p></blockquote><hr><h3 id="四、获取运行时类的完-整结构"><a href="#四、获取运行时类的完-整结构" class="headerlink" title="四、获取运行时类的完 整结构"></a>四、获取运行时类的完 整结构</h3><h4 id="（1）全部的构造器："><a href="#（1）全部的构造器：" class="headerlink" title="（1）全部的构造器："></a><strong>（1）全部的构造器：</strong></h4><ul><li><code>public Constructor[] getConstructors() </code>  返回此 Class 对象所表示的类的所有public构造方法。 </li><li><code>public Constructor[] getDeclaredConstructors()</code>   返回此 Class 对象表示的类声明的所有构造方法。 </li></ul><p><strong>Constructor类中：</strong> </p><ul><li><p>取得<strong>修饰符</strong>: public int  <strong>getModifiers()</strong>; </p></li><li><p>取得<strong>方法名称</strong>: public String  <strong>getName()</strong>; </p></li><li><p>取得<strong>参数的类型</strong>：public Class[]  <strong>getParameterTypes()</strong>;</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 反射机制, 获得类的构造方法, 并执行</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo2_Constructor</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, ParseException </span>&#123;<br><br>        <span class="hljs-comment">// 1获得User类的字节码文件对象</span><br>        Class&lt;User&gt; clazz = User.class;<br><br>        <span class="hljs-comment">// 2 获得该类的构造方法     参数：构造器参数的字节码类型的参数类型</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Constructor getConstructor(Class... parameterTypes)  返回值是构造器对象</span><br><span class="hljs-comment">         * 根据构造方法的参数类型,来获得字节码中指定的构造器</span><br><span class="hljs-comment">         * [只能获得public修饰的构造方法]</span><br><span class="hljs-comment">         */</span><br>        Constructor&lt;User&gt; cons1 = clazz.getConstructor();<span class="hljs-comment">// 获得字节码中空参构造器</span><br>        Constructor&lt;User&gt; cons2 = clazz.getConstructor(<span class="hljs-keyword">int</span>.class);<br>        Constructor&lt;User&gt; cons3 = clazz.getConstructor(<span class="hljs-keyword">int</span>.class, String.class);<br><br>        System.out.println(cons1 );<br>        System.out.println(cons2 );<br>        System.out.println(cons3 );<br>        System.out.println(<span class="hljs-string">&quot;----------------&quot;</span> );<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * getDeclaredConstructor             返回值是构造器对象</span><br><span class="hljs-comment">         * 获得所有定义的构造方法,包括私有的</span><br><span class="hljs-comment">         */</span><br>        Constructor&lt;User&gt; declCons1 = clazz.getDeclaredConstructor();<br>        Constructor&lt;User&gt; declCons2 = clazz.getDeclaredConstructor(<span class="hljs-keyword">int</span>.class);<br>        Constructor&lt;User&gt; declCons3 = clazz.getDeclaredConstructor(<span class="hljs-keyword">int</span>.class, String.class);<br><br><span class="hljs-comment">//        System.out.println(declCons1 );</span><br><span class="hljs-comment">//        System.out.println(declCons2 );</span><br><span class="hljs-comment">//        System.out.println(declCons3 );</span><br><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Constructor[] getConstructors()     返回值是构造器类型的集合</span><br><span class="hljs-comment">         * 返回该字节码中所有public修饰的构造方法</span><br><span class="hljs-comment">         */</span><br>        Constructor&lt;?&gt;[] constructors = clazz.getConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;<br>            <span class="hljs-comment">// System.out.println(constructor );</span><br>        &#125;<br><br>        <span class="hljs-comment">// System.out.println(&quot;-----------------&quot; );</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Constructor[] getDeclaredConstructors    返回值是构造器类型的集合</span><br><span class="hljs-comment">         * 返回该字节码中所有定义的构造方法</span><br><span class="hljs-comment">         */</span><br>        Constructor&lt;?&gt;[] constructors2 = clazz.getDeclaredConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; constructor : constructors2) &#123;<br>            <span class="hljs-comment">// System.out.println(constructor );</span><br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 构造方法的API</span><br><span class="hljs-comment">         *  String getName()</span><br><span class="hljs-comment">         *    以字符串形式返回此构造方法的名称。</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  Class&lt;?&gt;[] getParameterTypes()</span><br><span class="hljs-comment">         *    按照声明顺序返回一组 Class 对象，这些对象表示此 Constructor 对象所表示构造方法的形参类型。</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  T newInstance(Object... initargs)</span><br><span class="hljs-comment">         *    使用此 Constructor 对象表示的构造方法来创建该构造方法的声明类的新实例，并用指定的初始化参数初始化该实例。</span><br><span class="hljs-comment">         */</span><br>        String cons1Name = cons1.getName();<br>        System.out.println(cons1Name);<br><br>        System.out.println(<span class="hljs-string">&quot;----------&quot;</span>);<br>        Class&lt;?&gt;[] parameterTypes = cons3.getParameterTypes();<br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;<br>            System.out.println(parameterType);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;----------------&quot;</span>);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * newInstance(Object... args)</span><br><span class="hljs-comment">         * 参数列表中的参数,要根据构造方法执行时需要的参数赋值</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * 即User() 执行时就不传入参数</span><br><span class="hljs-comment">         *   User(int) 执行时就需要传入int类型参数</span><br><span class="hljs-comment">         *   User(int , String) 执行时就需要传入2个参数</span><br><span class="hljs-comment">         */</span><br><span class="hljs-comment">//        User user = cons1.newInstance();</span><br><span class="hljs-comment">//        System.out.println(user);</span><br><span class="hljs-comment">//        User user2 = cons2.newInstance(18);</span><br><span class="hljs-comment">//        System.out.println(user2);</span><br><br>        User user = cons1.newInstance();<br>        System.out.println(user);<br>        User user1 = cons2.newInstance(<span class="hljs-number">12</span>);<br>        System.out.println(user1);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="（2）全部的方法"><a href="#（2）全部的方法" class="headerlink" title="（2）全部的方法"></a>（2）全部的方法</h4><ul><li><code>public Method[] getDeclaredMethods()</code>  返回此Class对象所表示的类或接口的全部方法 </li><li><code>public Method[] getMethods()</code>  返回此Class对象所表示的类或接口的public的方法 </li></ul><p>Method类中： </p><ul><li>public Class <strong>getReturnType()</strong>  取得全部的返回值 </li><li>public Class[]  <strong>getParameterTypes()</strong>  取得全部的参数 </li><li>public int <strong>getModifiers()</strong>   取得修饰符 </li><li>public Class[] <strong>getExceptionTypes()</strong>  取得异常信息</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 反射获得字节码的方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo4_Method</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>        Class&lt;User&gt; clazz = User.class;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Method getMethod(String name,Class parameterTypes)</span><br><span class="hljs-comment">         * 需要通过方法名,及参数列表来确定获得指定的方法对象</span><br><span class="hljs-comment">         * [获得public修饰的方法]</span><br><span class="hljs-comment">         */</span><br>        Method getId = clazz.getMethod(<span class="hljs-string">&quot;getId&quot;</span>);<br><br><span class="hljs-comment">//        getId.setAccessible(true);</span><br><br>        <span class="hljs-comment">// 获得public修饰的所有方法</span><br>        Method[] methods = clazz.getMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br><span class="hljs-comment">//            System.out.println(method );</span><br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * getDeclaredMethod()         获得任意修饰类型方法</span><br><span class="hljs-comment">         * clazz.getDeclaredMethods( ) 获得所有定义的方法</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// ===================================================================</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Method类的API</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  Class&lt;?&gt; getReturnType()</span><br><span class="hljs-comment">         *  返回一个 Class 对象，该对象描述了此 Method 对象所表示的方法的正式返回类型。</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  Object invoke(Object obj, Object... args)</span><br><span class="hljs-comment">         *  对带有指定参数的指定对象调用由此 Method 对象表示的底层方法。</span><br><span class="hljs-comment">         */</span><br>        System.out.println(getId.getReturnType());<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * getMethod()获取set方法时, 参数不需要字节码文件</span><br><span class="hljs-comment">         *            获取get方法时, 需要加上字节码文件</span><br><span class="hljs-comment">         */</span><br>        Method getBirthday = clazz.getMethod(<span class="hljs-string">&quot;getBirthday&quot;</span>);<br>        System.out.println(getBirthday.getReturnType());<br><br>        Method setId = clazz.getMethod(<span class="hljs-string">&quot;setId&quot;</span>, <span class="hljs-keyword">int</span>.class);<br>        System.out.println(setId.getReturnType());<br><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 调用方法执行</span><br><span class="hljs-comment">         * 参数1 执行该方法的对象</span><br><span class="hljs-comment">         * 参数2 该方法执行需要的参数</span><br><span class="hljs-comment">         * 返回值 目标方法返回值</span><br><span class="hljs-comment">         * Object invoke(Object obj, Object... args)</span><br><span class="hljs-comment">         */</span><br>        User user = <span class="hljs-keyword">new</span> User();<br><span class="hljs-comment">//        int id = (int) getId.invoke(user);</span><br><span class="hljs-comment">//        System.out.println(&quot;id = &quot; + id);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        setId.invoke(user, 22);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        int id2 = (int) getId.invoke(user);</span><br><span class="hljs-comment">//        System.out.println(&quot;id2 = &quot; + id2);</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 获得指定的方法对象后, 方法对象可以使用 invoke() 方法调用方法并执行</span><br><span class="hljs-comment">         * setter方法需要传入两个值</span><br><span class="hljs-comment">         * getter方法只需要需要传入一个对象</span><br><span class="hljs-comment">         */</span><br>        Method setName = clazz.getMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class);<br>        Method getName = clazz.getMethod(<span class="hljs-string">&quot;getName&quot;</span>);<br><br>        Object name = getName.invoke(user);<br>        System.out.println(name);<br><br>        setName.invoke(user,<span class="hljs-string">&quot;小八&quot;</span>);<br>        System.out.println(getName.invoke(user));<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="（3）全部的Field"><a href="#（3）全部的Field" class="headerlink" title="（3）全部的Field"></a>（3）全部的Field</h4><ul><li><code>public Field[] getFields() </code>  返回此Class对象所表示的类或接口的public的Field。 </li><li><code>public Field[] getDeclaredFields()</code>   返回此Class对象所表示的类或接口的全部Field。 </li></ul><p>Field方法中： </p><ul><li>public int  <strong>getModifiers()</strong> 以整数形式返回此Field的<strong>修饰符</strong> </li><li>public Class  <strong>getType()</strong> 得到Field的<strong>属性类型</strong> </li><li>public String  <strong>getName()</strong> 返回Field的<strong>名称</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字节码文件操作属性</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo3_Field</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br><br>        Class&lt;User&gt; clazz = User.class;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * getField(String name);      返回值为一个属性对象</span><br><span class="hljs-comment">         * 通过属性名获得public修饰的属性</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * Field[] getFields()</span><br><span class="hljs-comment">         * 返回所有public修饰的属性</span><br><span class="hljs-comment">         */</span><br>        Field[] fields = clazz.getFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(field );<br>        &#125;<br><br>        Field declId = clazz.getDeclaredField(<span class="hljs-string">&quot;id&quot;</span>);<br>        System.out.println(declId );<br>        System.out.println(<span class="hljs-string">&quot;--------&quot;</span> );<br>        <br>        Field[] declFields = clazz.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field field : declFields) &#123;<br>            System.out.println(field );<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Field的API</span><br><span class="hljs-comment">         *  Object get(Object obj)</span><br><span class="hljs-comment">         *  返回指定对象上此 Field 表示的字段的值。</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  void set(Object obj, Object value)</span><br><span class="hljs-comment">         *  将指定对象变量上此 Field 对象表示的字段设置为指定的新值。</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  int getModifiers()</span><br><span class="hljs-comment">         *  以整数形式返回由此 Field 对象表示的字段的 Java 语言修饰符。</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  String getName()</span><br><span class="hljs-comment">         *  返回此 Field 对象表示的字段的名称。</span><br><span class="hljs-comment">         */</span><br>        System.out.println(declId.getName());<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 修饰符所代表得值</span><br><span class="hljs-comment">         * private 2</span><br><span class="hljs-comment">         * package 0</span><br><span class="hljs-comment">         * protected 4</span><br><span class="hljs-comment">         * public 1</span><br><span class="hljs-comment">         */</span><br>        System.out.println(declId.getModifiers());<br><br>        User user = <span class="hljs-keyword">new</span> User();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 特别注意:</span><br><span class="hljs-comment">         *  私有属性不能被操作,否则报错</span><br><span class="hljs-comment">         *  需要对该字段设置访问权限(设置为true)</span><br><span class="hljs-comment">         *  --------------</span><br><span class="hljs-comment">         *  如果本来属性修饰时public,即使设置成false,还是可以访问的</span><br><span class="hljs-comment">         */</span><br>        declId.setAccessible(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">// 获得值(传入对象),即获得该对象的该属性值</span><br>        <span class="hljs-comment">//获得的值是一个对象中的属性值,所以要传入一个对象作为参数,即获得该对象的该属性值</span><br>        Object o = declId.get(user);<br>        System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + o);<br><br>        <span class="hljs-comment">// 设置属性值</span><br>        <span class="hljs-comment">// 参数1 要设置该属性的对象 参数2 属性值(注意数据类型)</span><br>        declId.set(user, <span class="hljs-number">20</span>);<br><br>        Object o2 = declId.get(user);<br>        System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + o2);<br><br>        System.out.println(<span class="hljs-string">&quot;===================&quot;</span>);<br>        String str = <span class="hljs-string">&quot;11&quot;</span>;<br>        System.out.println(str.getClass().getName());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="小-结："><a href="#小-结：" class="headerlink" title="小 结："></a>小 结：</h4><blockquote><ol><li>在实际的操作中，取得类的信息的操作代码，并不会经常开发。 </li><li>一定要熟悉java.lang.reflect包的作用，反射机制。 </li><li>如何取得属性、方法、构造器的名称，修饰符等。</li></ol></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>反射</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Date类的问题</title>
    <link href="/2021/11/17/Date%E7%B1%BB%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2021/11/17/Date%E7%B1%BB%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="util包和sql包里的Date类区别"><a href="#util包和sql包里的Date类区别" class="headerlink" title="util包和sql包里的Date类区别"></a>util包和sql包里的Date类区别</h3><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><br><p><code>java.util.date</code> 是 <code>java.sql.date</code> 的父类，其中 <code>java.util.date</code> 用于除了数据库以外的任何地方（实际上也可以用于数据库）。两者都有 <code>getTime</code> 的方法（获取 <code>long</code> 类型）。</p><p>所以可以互相转换</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">java.sql.date date_sql = <span class="hljs-keyword">new</span> java.sql.date(System.currentTime());<br>java.util.date date = <span class="hljs-keyword">new</span> java.util.date(date_sql.getTime());<br></code></pre></div></td></tr></table></figure><p>反过来转换也是一样的。<br>       另一种转换时：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">java.util.date date = <span class="hljs-keyword">new</span> java.util.date(date_sql);<span class="hljs-comment">//用子类创建父类</span><br></code></pre></div></td></tr></table></figure><p><code>preparement </code>中 <code>getDate()</code> 与 <code>setDate(datesql)</code> 中返回与传入的参数都是 <code>java.sql.date</code> ，所以要先进行转换。<br><code>java.sql.date</code>  没有无参的构造函数，必须传值，<code>java.util.date</code> 可以使用无参构造函数，获取的是当前的时间。</p><br><blockquote><p><strong>java.sql.date的时间格式是年-月-日，没有时间部分。</strong></p><p>强制从<code>date.sql</code>获取时分秒，会抛异常。</p><p>但是不代表没有时间部分的精度。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">datesql.getTime() == date.getTime()   <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><br><p>两个对象都能进行格式化，使用类 <code>SimpleDateFormat</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd  hh:mm:ss&quot;</span>);<br>        <br>        <span class="hljs-comment">//创建util下的Date</span><br>        java.util.Date date = <span class="hljs-keyword">new</span> java.util.Date();<br>        System.out.println(sdf.format(date));<br><br>        <span class="hljs-comment">//创建sql下的Date</span><br>        java.sql.Date dateSql = <span class="hljs-keyword">new</span> java.sql.Date(date.getTime());<br>        System.out.println(sdf.format(dateSql));  <span class="hljs-comment">// 通过format转换后可以显示时分秒</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>注：</p><blockquote><p><strong><code>java.sql.date</code> 通过格式化后可以显示时分秒，也就是他时分秒的精度并没有丢失</strong></p><p><strong><code>java.util.Date </code> 表示特定的瞬间，精确到毫秒</strong></p></blockquote><hr><br><p><code>java.sql.Date</code> 一个包装了毫秒值的瘦包装器 (thin wrapper)，它允许 JDBC 将毫秒值标识为 <code>SQL DATE </code> 值。毫秒值表示自 1970 年 1 月 1 日 00:00:00 GMT 以来经过的毫秒数。为了与 <code>SQL DATE</code>  的定义一致，由 <code>java.sql.Date</code>  实例包装的毫秒值必须通过将小时、分钟、秒和毫秒设置为与该实例相关的特定时区中的零来“规范化”。</p><p style="color:red">注意：默认的java.util.Date不能直接插入到数据库</p><hr><br><p><code>java.sql.Date</code> 为 <code>java.util.Date</code> 的一个子类，继承了 <code>java.util.Date</code> 中的方法，只不过两者的<code>tostring()</code> 不同， <code>java.sql.Date</code> 对其进行了重写。</p><p><code>java.util.Date</code> 把此 <code>Date </code> 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 输出</p><p><code>java.sql.Date </code> 则格式化日期转义形式 yyyy-mm-dd 输出。</p><hr><br><p><strong>总结：</strong></p><blockquote><p><strong>正因为他们之间有继承的关系，所以实际上，在JDBC与数据库交互的时候，用哪一个Date都是可以的，</strong></p><p><strong>只是侧重点不同而已。 （实际上项目中大部分还是用util包中的Date）</strong></p></blockquote><hr><h4 id="java-util-date-和-java-sql-date互转"><a href="#java-util-date-和-java-sql-date互转" class="headerlink" title="java.util.date 和 java.sql.date互转"></a><strong>java.util.date 和 java.sql.date互转</strong></h4><br><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <br>        java.util.Date utilDate=<span class="hljs-keyword">new</span> Date();<br>        System.out.println(<span class="hljs-string">&quot;utilDate = &quot;</span>+utilDate);<br><br>        java.sql.Date sqlDate=<span class="hljs-keyword">new</span> java.sql.Date(utilDate.getTime());<br>        System.out.println(<span class="hljs-string">&quot;utilDate --&gt; sqlDate = &quot;</span>+sqlDate);<br><br>        java.sql.Time sTime=<span class="hljs-keyword">new</span> java.sql.Time(utilDate.getTime());<br>        System.out.println(<span class="hljs-string">&quot;utilDate --&gt; sTime = &quot;</span>+sTime);<br>        java.sql.Timestamp stp=<span class="hljs-keyword">new</span> java.sql.Timestamp(utilDate.getTime());<br>        System.out.println(<span class="hljs-string">&quot;utilDate --&gt; stp = &quot;</span>+stp);<br>        System.out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br><br>        SimpleDateFormat f=<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);<br>        System.out.println(f.format(stp));<br>        System.out.println(f.format(sTime));<br>        System.out.println(f.format(sqlDate));<br>        System.out.println(f.format(utilDate));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="转-java-util-Timestamp-去掉毫秒"><a href="#转-java-util-Timestamp-去掉毫秒" class="headerlink" title="转 java.util.Timestamp 去掉毫秒"></a>转 java.util.Timestamp 去掉毫秒</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-comment">//获取当前系统时间</span><br>        Timestamp date=<span class="hljs-keyword">new</span> Timestamp(System.currentTimeMillis());<br>        <span class="hljs-comment">//定义格式，不显示毫秒</span><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-comment">//将当前系统时间转换为不显示毫秒情况，保存为string类型在dateNow中</span><br>        String dateNow= sdf.format(date);<br>        <span class="hljs-comment">//控制台显示dateNow的值</span><br>        System.out.println(<span class="hljs-string">&quot;系统时间:&quot;</span>+dateNow);<br>    &#125;<br>&#125;       <br><br></code></pre></div></td></tr></table></figure><hr><h3 id="System-currentTimeMillis（）"><a href="#System-currentTimeMillis（）" class="headerlink" title="System.currentTimeMillis（）"></a>System.currentTimeMillis（）</h3><br><p>什么是 <code>System.currentTimeMillis()</code> ?</p><br><blockquote><p>在开发过程中，通常很多人都习惯使用<code>new Date()</code> 来获取当前时间。<code>new Date()</code> 所做的事情其实</p><p>就是调用了<code>System.currentTimeMillis()</code>。如果仅仅是需要或者毫秒数，那么完全可以使 用</p><p><code>System.currentTimeMillis()</code>去代替<code>new Date()</code>，效率上会高一点。如果需要在同一个方法里面多</p><p>次使用<code>new Date()</code>，通常性能就是这样一点一点地消耗掉，这里其实可以声明一个引用。</p><p><code>System.currentTimeMillis()</code> 获得的是自 <code>1970-1-01 00:00:00.000</code>  到当前时刻的时间距离，类型</p><p>为<code>long</code>。</p></blockquote><br><p>使用例子:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>        <span class="hljs-comment">//获得系统的时间，单位为毫秒,转换为妙</span><br>        <span class="hljs-keyword">long</span> totalMilliSeconds = System.currentTimeMillis();<br>        <span class="hljs-keyword">long</span> totalSeconds = totalMilliSeconds / <span class="hljs-number">1000</span>;<br>        System.out.println(<span class="hljs-string">&quot;获得系统的时间(秒) = &quot;</span>+totalSeconds);<br><br>        <span class="hljs-comment">//求出现在的秒</span><br>        <span class="hljs-keyword">long</span> currentSecond = totalSeconds % <span class="hljs-number">60</span>;<br>        System.out.println(<span class="hljs-string">&quot;现在的秒 = &quot;</span>+currentSecond);<br><br>        <span class="hljs-comment">//求出现在的分</span><br>        <span class="hljs-keyword">long</span> totalMinutes = totalSeconds / <span class="hljs-number">60</span>;<br>        <span class="hljs-keyword">long</span> currentMinute = totalMinutes % <span class="hljs-number">60</span>;<br>        System.out.println(<span class="hljs-string">&quot;现在的分 = &quot;</span>+totalMinutes);<br><br>        <span class="hljs-comment">//求出现在的小时</span><br>        <span class="hljs-keyword">long</span> totalHour = totalMinutes / <span class="hljs-number">60</span>;<br>        <span class="hljs-keyword">long</span> currentHour = totalHour % <span class="hljs-number">24</span>;<br>        System.out.println(<span class="hljs-string">&quot;现在的小时 = &quot;</span>+totalHour);<br><br>        <span class="hljs-comment">//显示时间</span><br>        System.out.println(<span class="hljs-string">&quot;总毫秒为： &quot;</span> + totalMilliSeconds);<br>        System.out.println(currentHour + <span class="hljs-string">&quot;:&quot;</span> + currentMinute + <span class="hljs-string">&quot;:&quot;</span> + currentSecond + <span class="hljs-string">&quot; GMT&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">获得系统的时间(秒) = <span class="hljs-number">1637152029</span><br>现在的秒 = <span class="hljs-number">9</span><br>现在的分 = <span class="hljs-number">27285867</span><br>现在的小时 = <span class="hljs-number">454764</span><br>总毫秒为： <span class="hljs-number">1637152029071</span><br><span class="hljs-number">12</span>:<span class="hljs-number">27</span>:<span class="hljs-number">9</span> GMT   <span class="hljs-comment">//注:GMT为格林尼治时间相差八个时区</span><br></code></pre></div></td></tr></table></figure><hr><p>几个比较常见的用法:</p><p><strong>1. 计算某任务 耗费的毫秒</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            Thread.sleep(<span class="hljs-number">10</span>);<br>        &#125;<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;for循环耗时&quot;</span> + (end - start) + <span class="hljs-string">&quot;毫秒&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><br><p><strong>2.获得当前的系统时间</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Date nowTime = <span class="hljs-keyword">new</span> Date(System.currentTimeMillis());<br>        SimpleDateFormat sdFormatter = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br><br>        String now = sdFormatter.format(nowTime);<br>        System.out.println(now);<span class="hljs-comment">// 时间的输出</span><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><br><p><strong>3.用当前毫秒数给文件命名等</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File f = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;c:\\&quot;</span>+System.currentTimeMillis() + <span class="hljs-string">&quot;&quot;</span>);<br>        f.createNewFile();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><br>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>常用类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>File类的使用</title>
    <link href="/2021/11/12/File%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/11/12/File%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="File类的使用"><a href="#File类的使用" class="headerlink" title="File类的使用"></a>File类的使用</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><p>文件和目录路径名的抽象表示形式。</p><p><code>File</code> 对象代表文件或者文件夹，但是是以文件或文件夹的路径形式表现.</p><ul><li><code>java.io.File</code> 类：文件和文件目录路径的抽象表示形式，与平台无关 </li><li><code>File </code> 能新建、删除、重命名文件和目录，但 <code>File </code> 不能访问文件内容本身。 如果需要访问文件内容本身，则需要使用输入/输出流。 </li><li>想要在 <code>Java</code> 程序中表示一个真实存在的文件或目录，那么必须有一个File对 象，但是Java程序中的一个<code>File</code> 对象，可能没有一个真实存在的文件或目录。 </li><li><code>File</code> 对象可以作为参数传递给流的构造器</li><li>路径中的每级目录之间用一个路径分隔符隔开。</li><li>路径分隔符和系统有关： <ul><li><code>windows</code> 和 <code>DOS</code> 系统默认使用“\”来表示 </li><li><code>UNIX</code> 和 <code>URL</code> 使用“/”来表示</li></ul></li></ul><hr><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="常用构造方法"><a href="#常用构造方法" class="headerlink" title="常用构造方法:"></a><strong>常用构造方法:</strong></h4><table><thead><tr><th>构造方法</th><th></th></tr></thead><tbody><tr><td><code>File(File parent, String child)  </code></td><td>根据 parent 抽象路径名和 child 路径名字符串创建一个新 File 实例。</td></tr><tr><td><code>File(String  pathname)   </code></td><td>通过将给定路径名字符串转换为抽象路径名来创建一个新 File 实例。</td></tr><tr><td><code>File(String parent, String child)  </code></td><td>据 parent 路径名字符串和 child 路径名字符串创建一个新 File 实例。</td></tr></tbody></table><p style="color:red">注意：File类没有无参构造，创建File时必须指定路径。创建时指定文件路径可以是不存在的。<br><p><strong>Test:</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * File创建时必须指定路径</span><br><span class="hljs-comment">         */</span><br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\test&quot;</span>);<br>        File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\test\\a.txt&quot;</span>);<br><br>        <span class="hljs-comment">//File(String parent,String child)  父子路径拼接成一个完成路径</span><br>        File file3 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\test&quot;</span>,<span class="hljs-string">&quot;a.txt&quot;</span>);<br><br>        File parent = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\test&quot;</span>);<br>        File file5 = <span class="hljs-keyword">new</span> File(parent,<span class="hljs-string">&quot;a.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="创建功能"><a href="#创建功能" class="headerlink" title="创建功能:"></a><strong>创建功能:</strong></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\myfile\\a.txt&quot;</span>);<br><br><span class="hljs-comment">// createNewFile(); 创建文件,已存在返回false</span><br><span class="hljs-keyword">boolean</span> createNewFile = file.createNewFile();<br>System.out.println(<span class="hljs-string">&quot;是否创建成功 ? &quot;</span> + createNewFile);<br><br>File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\myfile\\a&quot;</span>);<br><span class="hljs-comment">// mkdir() 创建单层文件夹,已存在返回false</span><br><span class="hljs-keyword">boolean</span> mkdir = file2.mkdir();<br>System.out.println(<span class="hljs-string">&quot;创建文件夹是否成功? &quot;</span> + mkdir);<br><br><br>File file3 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\myfile\\b\\c\\d&quot;</span>);<br><span class="hljs-comment">// mkdirs() 创建多层文件夹,已存在返回false</span><br><span class="hljs-keyword">boolean</span> mkdirs = file3.mkdirs();<br>System.out.println(<span class="hljs-string">&quot;创建文件夹是否成功? &quot;</span> + mkdirs);<br><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="获取功能-get"><a href="#获取功能-get" class="headerlink" title="获取功能(get):"></a><strong>获取功能(get):</strong></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\myfile\\a.txt&quot;</span>);<br>File absoluteFile = file.getAbsoluteFile();<br>System.out.println(absoluteFile.equals(file));<br><br><span class="hljs-comment">// 获得绝对路径</span><br>String absolutePath = file.getAbsolutePath();<br>System.out.println(absolutePath);<br><span class="hljs-comment">// 获得构造方法中传入的路径</span><br>System.out.println(<span class="hljs-string">&quot;getPath() &quot;</span> + file.getPath());<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建文件时,不指定盘符,就默认是相对路径</span><br><span class="hljs-comment"> * 相对于当前项目的根路径 </span><br><span class="hljs-comment"> */</span><br>File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>System.out.println(file2.getAbsolutePath());<br>System.out.println(<span class="hljs-string">&quot;getPath() &quot;</span> + file2.getPath());<br><br><span class="hljs-comment">// 获得文件名</span><br>System.out.println(file.getName());<br><br><span class="hljs-comment">// 获得父路径,即获得上一层路径</span><br><span class="hljs-comment">// String file.getParent();</span><br>System.out.println(file.getParent());<br><br><span class="hljs-comment">//  File getParentFile(); 返回当前文件的父目录对象</span><br><br><span class="hljs-comment">// long length()  返回由此抽象路径名表示的文件的长度。 </span><br>System.out.println(file.length());<br><br>File file3 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\myfile&quot;</span>);<br><span class="hljs-comment">// 文件夹没有长度,返回的0</span><br>System.out.println(file3.length());<br><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="获取功能-list"><a href="#获取功能-list" class="headerlink" title="获取功能(list):"></a><strong>获取功能(list):</strong></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//File file = new File(&quot;C:\\myfile\\a.txt&quot;);</span><br><span class="hljs-comment">///**</span><br><span class="hljs-comment">// * list() 是获得文件夹内部路径的,即如果</span><br><span class="hljs-comment">// * 使用文件对象调用list,就会返回null</span><br><span class="hljs-comment">// */</span><br><span class="hljs-comment">//String[] list = file.list();</span><br><span class="hljs-comment">//System.out.println(Arrays.toString(list));</span><br><br>File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\myfile&quot;</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * String[] list();获得文件夹内部文件和目录的路径字符串</span><br><span class="hljs-comment"> */</span><br>String[] list = file.list();<br><span class="hljs-keyword">for</span> (String path : list) &#123;<br>System.out.println(path);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * File[] listFiles();</span><br><span class="hljs-comment"> */</span><br>File[] listFiles = file.listFiles();<br><span class="hljs-keyword">for</span> (File f : listFiles) &#123;<br>System.out.println(f);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获得文件夹下所有的记事本文件</span><br><span class="hljs-comment"> * 需要传入自定义的过滤器</span><br><span class="hljs-comment"> */</span><br>File[] listFiles2 = file.listFiles(<span class="hljs-keyword">new</span> MyTxtFilter());<br><span class="hljs-keyword">for</span> (File f : listFiles2) &#123;<br>System.out.println(f);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTxtFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FileFilter</span></span>&#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 只要txt文件</span><br><span class="hljs-comment"> * 返回值 true,就放入数组</span><br><span class="hljs-comment"> * 返回值false,就不放入数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">accept</span><span class="hljs-params">(File pathname)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (pathname.isFile()) &#123;<br>String name = pathname.getName();<br><span class="hljs-keyword">if</span> (name.endsWith(<span class="hljs-string">&quot;txt&quot;</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="判断功能"><a href="#判断功能" class="headerlink" title="判断功能:"></a><strong>判断功能:</strong></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\myfile\\b.txt&quot;</span>);<br><br><span class="hljs-comment">// 判断是否是文件夹</span><br><span class="hljs-keyword">boolean</span> directory = file.isDirectory();<br>System.out.println(directory);<br><br><span class="hljs-comment">// 判断是否是文件</span><br>System.out.println(file.isFile());<br><br><span class="hljs-comment">// 判断是否存在</span><br>System.out.println(file.exists());<br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="删除和重命名"><a href="#删除和重命名" class="headerlink" title="删除和重命名:"></a><strong>删除和重命名:</strong></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\myfile\\a.txt&quot;</span>);<br><span class="hljs-comment">// 目的地路径与源路径一致,就是重命名</span><br><span class="hljs-comment">// File file2 = new File(&quot;C:\\myfile\\A.txt&quot;);</span><br><br><span class="hljs-comment">// 目的地路径与源路径不一致,就是剪切并重命名</span><br>File file3 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\myfile\\a\\A.txt&quot;</span>);<br><span class="hljs-comment">// boolean renameTo = file.renameTo(file3);</span><br><span class="hljs-comment">// System.out.println(renameTo);</span><br><br><span class="hljs-comment">// 删除文件,直接删除并没有进入回收站</span><br><span class="hljs-keyword">boolean</span> delete = file.delete();<br>System.out.println(delete);<br><br><span class="hljs-comment">// 只能删除空文件夹</span><br>File file4 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\myfile\\b\\c\\d&quot;</span>);<br><span class="hljs-keyword">boolean</span> delete2 = file4.delete();<br>System.out.println(delete2);<br><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="练习"><a href="#练习" class="headerlink" title="练习:"></a>练习:</h4><h5 id="1-写一个方法返回该路径下所有的txt文件对象"><a href="#1-写一个方法返回该路径下所有的txt文件对象" class="headerlink" title="(1)  写一个方法返回该路径下所有的txt文件对象"></a>(1)  写一个方法返回该路径下所有的txt文件对象</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFile2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;File&gt; list = getTxtObj(<span class="hljs-string">&quot;D:\\De\\demo&quot;</span>);<br>        <span class="hljs-keyword">for</span> (File file : list) &#123;<br>            System.out.println(file);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ArrayList&lt;File&gt; <span class="hljs-title">getTxtObj</span><span class="hljs-params">(String path)</span> </span>&#123;<br>        ArrayList&lt;File&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-comment">//File(String pathname) 通过将给定路径名字符串转换为抽象路径名来创建一个新 File实例</span><br>        File file = <span class="hljs-keyword">new</span> File(path);<br>        <span class="hljs-keyword">if</span> (file.isFile()) &#123;<br>            <span class="hljs-keyword">if</span> (path.endsWith(<span class="hljs-string">&quot;txt&quot;</span>)) &#123;<br>                list.add(file);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            File[] files = file.listFiles();<br>            <span class="hljs-comment">//listFiles() 返回一个抽象路径名数组，这些路径名表示此抽象路径名表示的目录中的文件</span><br>            <span class="hljs-keyword">for</span> (File f : files) &#123;<br>                <span class="hljs-keyword">if</span> (f.getName().endsWith(<span class="hljs-string">&quot;txt&quot;</span>)) &#123;<br>                    list.add(f);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><br><h5 id="2-写一个方法传入文件-文件夹路径，删除该文件或文件夹-递归遍历删除"><a href="#2-写一个方法传入文件-文件夹路径，删除该文件或文件夹-递归遍历删除" class="headerlink" title="(2)  写一个方法传入文件/文件夹路径，删除该文件或文件夹(递归遍历删除)"></a>(2)  写一个方法传入文件/文件夹路径，删除该文件或文件夹(递归遍历删除)</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFile4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        deleteAll(<span class="hljs-string">&quot;D:\\De(IOtest)\\新建文件夹&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteAll</span><span class="hljs-params">(String path)</span> </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(path);<br>        <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>            File[] files = file.listFiles();<br>            <span class="hljs-keyword">for</span> (File f : files) &#123;<br>                deleteAll(f.getAbsolutePath());<br>            &#125;<br>        &#125;<br>        file.delete();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><br><h5 id="3-写一个方法获取给定文件、文件夹字节大小"><a href="#3-写一个方法获取给定文件、文件夹字节大小" class="headerlink" title="(3)  写一个方法获取给定文件、文件夹字节大小"></a>(3)  写一个方法获取给定文件、文件夹字节大小</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFile</span> </span>&#123;<br><span class="hljs-comment">// 写一个方法获取参数文件/文件夹字节大小</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> length = <span class="hljs-number">0</span>;<br>    <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    getLength(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\A&quot;</span>));<br>    System.out.println(length );<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 传入文件/文件夹路径,计算文件夹/文件大小</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getLength</span><span class="hljs-params">(File file)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;文件路径有误!&quot;</span> );<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 是不是文件夹</span><br>    <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>        File[] files = file.listFiles( );<br>        <span class="hljs-keyword">for</span>(File f : files) &#123;<br>            getLength(f);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 是文件,直接获取长度</span><br>    length += file.length();<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>IO流</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java集合</title>
    <link href="/2021/11/08/Java%E9%9B%86%E5%90%88/"/>
    <url>/2021/11/08/Java%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h2 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h2><hr><h3 id="一、集合框架体系结构"><a href="#一、集合框架体系结构" class="headerlink" title="一、集合框架体系结构"></a>一、集合框架体系结构</h3><p>Java 集合可分为 <code>Collection</code> 和 <code>Map</code> 两种体系 </p><ul><li><code>Collection</code> 接口：单列数据，定义了存取一组对象的方法的集合 <ul><li><code>List</code> ：元素有序、可重复的集合 </li><li><code>Set</code> ：元素无序、不可重复的集合 </li></ul></li><li><code>Map</code> 接口：双列数据，保存具有映射关系“ <code>key-value</code> 对”的集合</li></ul><p>__</p><center><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211108192129.png" style="zoom: 55%;" /></center><p>__</p><hr><h3 id="二、集合框架概述"><a href="#二、集合框架概述" class="headerlink" title="二、集合框架概述"></a>二、集合框架概述</h3><br><p>&nbsp;&nbsp;&nbsp;&nbsp;一方面， 面向对象语言对事物的体现都是以对象的形式，为了方便对多个对象 的操作，就要对对象进行存储。另一方面，使用Array存储对象方面具有一些弊端，而Java 集合就像一种容器，可以动态地把多个对象的引用放入容器中。 </p><ul><li>数组在内存存储方面的特点： <ul><li>数组长度固定</li><li>数组只能存储同一数据类型</li><li>数组中的元素可以重复</li><li>数组中元素顺序是固定的，按照插入顺序</li><li>数组的功能性较弱（没有方法，只有一个属性，只能存值取值，遍历）</li><li>基本类型数组可以存储基本类型，引用类型数组可以存储引用类型</li></ul></li></ul><br><ul><li>数组在存储数据方面的弊端： <ul><li>数组初始化以后，长度就不可变了，不便于扩展 </li><li>数组中提供的属性和方法少，不便于进行添加、删除、插入等操作，且效率不高。 同时无法直接获取存储元素的个数 </li><li>数组存储的数据是有序的、可以重复的，存储数据的特点单一。 </li></ul></li></ul><hr><ul><li>Java 集合可以用于存储的多个对象，还可用于保存具有映射关系的关联数组。<ul><li>集合是用来存储数据：</li><li>长度不固定，可以存储多个数据</li><li>允许存储多种数据，（但是经验上大部分还是存值同一类型）</li><li>有些集合允许重复元素，有些集合不允许重复</li><li>有些集合有顺序，有些集合无序</li><li>集合提供了丰富的API来操作集合，及集合中的元素</li></ul></li></ul><br><hr><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><br><p><code>Collection</code> 是集合的根接口</p><p><code>Collection</code> 接口是 <code>List</code>、<code>Set </code> 和 <code>Queue</code>  接口的父接口，该接口里定义的方法，既可用于操作 <code>Set</code>集合，也可用于操作 <code>List</code> 和 <code>Queue</code> 集合。</p><br><p>JDK不提供此接口的任何直接实现，而是提供更具体的子接口（如：Set 和 List）实现。</p><blockquote><p>在 Java5 之前，Java 集合会丢失容器中所有对象的数据类型，把所有对象都 当成 Object 类型处理；</p><p>从 JDK 5.0 增加了<strong>泛型</strong>以后，Java 集合可以记住容 器中对象的数据类型。</p></blockquote><br><p><strong>方法：</strong></p><p>因为 <code>Collection</code> 是接口，所以使用 <code>ArrayList</code> 间接子实现类来演示方法.</p><table><thead><tr><th>API常用方法</th><th></th><th></th></tr></thead><tbody><tr><td><code>boolean</code></td><td><strong><code>add(E e) </code></strong></td><td>确保此  collection 包含指定的元素（可选操作）。</td></tr><tr><td><code>boolean</code></td><td><strong><code>addAllCollection&lt;? extends E&gt;   c)</code></strong></td><td>将指定  collection 中的所有元素都添加到此 collection 中（可选操作）。</td></tr><tr><td><code>void</code></td><td><strong><code>clear() </code></strong></td><td>移除此  collection 中的所有元素（可选操作）。</td></tr><tr><td><code>boolean</code></td><td><strong><code>contains(Object o)</code></strong></td><td>如果此  collection 包含指定的元素，则返回 true。</td></tr><tr><td><code>boolean</code></td><td><strong><code>containsAll(Collection&lt;?&gt;  c)</code></strong></td><td>如果此  collection 包含指定 collection 中的所有元素，则返回 true。</td></tr><tr><td><code>boolean</code></td><td><strong><code>equals(Object o)</code></strong></td><td>比较此  collection 与指定对象是否相等。</td></tr><tr><td><code>boolean</code></td><td><strong><code>isEmpty()</code></strong></td><td>如果此  collection 不包含元素，则返回 true。</td></tr><tr><td><code>Iterator&lt;E&gt;</code></td><td><strong><code>iterator()</code></strong></td><td>返回在此  collection 的元素上进行迭代的迭代器。</td></tr><tr><td><code>boolean</code></td><td><strong><code>remove(Objecto)</code></strong></td><td>从此 collection  中移除指定元素的单个实例，如果存在的话（可选操作）。</td></tr><tr><td><code>boolean</code></td><td><strong><code>removeAlln(Collection&lt;?&gt;  c)</code></strong></td><td>移除此  collection 中那些也包含在指定 collection 中的所有元素（可选操作）。</td></tr><tr><td><code>boolean</code></td><td><strong><code>retainAll(Collection&lt;?&gt;  c)</code></strong></td><td>仅保留此  collection 中那些也包含在指定 collection 的元素（可选操作）。</td></tr><tr><td><code>int</code></td><td><strong><code>size()</code></strong></td><td>返回此  collection 中的元素数。</td></tr><tr><td><code>Object[]</code></td><td><strong><code>toArray()</code></strong></td><td>返回包含此  collection 中所有元素的数组。</td></tr><tr><td><code>&lt;T&gt; T[]</code></td><td><strong><code>toArray(T[]  a)</code></strong></td><td>返回包含此  collection 中所有元素的数组；返回数组的运行时类型与指定数组的运行时类型相同。</td></tr></tbody></table><br>Test:<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollectionTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br><br>        <span class="hljs-comment">//1.add(Object e):将元素e添加到集合coll中</span><br>        coll.add(<span class="hljs-string">&quot;aa&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;bb&quot;</span>);<br>        coll.add(<span class="hljs-number">1234</span>);<br>        coll.add(<span class="hljs-keyword">new</span> Date());<br><br>        <span class="hljs-comment">//2.size():获取添加元素的个数</span><br>        System.out.println(coll.size());<br>        <span class="hljs-comment">//System.out.println(coll.hashCode());</span><br><br>        <span class="hljs-comment">//3.addAll(Collection coll):将coll1集合中的元素添加到当前的集合中</span><br>        Collection coll1 = <span class="hljs-keyword">new</span> ArrayList();<br>        coll1.add(<span class="hljs-number">5678</span>);<br>        coll1.add(<span class="hljs-string">&quot;cc&quot;</span>);<br>        coll.addAll(coll1);<br>        System.out.println(coll.size());<span class="hljs-comment">//6</span><br>        System.out.println(coll);<br><br>        <span class="hljs-comment">//4.clear():清空集合元素</span><br>        coll.clear();<br>        System.out.println(coll);<br><br>        <span class="hljs-comment">//5.isEmpty():判断当前集合是否为空,boolean类型,</span><br>        System.out.println(coll.isEmpty());<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollectionTest2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br>        coll.add(<span class="hljs-number">123</span>);<br>        coll.add(<span class="hljs-number">456</span>);<br>        coll.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>));<br>        coll.add(<span class="hljs-keyword">false</span>);<br>        System.out.println(coll);<br><br>        Person p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>);<br>        coll.add(p);<br>        System.out.println(coll.contains(p));<span class="hljs-comment">//true</span><br>        coll.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>));<br><br>        <span class="hljs-comment">//6. contains(Object e): 判断当前集合中是否包含e</span><br>        <span class="hljs-comment">//我们在判断时会调用obj对象所在类的equals().</span><br>        <span class="hljs-keyword">boolean</span> contains =  coll.contains(<span class="hljs-number">123</span>);<br>        System.out.println(contains);<br>        System.out.println(coll.contains(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>)));<br>        <span class="hljs-comment">//6. contains(Object e):比较的是集合中的内容,调用的是Object类中的equals,String类中已经重写过了,所以比较的是内容</span><br>        <span class="hljs-comment">//Object类中的equals比较用的是==</span><br><br>        System.out.println(coll.contains(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>)));<br>        <span class="hljs-comment">//如果是重新new的对象,判断的是false,如果想要返回true,则需要重写equals()</span><br>        System.out.println(coll.contains(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">20</span>)));<br><br>        <span class="hljs-comment">//7. containsAll(collection colL1): 判断形参coll1中的所有元素是否都存在于当前集合中</span><br>        <span class="hljs-comment">// (从上到下有顺序上的关系,顺序不一致出错)</span><br>        Collection coll1 = Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">23</span>,<span class="hljs-number">546</span>);<br>        System.out.println(coll.containsAll(coll1));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollectionTest3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br>        coll.add(<span class="hljs-number">123</span>);<br>        coll.add(<span class="hljs-number">456</span>);<br>        coll.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>));<br>        coll.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>));<br>        coll.add(<span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-comment">//8. remove(Collection coll):从当前集合中移除obj元素。返回boolean值</span><br>        <span class="hljs-comment">//remove调用过程中调用equals()方法</span><br>        coll.remove(<span class="hljs-number">123</span>);<br>        coll.remove(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>));<br>        System.out.println(coll);<br><br>        <span class="hljs-comment">//9. removeALl(Collection coll1):差集(相交部分删除),从当前集合中移除与集合coll1中相同的元素</span><br>        Collection coll1 = Arrays.asList(<span class="hljs-number">123</span>,<span class="hljs-number">456</span>,<span class="hljs-number">789</span>);<br>        coll.removeAll(coll1);<br>        System.out.println(coll);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br>        coll.add(<span class="hljs-number">123</span>);<br>        coll.add(<span class="hljs-number">456</span>);<br>        coll.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>));<br>        coll.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>));<br>        coll.add(<span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-comment">//10. retainAlL(Collection coll1):交集: 获取当前集合和coll1集合的交集，并返回给当前集合</span><br>        Collection coll2 = Arrays.asList(<span class="hljs-number">123</span>,<span class="hljs-number">456</span>,<span class="hljs-number">789</span>);<br>        coll.retainAll(coll2);<br>        System.out.println(coll);<br><br>        <span class="hljs-comment">//11.equals(object obj):要想返回true，需要当前集合和形参集合的元素都相同(元素有顺序要求)。</span><br>        Collection coll1 = <span class="hljs-keyword">new</span> ArrayList();<br>        coll1.add(<span class="hljs-number">123</span>);<br>        coll1.add(<span class="hljs-number">456</span>);<br>        coll1.add( <span class="hljs-keyword">new</span> Person( <span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span> ));<br>        coll1.add( <span class="hljs-keyword">new</span> String(  <span class="hljs-string">&quot;Tom&quot;</span>));<br>        coll1.add(<span class="hljs-keyword">false</span>);<br>        System.out.println(coll.equals(coll1));<br><br>        <span class="hljs-comment">//12. hashCode():返回当前对象的哈希值</span><br>        System.out.println(coll.hashCode());<br><br>        <span class="hljs-comment">//集合 -----&gt;  数组: toArray()</span><br>        Object[] arr = coll.toArray();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><br><p>List 是 <code>Collection</code> 的子接口</p><blockquote><p>（1）List 类型的集合是<strong>有序的</strong>  -&gt;   遍历顺序和添加顺序一致</p><p>（2）List 类型的集合<strong>允许重复元素</strong></p><p>（3）List 集合中的每个元素都有其对应的<strong>顺序</strong>索引，可以通过位置对元素进行精确控制。</p></blockquote><br><p><strong>方法：</strong></p><p><code>List </code>是接口，还是要以 <code>ArrayList</code> 进行演示</p><table><thead><tr><th>API常用方法</th><th></th><th></th></tr></thead><tbody><tr><td><code>void</code></td><td><strong>add(int index, E element)</strong></td><td>在列表的指定位置插入指定元素（可选操作）。</td></tr><tr><td><code>boolean</code></td><td><strong>addAll(int  index , Collection&lt;? extends  E&gt;  c)</strong></td><td>将指定  collection 中的所有元素都插入到列表中的指定位置（可选操作）。</td></tr><tr><td><code>E</code></td><td><strong>get(int  index)</strong></td><td>返回列表中指定位置的元素。</td></tr><tr><td><code>int</code></td><td><strong>indexOf(Object  o)</strong></td><td>返回此列表中第一次出现的指定元素的索引；如果此列表不包含该元素，则返回 -1。</td></tr><tr><td><code>int</code></td><td><strong>lastIndexOf(Object  o)</strong></td><td>返回此列表中最后出现的指定元素的索引；如果列表不包含此元素，则返回 -1。</td></tr><tr><td><code>E</code></td><td><strong>remove(int  index)</strong></td><td>移除列表中指定位置的元素（可选操作）。</td></tr><tr><td><code>E</code></td><td><strong>set(int  index , E  element)</strong></td><td>用指定元素替换列表中指定位置的元素（可选操作）。</td></tr><tr><td><code>List&lt;E&gt;</code></td><td><strong>subList(int  fromIndex , int   toIndex)</strong></td><td>返回列表中指定的  fromIndex（包括 ）和toIndex（不包括）之间的部分视图。</td></tr></tbody></table><br><p>Test:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestList</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;( );<br>        list.add(<span class="hljs-number">1</span>);<br>        list.add(<span class="hljs-number">2</span>);<br>        list.add(<span class="hljs-number">3</span>);<br><br>        System.out.println(list );<br>        <span class="hljs-comment">// add(int index,E e)</span><br>        <span class="hljs-comment">// 指定位置插入元素</span><br>        list.add(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>);<br>        System.out.println(list );<br><br>        List&lt;Integer&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;( );<br>        list2.add(<span class="hljs-number">11</span>);<br>        list2.add(<span class="hljs-number">22</span>);<br>        list2.add(<span class="hljs-number">33</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;---------------&quot;</span> );<br>        System.out.println(list );<br>        list.addAll(<span class="hljs-number">2</span>,list2);<br>        System.out.println(list );<br><br>        <span class="hljs-comment">// E get(int index)</span><br>        Integer i5 = list.get(<span class="hljs-number">5</span>);<br>        System.out.println(i5 );<br><br>        System.out.println(<span class="hljs-string">&quot;--------------&quot;</span> );<br>        <span class="hljs-comment">// 遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            Integer integer = list.get(i);<br>            System.out.println(integer );<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;--------------&quot;</span> );<br>        <span class="hljs-comment">// int indexOf(Object o)</span><br>        <span class="hljs-comment">// 根据元素找下标,找到了返回下标,找不到返回-1</span><br>        <span class="hljs-keyword">int</span> index = list.indexOf(<span class="hljs-number">1</span>);<br>        System.out.println(index );<br><br>        System.out.println(<span class="hljs-string">&quot;--------------&quot;</span> );<br>        System.out.println(list );<br>        <span class="hljs-comment">// E remove(int index)</span><br>        <span class="hljs-comment">// 根据下标移除元素,返回该元素</span><br>        Integer old = list.remove(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;被移除的: &quot;</span>+old +<span class="hljs-string">&quot; , 集合: &quot;</span>+ list );<br><br>        System.out.println(<span class="hljs-string">&quot;--------------&quot;</span> );<br>        <span class="hljs-comment">// E set(int index,E e)</span><br>        <span class="hljs-comment">// 根据指定位置,替换为指定元素,返回被替换的元素</span><br>        System.out.println(<span class="hljs-string">&quot;替换前的集合: &quot;</span> +list );<br>        Integer old2 = list.set(<span class="hljs-number">3</span>, <span class="hljs-number">100</span>);<br>        System.out.println(<span class="hljs-string">&quot;被替换的是: &quot;</span>+old2 );<br>        System.out.println(<span class="hljs-string">&quot;替换后的集合: &quot;</span> +list );<br><br>        System.out.println(<span class="hljs-string">&quot;--------------&quot;</span> );<br>        List&lt;Integer&gt; subList = list.subList(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br>        System.out.println(subList );<br>        System.out.println(list );<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><br><p><code>ArrayList</code> 是 <code>List</code> 接口的典型实现类、主要实现类</p><ul><li><code>ArrayList</code> 底层是数组，数组长度可变  -&gt;  会根据存储的元素个数进行扩容。</li><li><code>ArrayList</code> 是不同步的（线程不安全）</li><li><strong>每个 <code>ArrayList</code> 都有初始容量（默认10），该容量会随着添加元素而自动增长。</strong></li></ul><br><p><code>ArrayList</code> 的 <code>JDK1.8</code> 之前与之后的实现区别？ </p><blockquote><p style="color:red;">JDK1.7：ArrayList像饿汉式，直接创建一个初始容量为10的数组 </P> <p style="color:red;">JDK1.8：ArrayList像懒汉式，一开始创建一个长度为0的数组，当添加第一个元 素时再创建一个始容量为10的数组 </P></blockquote><br><p>-</p><table><thead><tr><th>构造方法</th></tr></thead><tbody><tr><td><code>ArrayList()</code>        构造一个<strong>初始容量为 10</strong> 的空列表。</td></tr><tr><td><code>ArrayList(Collection&lt;? extends E&gt; c)</code>       构造一个包含指定  collection 的元素的列表，这些元素是按照该 collection 的迭代器返回它们的顺序排列的。</td></tr><tr><td><code>ArrayList(int initialCapacity)</code>        构造一个具有指定初始容量的空列表。</td></tr></tbody></table><p><strong>方法 :</strong>  <code>ArrayList</code> 的常用方法，在 <code>Collection</code> 和 <code>List</code> 演示过程中已经演示完毕。</p><br><p><strong>底层原理 :</strong> </p><p><code>ArrayList</code> 是基于数组实现，默认长度是10，即可以存储10 个元素。</p><p>当存储元素个数超过容量，就会触发扩容。</p><p>扩容为原来的1.5倍，如果除不尽，进1。</p><p>-</p><center><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211109194042.png" style="zoom:45%;" /></center><p>-</p><p><code>ArrayList</code> 操作集合时有如下特点:</p><blockquote><p>（1）<code>ArrayList</code> 集合进行查找，<strong>更新元素时效率高</strong></p><p>&nbsp;&nbsp;因为是数组是连续空间，可以通过下标直接定位</p><p>（2）<code>ArrayList</code> 集合进行删除，<strong>插入元素时效率低</strong></p><p>&nbsp;&nbsp;因为是数组是连续空间，插入，删除就会改变其他元素空间位置</p></blockquote><hr><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><br><p><code>LinkedList</code> 是 <code>List</code> 接口的实现类。底层是<strong>链接列表</strong>（链表结构）。</p><p><code>LinkedList</code> 除了实现 <code>List</code> 接口中的方法外，还特别提供了对开头和结尾操作的方法。</p><p><code>LinkedList</code> 是不同步（线程不安全）。</p><br><p>-</p><table><thead><tr><th>构造方法</th></tr></thead><tbody><tr><td><code>LinkedList)()</code>         构造一个空列表。</td></tr><tr><td><code>LinkedList(Collection&lt;? extends  E&gt;  c)</code>           构造一个包含指定  collection 中的元素的列表，这些元素按其 collection 的迭代器返回的顺序排列</td></tr></tbody></table><p>Test:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 无参,空集合</span><br>LinkedList&lt;Integer&gt; ll = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;( );<br>System.out.println(ll );<br><br>ArrayList&lt;Integer&gt; al = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;( );<br>al.add(<span class="hljs-number">3</span>);<br>al.add(<span class="hljs-number">1</span>);<br>al.add(<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// 有参,指定集合中的元素</span><br>LinkedList&lt;Integer&gt; ll2 = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;(al);<br>System.out.println(ll2 );<br></code></pre></div></td></tr></table></figure><br><p><strong>方法 :</strong> </p><p><code>Collection</code> 中所有集合都共有的方法，<code>LinkedList</code> 中也有</p><p><code>List</code> 中关于下标操作元素的方法 <code>LinkedList</code> 中也有</p><p><code>LinkedList</code> 中有自己特有的方法： <strong>对头和尾部操作方法</strong></p><table><thead><tr><th>方法</th><th></th><th></th></tr></thead><tbody><tr><td><code>void</code></td><td><strong>addFirst(E e)</strong></td><td>将指定元素插入此列表的开头。</td></tr><tr><td><code>void</code></td><td><strong>addLast(E e)</strong></td><td>将指定元素添加到此列表的结尾。</td></tr><tr><td><code>E</code></td><td><strong>removeFirst)()</strong></td><td>移除并返回此列表的第一个元素。</td></tr><tr><td><code>E</code></td><td><strong>removeLast()</strong></td><td>移除并返回此列表的最后一个元素。</td></tr><tr><td><code>E</code></td><td><strong>pop()</strong></td><td>从此列表所表示的堆栈处弹出一个元素。</td></tr><tr><td><code>E</code></td><td><strong>pollFirst()</strong></td><td>获取并移除此列表的第一个元素；如果此列表为空，则返回 null。</td></tr><tr><td><code>E</code></td><td><strong>pollLast()</strong></td><td>获取并移除此列表的最后一个元素；如果此列表为空，则返回 null。</td></tr><tr><td><code>E</code></td><td><strong>peekFirst)()</strong></td><td>获取但不移除此列表的第一个元素；如果此列表为空，则返回 null。</td></tr><tr><td><code>E</code></td><td><strong>peekLast()</strong></td><td>获取但不移除此列表的最后一个元素；如果此列表为空，则返回 null。</td></tr><tr><td><code>E</code></td><td><strong>getFirst()</strong></td><td>返回此列表的第一个元素。</td></tr><tr><td><code>E</code></td><td><strong>getLast()</strong></td><td>返回此列表的最后一个元素。</td></tr></tbody></table><p><strong>Test :</strong>  </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    LinkedList&lt;Integer&gt; ll = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;( );<br>    ll.add(<span class="hljs-number">1</span>);<br>    ll.add(<span class="hljs-number">2</span>);<br>    ll.add(<span class="hljs-number">3</span>);<br>    System.out.println(ll );<br>    ll.addFirst(<span class="hljs-number">0</span>);<br>    ll.addLast(<span class="hljs-number">4</span>);<br>    System.out.println(ll );<br><br>    <span class="hljs-comment">// 移除第一个/最后一个,返回被移除的元素</span><br>    ll.removeFirst();<br>    ll.removeLast();<br>    System.out.println(ll );<br><br>    <span class="hljs-comment">// pop弹出头部元素,底层是removeFirst</span><br>    Integer pop = ll.pop( );<br>    System.out.println(pop );<br>    System.out.println(ll );<br><br>    <span class="hljs-comment">// pollFirst移除并返回第一个元素,底层与removeFirst类似</span><br>    Integer integer = ll.pollFirst( );<br>    System.out.println(integer );<br>    System.out.println(ll );<br><br>    <span class="hljs-comment">// peekFirst,获取但不移除第一个元素,与getFirst</span><br>    Integer peekFirst = ll.peekFirst( );<br><br>    <span class="hljs-comment">// getFirst()</span><br>    Integer first = ll.getFirst( );<br>&#125;<br></code></pre></div></td></tr></table></figure><br><p><strong>底层原理 :</strong></p><p> <code>LinkedList</code> ：基于双向链表，内部没有声明数组，而是定义了 <code>Node</code> 类型的first和 <code>last</code>， 用于记录首末元素。同时，定义内部类<code>Node</code>，作为 <code>LinkedList</code> 中保存数据的基本结构。</p><p><code>Node</code> 除了保存数据，还定义了两个变量：</p><blockquote><p>（1）prev变量记录前一个元素的位置 </p><p>（2）next变量记录下一个元素的位置</p></blockquote><p><code>LinkedList</code> 集合也有下标操作。</p><p>但是下标操作很慢，因为即使通过下标操作，<code>LinkedList</code> 并不是直接通过下标定位到某一位置,</p><p>而是从头或者尾部逐一遍历找到该元素。</p><br><center><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211110200207.png" style="zoom:60%;" /></center><br><center><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211110200101.png" style="zoom:50%;" /></center><br><p><code>LinkedList</code> 操作元素有如下特点:</p><blockquote><p>（1）查找元素，更新元素效率低</p><p>（2）<strong>删除和插入效率高</strong></p><p>（3）LinkedList特别提供了<strong>操作头和尾</strong>的方法</p></blockquote><hr><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><br><ul><li><code>Iterator</code> 对象称为迭代器（设计模式的一种），主要用于遍历 <code>Collection</code>集合中的元素。 </li><li><code>Collection</code> 接口继承了 <code>java.lang.Iterable</code> 接口，该接口有一个 <code>iterator()</code> 方法，那么所 有实现了 <code>Collection</code> 接口的集合类都有一个 <code>iterator()</code> 方法，用以返回一个实现了  <code>Iterator</code> 接口的对象。 </li><li><code>Iterator </code> 仅用于遍历集合，<code>Iterator</code> 本身并不提供承装对象的能力。如果需要创建<code> Iterator</code>对象，则必须有一个被迭代的集合。 </li><li>集合对象每次调用<code>iterator()</code>方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</li></ul><br><table><thead><tr><th>方法摘要</th><th></th><th></th></tr></thead><tbody><tr><td><code>boolean</code></td><td><code>hasNext()</code></td><td>如果仍有元素可以迭代，则返回 true。</td></tr><tr><td><code> E</code></td><td><code>next()</code></td><td>返回迭代的下一个元素。</td></tr><tr><td><code> void</code></td><td><code>remove()</code></td><td>从迭代器指向的 collection 中移除迭代器返回的最后一个元素（可选操作）。</td></tr></tbody></table><br><blockquote><p style="color:red">在调用 it.next() 方法之前必须要调用 it.hasNext() 进行检测。</p><p style="color:red">若不调用，且 下一条记录无效，直接调用 it.next() 会抛出 NoSuchElementException 异常。</p></blockquote><br><p><strong>迭代器执行原理 :</strong> </p><center><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211110201451.png" style="zoom:65%;" /></center><hr><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><br><p>是<code>Collection</code>的子接口，是一个不包含重复元素的集合</p><p style="color:red">特别注意，不能直接说 Set 无序或者有序，因为 Set 集合的子实现类既有有序又有无序集合.<p><strong>方法 :</strong></p><p><code>Set</code>集合的API与<code>Collection</code>集合的API完全一致，没有特殊方法，不再演示.</p><p style="color:red">Set集合/Collection集合中是没有get() set()操作，即不能获得指定元素，修改指定元素.<hr><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><br><ul><li>是<code>Set</code>接口的实现类,底层是<code>HashMap</code>，<code>HashMap</code>底层是<code>Hash</code>表(哈希表)实现.</li><li><code>HashSet</code>不允许重复，无序(不保证迭代顺序).</li><li>可以存储<code>null</code>元素.</li><li><code>HashSet</code>是不同步(不保证线程安全).</li></ul><br><p>-</p><table><thead><tr><th>构造方法</th><th></th></tr></thead><tbody><tr><td><code>HashSet()</code></td><td>构造一个新的空 set，其底层 HashMap 实例的默认初始容量是 16，加载因子是 0.75。</td></tr><tr><td><code>HashSet(Collection&lt;? extends  E&gt; c)</code></td><td>构造一个包含指定  collection 中的元素的新 set。</td></tr><tr><td><code>HashSet(int initialCapacity)</code></td><td>构造一个新的空 set，其底层 HashMap 实例具有指定的初始容量和默认的加载因子（0.75）。</td></tr><tr><td><code>HashSet(int initialCapacity,  float loadFactor)</code></td><td>构造一个新的空 set，其底层  HashMap 实例具有指定的初始容量和指定的加载因子。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 空集合</span><br>HashSet&lt;Integer&gt; set1 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;( );<br><br>ArrayList&lt;Integer&gt; arrayList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;( );<br><br>arrayList.add(<span class="hljs-number">33</span>);<br>arrayList.add(<span class="hljs-number">33</span>);<br>arrayList.add(<span class="hljs-number">11</span>);<br>arrayList.add(<span class="hljs-number">11</span>);<br>arrayList.add(<span class="hljs-number">13</span>);<br>arrayList.add(<span class="hljs-number">22</span>);<br>arrayList.add(<span class="hljs-number">21</span>);<br><br><span class="hljs-comment">// 以传入集合中的元素,创建一个集合</span><br><span class="hljs-comment">// 因为Set集合是不重复,所有ArrayList中重复元素会去重</span><br>HashSet&lt;Integer&gt; set2 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;(arrayList);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 无序</span><br><span class="hljs-comment"> * 不重复</span><br><span class="hljs-comment"> */</span><br>System.out.println(set2 );<br></code></pre></div></td></tr></table></figure><p><strong>方法 :</strong></p><p>方法与<code>Set</code>父接口一致。可以添加，移除，判断，转数组，遍历等常规操作.不演示…</p><p>注意：与<code>Set</code>父接口一样，没有下标操作，没有<code>get()</code> <code>set()</code> 操作</p><br><p><strong>底层原理：</strong></p><center><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211110202742.png" style="zoom:75%;" /></center><p>创建<code>HashSet</code>时，其实会创建一个<code>HashMap</code>实例</p><p>创建的<code>HashSet</code>(其实是<code>HashMap</code>)集合默认容量<code>16</code>，加载因子<code>0.75</code>.</p><p style="color:red">扩容原理（重点）：当存储元素到达容量阈值(容量*加载因子)12时，触发扩容，扩容为原来的2倍.-<p><strong>去重原理：</strong></p><ul><li>调用<code>add</code>方法向集合存储元素时，先调用存储元素的<code>hashcode</code>，获得一个地址</li><li>通过该地址在哈希表中搜寻有无同一地址<ul><li>如果没有同一地址,直接存储</li><li>如果有同一地址，再调用<code>equals</code>方法对此前该位置上的元素进行逐一比较<ul><li>如果<code>equals</code>判断不相等，认为存储该元素不重复，直接存储</li><li>如果<code>equals</code>判断相等，认为该元素重复，不存储.</li></ul></li></ul></li></ul><br><blockquote><p><code>HashSet</code>存储元素时，如果存储是基本数据类型的元素，就会自动去重;</p><p>若果存储的是引用数据类型的元素，则需要重写<code>equals()</code>和<code>hashCode()</code>方法才能去重.</p><p><strong><code>hashCode()</code>方法的内容的作用：就是尽可能减少调用<code>equals</code>的次数</strong></p></blockquote><hr><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><br><p><code>TreeSet</code>底层是<code>TreeMap</code>，实际上<code>TreeMap</code>是二叉树结构.</p><p><code>TreeSet</code>会默认按照元素的自然顺序对元素排序.</p><p>或者</p><p>在创建<code>TreeSet</code>指定自定义比较器进行排序.</p><p style="color:red">不同步，不保证线程安全<br><p>-</p><table><thead><tr><th>构造方法</th><th></th></tr></thead><tbody><tr><td><code>TreeSet()</code></td><td>构造一个新的空 set，该 set 根据其元素的自然顺序进行排序。</td></tr><tr><td><code>TreeSet</code>(<code>Collection)</code>&lt;? extends <code>E</code>&gt; c)</td><td>构造一个包含指定  collection 元素的新 TreeSet，它按照其元素的<em>自然顺序</em>进行排序。</td></tr><tr><td><code>TreeSet(Comparator&lt;? super E&gt; comparator) </code></td><td>造一个新的空 TreeSet，它根据指定比较器进行排序。</td></tr></tbody></table><p>-</p><table><thead><tr><th>方法</th><th></th><th></th></tr></thead><tbody><tr><td><code>E</code></td><td><strong>ceiling(E  e)</strong></td><td>返回此 set 中大于等于( &gt;= )给定元素的最小元素；如果不存在这样的元素，则返回 null。</td></tr><tr><td><code>E</code></td><td><strong>floor(E e)</strong></td><td>返回此 set 中小于等于( &lt;= )给定元素的最大元素；如果不存在这样的元素，则返回 null。</td></tr><tr><td><code>E</code></td><td><strong>first()</strong></td><td>返回此 set 中当前第一个（最低）元素。</td></tr><tr><td><code>E</code></td><td><strong>last()</strong></td><td>返回此 set 中当前最后一个（最高）元素。</td></tr><tr><td><code>E</code></td><td><strong>lower(E  e)</strong></td><td>返回此 set 中严格小于( &lt; )给定元素的最大元素；如果不存在这样的元素，则返回 null</td></tr><tr><td><code>E</code></td><td><strong>higher(E e)</strong></td><td>返回此 set 中严格大于( &gt; )给定元素的最小元素；如果不存在这样的元素，则返回 null</td></tr><tr><td><code>E</code></td><td><strong>pollFirst()</strong></td><td>获取并移除第一个（最低）元素；如果此 set 为空，则返回 null。</td></tr><tr><td><code>E</code></td><td><strong>pollLast)()</strong></td><td>获取并移除最后一个（最高）元素；如果此  set 为空，则返回 null</td></tr></tbody></table><br><p><strong>Test:</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    TreeSet&lt;Integer&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;( );<br>    ts.add(<span class="hljs-number">10</span>);<br>    ts.add(<span class="hljs-number">20</span>);<br>    ts.add(<span class="hljs-number">30</span>);<br>    ts.add(<span class="hljs-number">40</span>);<br>    ts.add(<span class="hljs-number">50</span>);<br><br>    System.out.println(ts );<br><br>    <span class="hljs-comment">// 返回大于等于给定元素的最小元素</span><br>    Integer ceiling = ts.ceiling(<span class="hljs-number">29</span>);<br>    System.out.println(ceiling );<br>    <span class="hljs-comment">// 返回小于等于给定元素的最大元素</span><br>    Integer floor = ts.floor(<span class="hljs-number">29</span>);<br>    System.out.println(floor );<br><br>    <span class="hljs-comment">// 返回严格大于给定元素的最小元素</span><br>    Integer higher = ts.higher(<span class="hljs-number">30</span>);<br><br>    <span class="hljs-comment">// 返回严格小于给定元素的最大元素</span><br>    Integer lower = ts.lower(<span class="hljs-number">30</span>);<br>    System.out.println(<span class="hljs-string">&quot;higher &quot;</span>+higher );<br>    System.out.println(<span class="hljs-string">&quot;lower &quot;</span>+ lower);<br><br>    <span class="hljs-comment">// 排序后的第一个</span><br>    Integer first = ts.first( );<br><br>    <span class="hljs-comment">// 排序后的最后一个</span><br>    Integer last = ts.last( );<br>    System.out.println(first);<br>    System.out.println(last);<br><br>    <span class="hljs-comment">// 获得并移除第一个元素</span><br>    Integer pollFirst = ts.pollFirst( );<br><br>    <span class="hljs-comment">// 获得并移除最后一个元素</span><br>    Integer pollLast = ts.pollLast( );<br>    System.out.println(<span class="hljs-string">&quot;pollFirst &quot;</span>+pollFirst);<br>    System.out.println(<span class="hljs-string">&quot;pollLast &quot;</span>+pollLast);<br><br>    System.out.println(ts );<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p><strong>TreeSet排序方式1: 自然排序</strong></p><br><p>自然排序 :</p><blockquote><p>实现了<code>Comparable</code>接口的类，才会进行自然排序。JDK 中提供的类大多都实现该接口，可以进行自然排序，它们是默认升序。</p></blockquote><br><p><strong>实现步骤 :</strong></p><ul><li>实现接口，重写方法即可完成排序且去重。</li><li>重写<code>compareTo()</code>方法  <ul><li>返回0 即认为重复，不存储该元素</li><li>返回负数 ，放在<code>左树杈</code></li><li>返回正数 ，放在<code>右树杈</code></li></ul></li></ul><br><p><strong>实现原理 ：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(Stirng[] args)</span></span>&#123;<br>    TreeSet&lt;Teacher&gt; ts = <span class="hljs-keyword">new</span> Tree&lt;&gt;();<br>    ts.add(<span class="hljs-keyword">new</span> Teacher(<span class="hljs-number">20</span>,<span class="hljs-string">&quot;王五&quot;</span>));<br>    ts.add(<span class="hljs-keyword">new</span> Teacher(<span class="hljs-number">21</span>,<span class="hljs-string">&quot;周七&quot;</span>));<br>    ts.add(<span class="hljs-keyword">new</span> Teacher(<span class="hljs-number">20</span>,<span class="hljs-string">&quot;王五&quot;</span>));<br>    ts.add(<span class="hljs-keyword">new</span> Teacher(<span class="hljs-number">18</span>,<span class="hljs-string">&quot;张三&quot;</span>));<br>    ts.add(<span class="hljs-keyword">new</span> Teacher(<span class="hljs-number">17</span>,<span class="hljs-string">&quot;小二&quot;</span>));<br>    ts.add(<span class="hljs-keyword">new</span> Teacher(<span class="hljs-number">22</span>,<span class="hljs-string">&quot;茅十八&quot;</span>));<br>    ts.add(<span class="hljs-keyword">new</span> Teacher(<span class="hljs-number">19</span>,<span class="hljs-string">&quot;李四&quot;</span>));<br>&#125;<br><br><span class="hljs-comment">//重写的方法</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Teacher o)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.age - o.age;<br>&#125;<br></code></pre></div></td></tr></table></figure><br><blockquote><p>当调用<code>TreeSet</code>的<code>add</code>方法时</p><ol><li>会调用元素重写的<code>comparTo</code>方法与之前存在的元素进行比较</li><li>如果返回0，则去重,不存储</li><li>如果返回正整数，则放在节点的右侧</li><li>如果返回负整数，则放在节点的左侧</li></ol><p>--</p><ol start="5"><li>存储后续元素，会从根节点开始比较,</li><li>如果返回正整数，如果根节点右侧 还有节点，继续比较</li><li>如果返回正整数，继续向右放置，如果有其他节点，继续以此类推…</li></ol><p>--</p><p>最后输出时，按照树杈 “左 中 右 ”输出</p></blockquote><br><p>-</p><center><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211112192722.png" style="zoom:75%;" /></center><p>-</p><p><strong>TreeSet排序方式2: 比较器排序</strong></p><br><p>相对于自然排序，比较器方式更灵活.</p><p>自然排序是，创建<code>TeeSet</code>集合，不指定任何操作，那么默认就是自然排序.</p><br><p><strong>如何实现比较器?</strong></p><ul><li>自定义一个类</li><li>实现比较器<code>Compartor</code>接口</li><li>重写<code>compar()</code>方法</li><li>实现排序去重逻辑<ul><li>方法返回值为0 去重</li><li>方法返回值为正数  放右边</li><li>方法返回值为负数  放左边</li></ul></li><li>创建<code>TreeSet</code>时，在构造方法中传入一个比较器</li></ul><br><p><strong>排序去重原理与自然排序方法一样.</strong></p><center><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211112193321.png" style="zoom:75%;" /></center><br><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySumComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">Student</span>&gt;</span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Student o1, Student o2)</span> </span>&#123;<br><span class="hljs-keyword">int</span> ret = o1.getSum() - o2.getSum();<br><span class="hljs-keyword">return</span> ret == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : ret;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(Stirng[] args)</span></span>&#123;<br>TreeSet&lt;Student&gt; set = <span class="hljs-keyword">new</span> TreeSet&lt;Student&gt;(<span class="hljs-keyword">new</span> MySumComparator());<br>set.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">80</span>, <span class="hljs-number">80</span>, <span class="hljs-number">80</span>));<br>set.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;周期&quot;</span>, <span class="hljs-number">80</span>, <span class="hljs-number">80</span>, <span class="hljs-number">80</span>));<br>set.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>));<br>set.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">70</span>, <span class="hljs-number">70</span>, <span class="hljs-number">70</span>));<br>set.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">90</span>, <span class="hljs-number">90</span>, <span class="hljs-number">90</span>));<br><br>Iterator&lt;Student&gt; iterator = set.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>Student student = iterator.next();<br>System.out.println(student);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><br><p>特点 : </p><ul><li><code>Map</code>是双列集合，一次存储一对键(key)值(value).</li><li><code>Map</code>中不能有重复的键，值可以重复</li><li>每个键只能映射到一个值，键值是一一对应</li><li>键只能映射到值，只能通过键找值</li><li>关于存储元素顺序： 有些会排序如<code>TreeMap</code>，有些不保证顺序如<code>HashMap</code></li></ul><br><p>主要有另个常用实现类：<code>HashMap</code>，<code>TreeMap</code></p><hr><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><br><p><strong>特点：</strong></p><ul><li><p><code>HashMap</code>底层基于hash表</p></li><li><p>HashMap允许存储null值 null键</p></li><li><p>不保证存储元素的迭代顺序.</p></li><li><p>HashMap实现Map接口，也是不允许键重复，值可以重复</p></li><li><p>HashMap是不同步(线程不安全)</p></li><li><p>Hashtable与HashMap大致相同，只不过</p><ul><li><p><strong>Hashtable不允许存储null值null键</strong></p></li><li><p><strong>Hashtable是同步的，保证线程安全</strong></p></li></ul></li></ul><br><p style="color:red">ps： HashSet集合，元素是无序，不重复。其实是因为HashSet底层将元素直接存储到HashMap的键上。-<p><strong>扩容原理：</strong></p><p>HashMap底层是Hash表，默认容量是16，加载因子 0.75</p><p>加载因子： 存储元素在未达到扩容的一个临界值.</p><p>当存储元素超过容量加载因子的时候，就会rehash，重构内部结构，并扩容为原来的2倍。</p><p>–</p><table><thead><tr><th>构造方法</th><th></th></tr></thead><tbody><tr><td><strong>HashMap()</strong></td><td>构造一个具有默认初始容量 (16) 和默认加载因子 (0.75) 的空 HashMap。</td></tr><tr><td><strong>HashMap(int initialCapacity)</strong></td><td>构造一个带指定初始容量和默认加载因子 (0.75) 的空 HashMap。</td></tr><tr><td><strong>HashMap(int initialCapacity,  float loadFactor)</strong></td><td>构造一个带指定初始容量和加载因子的空 HashMap。</td></tr><tr><td><strong>HashMap)(Map&lt;? extends  K,? extends  V&gt; m)</strong></td><td>构造一个映射关系与指定  Map 相同的新 HashMap。</td></tr></tbody></table><br><p><strong>方法</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestHashMap</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>HashMap&lt;Integer,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><span class="hljs-comment">// V put(K , V) 存储键值对,如果存在该键,则存储新值,返回旧值,</span><br><span class="hljs-comment">//              如果之前不存在该键,则返回null</span><br>String v1 = map.put(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;二&quot;</span>);<br>System.out.println(v1);<br><br>String v2 = map.put(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;贰&quot;</span>);<br>System.out.println(v2);<br><br>map.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;一&quot;</span>);<br>map.put(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;四&quot;</span>);<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;三&quot;</span>);<br><br><span class="hljs-comment">// putAll(Map map) , 将指定map中键值对取出存储自己的map中</span><br><span class="hljs-comment">// HashMap&lt;Integer,String&gt; map2 = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">// map2.putAll(map);</span><br><br><span class="hljs-comment">// 以指定Map中的键值对创建出一个带有元素Map集合</span><br>HashMap&lt;Integer,String&gt; map3 = <span class="hljs-keyword">new</span> HashMap&lt;&gt;(map);<br><br><span class="hljs-comment">// clear() 清空,清空所有键值对</span><br>System.out.println(map3);<br><span class="hljs-comment">// map3.clear();</span><br><br><span class="hljs-comment">// boolean containsKey(Object key)  判断是否包含指定键</span><br>System.out.println(map3.containsKey(<span class="hljs-number">4</span>));<br><br><span class="hljs-comment">// boolean containsValue(Object value)  判断是否包含指定值</span><br>System.out.println(map3.containsValue(<span class="hljs-string">&quot;二&quot;</span>));<br><br><span class="hljs-comment">// V get(K k); 通过键获得值 [特别注意: Map操作中没有通过值获得键的操作]</span><br>String value = map3.get(<span class="hljs-number">2</span>);<br>System.out.println(value);<br><br><span class="hljs-comment">//  boolean isEmpty()  判断是否为空,当size=0时为空</span><br>System.out.println(map3.isEmpty());<br><br><span class="hljs-comment">//  int size() 存储键值对的个数</span><br>System.out.println(map3.size());<br><br><span class="hljs-comment">// V remove(K k); 根据键将整个键值对从map中移除,返回旧值</span><br>String oldValue = map3.remove(<span class="hljs-number">2</span>);<br>System.out.println(map3);<br>System.out.println(oldValue);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><br><p><strong>遍历：</strong></p><p>Map 接口提供三种单列集合视图，允许以键集、值集或键-值映射关系集的形式查看某个map的内容.</p><p>换句话解释:</p><blockquote><p>Map接口提供三种方法，可以分别得到所有的键，或者所有的值，或者所有的键值对</p><p>是将所有键，或者所有的值，或者所有的键值对装入单列集合中进行操作。</p></blockquote><br><table><thead><tr><th>方法概要</th><th></th><th></th></tr></thead><tbody><tr><td><code>Set&lt;K&gt;</code></td><td><strong>keySet()</strong></td><td>返回此映射中所包含的键的 Set 视图。</td></tr><tr><td><code>Collection&lt;V&gt;</code></td><td><strong>values()</strong></td><td>返回此映射所包含的值的 Collection视图。</td></tr><tr><td><code>Set&lt;Map.Entry&lt;K,V&gt;&gt;</code></td><td>**entrySet（） **</td><td>返回此映射所包含的映射关系的 Set视图。</td></tr></tbody></table><br><p><strong>Test：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestHashMap2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>HashMap&lt;Integer,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>map.put(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;一&quot;</span>);<br>map.put(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;二&quot;</span>);<br>map.put(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;三&quot;</span>);<br>map.put(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;四&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Set&lt;Map.Entry&lt;K,V&gt;&gt;  entrySet()</span><br><span class="hljs-comment"> * Entry是Map的内部类,代表一个键值对象.</span><br><span class="hljs-comment"> * -------</span><br><span class="hljs-comment"> * 该方法是将Map中的每一个键值对当成Entry的对象,存入Set集合</span><br><span class="hljs-comment"> */</span><br>Set&lt;Entry&lt;Integer,String&gt;&gt; entrySet = map.entrySet();<br><br><span class="hljs-comment">// 使用迭代器遍历</span><br>Iterator&lt;Entry&lt;Integer,String&gt;&gt; iterator = entrySet.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext()) &#123;<br>Entry&lt;Integer, String&gt; entry = iterator.next();<br>Integer key = entry.getKey();<br>String value = entry.getValue();<br>System.out.println(key + <span class="hljs-string">&quot;=&quot;</span> + value);<br>&#125;<br><br><span class="hljs-comment">// foreach</span><br><span class="hljs-keyword">for</span>(Entry&lt;Integer, String&gt; entry : entrySet) &#123;<br>Integer key = entry.getKey();<br>String value = entry.getValue();<br>System.out.println(key + <span class="hljs-string">&quot;=&quot;</span> + value);<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test_values</span><span class="hljs-params">(HashMap&lt;Integer, String&gt; map)</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Collection&lt;V&gt; values(); 返回包含所有值的Collection集合</span><br><span class="hljs-comment"> */</span><br>Collection&lt;String&gt; values = map.values();<br><br><span class="hljs-comment">// 使用迭代器迭代</span><br>Iterator&lt;String&gt; iterator = values.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext()) &#123;<br>System.out.println(iterator.next());<br>&#125;<br><br><span class="hljs-keyword">for</span>(String value : values) &#123;<br>System.out.println(value);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test_keySet</span><span class="hljs-params">(HashMap&lt;Integer, String&gt; map)</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Set&lt;K&gt; keySet(); 返回包含所有key的Set集合</span><br><span class="hljs-comment"> */</span><br>Set&lt;Integer&gt; set = map.keySet();<br><br><span class="hljs-comment">// 使用迭代器进行遍历</span><br>Iterator&lt;Integer&gt; iterator = set.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext()) &#123;<br>Integer key = iterator.next();<br><span class="hljs-comment">// System.out.println(key);</span><br>String value = map.get(key);<br>System.out.println(key +<span class="hljs-string">&quot;=&quot;</span>+value);<br>&#125;<br><br><span class="hljs-comment">// foreach</span><br><span class="hljs-keyword">for</span>(Integer key : set) &#123;<br>System.out.println(key);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><br><p><strong>介绍：</strong></p><blockquote><p><code>TreeMap</code>是实现了 <code>NavigableMap</code> 接口，并没有直接实现Map接口</p><p><code>TreeMap</code>底层是使用红黑树实现(二叉树)</p><p><code>TreeMap</code>的键不能重复，值允许重复</p><p><code>TreeMap</code>可以根据键的自然顺序对键值对排序 </p><p>或者根据创建<code>Map</code>时提供的比较器进行排序</p><p><strong><code>TreeMap</code>是不同步,不保证线程安全</strong></p></blockquote><br><p><strong>排序去重原理：</strong></p><p>   如果是自然排序就是利用元素的<code>comparTo()</code>方法，如果是比较器排序就是利用<code>compare()</code>方法，对当前存入的元素与之前存在元素进行大小比较。</p><blockquote><p>​    如果相等返回0，就会不存储，即去重</p><p>​    如果存入的元素-存在的元素为负数，则认为存入的元素较小，放在树杈左侧</p><p>​    如果存入的元素-存在的元素为正数，则认为存入的元素较大，放在树杈右侧</p></blockquote><br><p><strong>方法：</strong></p><p>常用的方法与HashMap一致</p><br><p><strong>遍历：</strong></p><p>与<code>HashMap</code>一样，有三种视图</p><br><p><strong>去重排序原理：</strong></p><p>其实<code>TreeSet</code>的去重排序就是利用<code>TreeMap</code>进行的.</p><br><hr><h3 id="补充Collections"><a href="#补充Collections" class="headerlink" title="补充Collections"></a>补充Collections</h3><br><p>该类是集合工具类,方法都是静态的</p><table><thead><tr><th>方法概要</th><th></th></tr></thead><tbody><tr><td>public static <T> void sort(List<T> list)</td><td>排序</td></tr><tr><td>public static <T> T max(Collection&lt;?&gt; coll)</td><td>取最大值</td></tr><tr><td>public static void reverse(List&lt;?&gt; list)</td><td>反转</td></tr><tr><td>public static void shuffle(List&lt;?&gt; list)</td><td>随机置换</td></tr></tbody></table><br><p><strong>Test：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCollections</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>list.add(<span class="hljs-number">3</span>);<br>list.add(<span class="hljs-number">2</span>);<br>list.add(<span class="hljs-number">4</span>);<br>list.add(<span class="hljs-number">5</span>);<br>list.add(<span class="hljs-number">1</span>);<br><br>System.out.println(list);<br><span class="hljs-comment">// Collections.sort(list);</span><br><span class="hljs-comment">// System.out.println(Collections.max(list));</span><br><span class="hljs-comment">// System.out.println(Collections.min(list));</span><br><span class="hljs-comment">// Collections.reverse(list);</span><br>Collections.shuffle(list);<br><br>System.out.println(list);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>集合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb三大组件</title>
    <link href="/2021/10/14/JavaWeb%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6/"/>
    <url>/2021/10/14/JavaWeb%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p><strong>JavaWeb三大组件（Servlet、Filter、Listener）</strong></p><hr><p>　　嗯哼，感觉很有必要把JavaWeb的三大组件简单梳理一下</p><blockquote><p>JavaWeb三大组件指的是：</p><p>　　Servlet、Filter、Listener，这三个组件在JavaWeb开发中分别提供不同的功能，然而很多人可能只用过其中一个或者两个（Servlet、Filter，比如我），很难接触到第三个组件，因此对原始JavaWeb开发还不够熟悉，在这种情况下进行框架学习，这种做法是并不可取，框架是大牛们对原始JavaWeb进行封装的结果，没有原始JavaWeb开发基础是很难真正学会框架的。</p><p>下面，通过简单的介绍JavaWeb的三大组件来熟悉原始JavaWeb开发。</p></blockquote><hr><h2 id="1、Servlet"><a href="#1、Servlet" class="headerlink" title="1、Servlet"></a>1、Servlet</h2><p>　　Servlet是用来处理客户端请求的动态资源，也就是当我们发出请求后，请求就会被发送到对应的Servlet上进行处理。</p><p>　　因为之前都是实现Servlet接口，重写了所有方法。但是，通常我们只关心如果接收请求，做出响应。其余方法不经常用，所以实现Servlet接口，显得很笨重。</p><p>　　因此，Servlet架构中提供了一个专门用于处理http请求和响应的<strong>类</strong>：<code>HttpServlet</code></p><p>Servlet的任务有：</p><ul><li><strong>接收请求数据</strong>：客户端请求会被封装成HttpServletRequest对象，里面包含了请求头、请求行请求正文、请求参数等各种信息。</li><li><strong>处理请求</strong>：通常我们会在service方法中使用<code>doPost</code>或者<code>doGet</code>方法进行接收参数，并且调用业务层（service）的方法来处理请求。</li><li><strong>做出响应</strong>：处理完请求后，我们一般会请求转发（<code>forward</code>）或者重定向（<code>sendRedirect</code>）到其他servlet或者某个页面，请求转发是<code>HttpServletRequest</code>中的方法，重定向是<code>HttpServletResponse</code>中的方法，两者是有很大区别的。</li></ul><h3 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h3><hr><p style=“font-family:arial;color:red;”> 1. 当请求到该Servlet类时,该类对象才创建,且只创建这一次<br>　　2. 创建后立即初始化,且只初始化一次<br>　　3. 以后每次通过路径访问该Servlet时,都会调用service方法,执行服务<br>　　4. 服务器宕机或者项目从服务器卸载时既销毁<br><hr><h3 id="Servletd的方法："><a href="#Servletd的方法：" class="headerlink" title="Servletd的方法："></a>Servletd的方法：</h3><hr><p>Servlet类初始化自动调用执行</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig)</span></span><br></code></pre></div></td></tr></table></figure><p>Servlet的初始化方法，只在创建Servlet实例时候调用一次，Servlet是单例的，整个服务器就只创建一个同类型Servlet。主要编写java后台的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest,ServletResponse)</span></span><br></code></pre></div></td></tr></table></figure><p>Servlet的处理请求方法，在Servlet被请求时，会被马上调用，每处理一次请求，就会被调用一次。ServletRequest类为请求类，ServletResponse类为响应类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">destory</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>Servlet销毁之前执行的方法，只执行一次，用于释放Servlet占有的资源，通常Servlet是没什么可要释放的，所以该方法一般都是空的</p><p>Servlet的其他重要方法(用的不多)：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&gt; <span class="hljs-function">ServletConfig <span class="hljs-title">getServletConfig</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><p>获取servlet的配置信息的方法，所谓的配置信息就是WEB-INF目录下的web.xml中的servlet标签里面的信息</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&gt; <span class="hljs-function">String <span class="hljs-title">getServletInfo</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><hr><h3 id="Servlet的配置："><a href="#Servlet的配置：" class="headerlink" title="Servlet的配置："></a>Servlet的配置：</h3><hr><p>配置XML文件，发出请求，根据发出的请求到达处理相应请求的Servlet的类</p><p>例：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.briup.estore.web.servlet.LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/login<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><hr><h2 id="2、Filter"><a href="#2、Filter" class="headerlink" title="2、Filter"></a>2、Filter</h2><p>filter与servlet在很多的方面极其相似，但是也有不同，例如filter和servlet一样都又三个生命周期方法，同时他们在web.xml中的配置文件也是差不多的、 但是servlet主要负责处理请求，而filter主要负责拦截请求，和放行。<br>filter四种拦截方式：</p><ul><li>REQUEST：直接访问目标资源时执行过滤器。包括：在地址栏中直接访问、表单提交、超链接、重定向，只要在地址栏中可以看到目标资源的路径，就是REQUEST；</li><li>FORWARD：转发访问执行过滤器。包括RequestDispatcher#forward()方法、&lt; jsp:forward&gt;标签都是转发访问；</li><li>INCLUDE：包含访问执行过滤器。包括RequestDispatcher#include()方法、&lt; jsp:include&gt;标签都是包含访问；</li><li>ERROR：当目标资源在web.xml中配置为&lt; error-page&gt;中时，并且真的出现了异常，转发到目标资源时，会执行过滤器。</li></ul><hr><p>url-mapping的写法<br>匹配规则有三种：</p><ul><li><strong>精确匹配</strong> —— 如 <code>/foo.htm</code> ，只会匹配foo.htm这个URL</li><li><strong>路径匹配</strong> —— 如 <code>/foo/* </code>，会匹配以foo为前缀的URL</li><li><em><strong>后缀匹配</strong> —— 如</em>  <code>.htm </code>，会匹配所有以.htm为后缀的URL</li><li>&lt; url-pattern&gt;的其他写法，如/foo/ ，/.htm ，/foo 都是不对的。</li></ul><hr><p>执行filter的顺序<br>如果有多个过滤器都匹配该请求，顺序决定于web.xml filter-mapping的顺序，在前面的先执行，后面的后执行</p><p><strong>filter的一般配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.zhiyou.filter.EncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><hr><h2 id="3、Listener-了解"><a href="#3、Listener-了解" class="headerlink" title="3、Listener(了解)"></a>3、Listener(了解)</h2><p>Listener就是监听器，我们在JavaSE开发或者Android开发时，经常会给按钮加监听器，当点击这个按钮就会触发监听事件，调用onClick方法，本质是方法回调。在JavaWeb的Listener也是这么个原理，但是它监听的内容不同，它可以监听Application、Session、Request对象，当这些对象发生变化就会调用对应的监听方法。</p><hr><p><strong>监听器</strong>：相当于之前所学的事件</p><p><strong>源</strong>：监听的是谁</p><p><strong>动作</strong>：触发的条件</p><p><strong>响应</strong>：当条件满足时会执行的函数</p><p><strong>八种监听器：</strong></p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211014211616.png"></p><hr><p><strong>Java中用到监听器的地方：</strong></p><blockquote><p>AWT、SAX，监听器中肯定有事件源、事件、监听器。监听器注册到事件源，当事件源发生某件特定的事儿的时候，就触发注册的监听器，调用监听器的相应的方法。</p></blockquote><hr><p><strong>JavaWeb中的监听器</strong></p><p><strong>事件源：三大域！</strong></p><p style="font-family:arial;color:red;"> （1）ServletContext<p style="font-family:arial;color:red;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;生命周期监听：ServletContextListener，它有两个方法，一个在出生时调用，一个在死亡时调用；<ul><li>void <strong>contextInitialized</strong>(ServletContextEvent sce)：创建Servletcontext时</li><li>void <strong>contextDestroyed</strong>(ServletContextEvent sce)：销毁Servletcontext时</li></ul><p style="font-family:arial;color:red;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;属性监听：ServletContextAttributeListener，它有三个方法，一个在添加属性时调用，一个在替换属性时调用，最后一个是在移除属性时调用。<ul><li>void <strong>attributeAdded</strong>([ServletContextAttributeEvent event)：添加属性时；</li><li>void <strong>attributeReplaced</strong>(ServletContextAttributeEvent event)：替换属性时；</li><li>void <strong>attributeRemoved</strong>(ServletContextAttributeEvent event)：移除属性时；</li></ul><p style="font-family:arial;color:red;"> （2）HttpSession<p style="font-family:arial;color:red;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;生命周期监听：HttpSessionListener，它有两个方法，一个在出生时调用，一个在死亡时调用；<ul><li>void <strong>sessionCreated</strong>(HttpSessionEvent se)：创建session时</li><li>void <strong>sessionDestroyed</strong>(HttpSessionEvent se)：销毁session时</li></ul><p style="font-family:arial;color:red;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;属性监听：HttpSessioniAttributeListener，它有三个方法，一个在添加属性时调用，一个在替换属性时调用，最后一个是在移除属性时调用。<ul><li>void <strong>attributeAdded</strong>(HttpSessionBindingEvent event)：添加属性时；</li><li>void <strong>attributeReplaced</strong>(HttpSessionBindingEvent event)：替换属性时</li><li>void <strong>attributeRemoved</strong>(HttpSessionBindingEvent event)：移除属性时</li></ul> <p style="font-family:arial;color:red;"> （3）ServletRequest <p style="font-family:arial;color:red;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;生命周期监听：ServletRequestListener，它有两个方法，一个在出生时调用，一个在死亡时调用；<ul><li>void <strong>requestInitialized</strong>(ServletRequestEvent sre)：创建request时</li><li>void <strong>requestDestroyed</strong>(ServletRequestEvent sre)：销毁request时</li></ul> <p style="font-family:arial;color:red;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;属性监听：ServletRequestAttributeListener，它有三个方法，一个在添加属性时调用，一个在替换属性时调用，最后一个是在移除属性时调用。<ul><li>void <strong>attributeAdded</strong>(ServletRequestAttributeEvent srae)：添加属性时</li><li>void <strong>attributeReplaced</strong>(ServletRequestAttributeEvent srae)：替换属性时</li><li>void <strong>attributeRemoved</strong>(ServletRequestAttributeEvent srae)：移除属性时</li></ul><hr> <p style="font-family:arial;color:red;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;javaWeb中完成编写监听器：<ul><li>写一个监听器类：要求必须去实现某个监听器接口；</li><li>注册，是在web.xml中配置来完成注册</li></ul> <p style="font-family:arial;color:red;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事件对象：<ul><li>ServletContextEvent：ServletContext getServletContext()</li><li>HttpSessionEvent：HttpSession getSession()</li><li>ServletRequest：<ul><li>ServletContext getServletContext()；</li><li>ServletReques getServletRequest()；</li></ul></li></ul><hr><ul><li>ServletContextAttributeEvent<ul><li>String getName()：获取当前操作的属性名；</li><li> Object getValue()：获取当前操作的属性值；</li><li>ServletContext getServletContext()：获取ServletContext对象。</li></ul></li></ul><hr><ul><li>HttpSessionBindingEvent<ul><li>String getName()：获取当前操作的属性名；</li><li>Object getValue()：获取当前操作的属性值；</li><li> HttpSession getSession()：获取当前操作的session对象。</li></ul></li></ul><hr><ul><li>ServletRequestAttributeEvent<ul><li>String getName()：获取当前操作的属性名；</li><li>Object getValue()：获取当前操作的属性值；</li><li>ServletContext getServletContext()：获取ServletContext对象；</li><li>ServletRequest getServletRequest()：获取当前操作的ServletRequest对象。</li></ul></li></ul><hr><p>详细的学习还是要看看教程！！！</p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
      <category>(Servlet、Filter、Listener)</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>详解c3p0线程池</title>
    <link href="/2021/10/13/JDBC%E7%9A%84c3p0%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/2021/10/13/JDBC%E7%9A%84c3p0%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<p><strong>详解C3P0(数据库连接池)</strong></p><hr><p>　　之前连接数据库操作，都是使用的传统的开发模式，就是通过 <code>JDBC</code> 中的 <code>DriverManager</code> 建立数据库连接，然后将要对数据库进行操作的sql语句封装到 <code>prepareStatement</code> 中，最后在返回结果集后断开数据库连接。</p><center><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210629190814.jpg" style="zoom:25%;" /></center><p>　　今天，见别人用的都是 <code>c3p0 </code>线程池操作数据库，这可不行哦！</p><p>　　速速过来补了一下，结果发现也没什么，咔叽咔叽封装后也就是调用了和传统的方式用法基本一致。</p><p>　　不过还是有些区别的。于是总结了一下。</p><hr><h2 id="一、基本定义"><a href="#一、基本定义" class="headerlink" title="一、基本定义"></a>一、基本定义</h2><p>　　<code>C3P0</code> 是一个开源的JDBC连接池，它实现了数据源与JNDI绑定，支持JDBC3规范和实现了JDBC2的标准扩展说明的 <code>Connection</code> 和 <code>Statement</code> 池的 <code>DataSources</code> 对象。</p><p>　　即将用于连接数据库的连接整合在一起形成一个随取随用的数据库连接池（Connection pool）。</p><hr><h2 id="二、使用C3P0（数据库连接池）的必要性"><a href="#二、使用C3P0（数据库连接池）的必要性" class="headerlink" title="二、使用C3P0（数据库连接池）的必要性"></a>二、使用C3P0（数据库连接池）的必要性</h2><p>　　当我们在进行基于数据库的web程序开发时，我们可以先在主程序（如<code>Servlet</code>、<code>Bean</code>）中通过 <code>JDBC</code> 中的 <code>DriverManager</code> 建立数据库连接，然后将要对数据库进行操作的sql语句封装到 <code>Statement</code> 中，最后在返回结果集后断开数据库连接。</p><p>　　以上是较为传统的开发模式，然而用这种模式开发会埋下严重的安全隐患。</p><hr><h3 id="JDBC传统模式开发存在的主要问题"><a href="#JDBC传统模式开发存在的主要问题" class="headerlink" title="JDBC传统模式开发存在的主要问题"></a>JDBC传统模式开发存在的主要问题</h3><ul><li><h3 id="时间和内存资源消耗巨大"><a href="#时间和内存资源消耗巨大" class="headerlink" title="时间和内存资源消耗巨大"></a>时间和内存资源消耗巨大</h3></li></ul><p>　　普通的<code>JDBC</code>数据库连接使用<code>DriverManager</code>来获取，每次向数据库建立连接的时候都要将<code>Connection</code>加载到内存中，再根据<code>JDBC</code>代码（或配置文件）中的用户名和密码进行验证其正确性。</p><p>　　这一过程一般会花费0.05~1s，一旦需要数据库连接的时候就必须向数据库请求一个，执行完后再断开连接。显然，如果同一个数据库在同一时间有数十人甚至上百人请求连接势必会占用大量的系统资源，严重的会导致服务器崩溃。</p><ul><li><h3 id="有内存泄漏的风险"><a href="#有内存泄漏的风险" class="headerlink" title="有内存泄漏的风险"></a>有内存泄漏的风险</h3></li></ul><p>　　因为每一次数据库连接使用完后都需要断开连接，但如果程序出现异常致使连接未能及时关闭，这样就可能导致内存泄漏，最终只能以重启数据库的方法来解决；</p><p>　　另外使用传统JDBC模式开发不能控制需要创建的连接数，系统一般会将资源大量分出给连接以防止资源不够用，如果连接数超出一定数量也会有极大的可能导致内存泄漏。</p><hr><h2 id="三、数据库连接池的详细说明"><a href="#三、数据库连接池的详细说明" class="headerlink" title="三、数据库连接池的详细说明"></a>三、数据库连接池的详细说明</h2><p>　　为了解决由使用传统开发模式创建连接导致的一系列问题，我们可以采用数据库连接池技术。</p><p>　　数据库连接池的基本原理就是为数据库<strong>建立一个缓冲池</strong>。在缓冲池中先创建指定数量的数据库连接，当有连接请求时就从缓冲池中取出处于“空闲”状态的连接，并将此连接标记为“忙碌”，直到该请求进程结束后，它所使用的连接才会重新回到“空闲”状态，并等待下一次请求调用。</p><p>　　从上面不难看出数据库连接池的主要作用就是<strong>负责分配、管理和释放数据库连接</strong>，它允许程序重复使用同一个现有的数据库连接，大大缩短了运行时间，提高了执行效率。</p><p>　　这里需要强调一点的是，数据库连接池中的连接数是在其初始化时根据 <code>c3p0-config.xml</code> 中的最小连接数来确定的，关于 <code>c3p0-config.xml</code> 我会在后文提供模板以供大家参考。当然，无论连接池的连接数是否有被使用，它都<strong>至少会保持最小连接数</strong>，如果请求连接数超过最小连接数也会根据 <code>c3p0-config.xml</code> 中指定的自增长数增加连接数直到达到最大连接数，这时如果请求连接数量还是大于连接池中的连接数的话，剩下的请求将会被放入等待队列直到有空闲连接出现。</p><p>　　这样一来，数据库连接池相较于传统 <code>JDBC</code> 模式等到请求发出才创建连接的做法有着显而易见的优势。</p><hr><h2 id="四、使用连接池的明显优势"><a href="#四、使用连接池的明显优势" class="headerlink" title="四、使用连接池的明显优势"></a>四、使用连接池的明显优势</h2><h3 id="1-资源的高效利用"><a href="#1-资源的高效利用" class="headerlink" title="1.资源的高效利用"></a>1.资源的高效利用</h3><p>　　由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销，减小了系统资源消耗的同时也提高了系统运行环境的平稳性。</p><hr><h3 id="2-更快的系统反应速度"><a href="#2-更快的系统反应速度" class="headerlink" title="2.更快的系统反应速度"></a>2.更快的系统反应速度</h3><p>　　数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接可以避免数据库在连接初始化和释放过程所需的时间开销，从而减少了系统的响应时间，提高了系统的反应速度。</p><hr><h3 id="3-减少了资源独占的风险"><a href="#3-减少了资源独占的风险" class="headerlink" title="3.减少了资源独占的风险"></a>3.减少了资源独占的风险</h3><p>　　新的资源分配手段对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置实现对某一应用最大可用数据库连接数的限制，避免了应用独占所有数据库资源的风险。</p><hr><h3 id="4-统一的连接管理，避免数据库连接泄露"><a href="#4-统一的连接管理，避免数据库连接泄露" class="headerlink" title="4.统一的连接管理，避免数据库连接泄露"></a>4.统一的连接管理，避免数据库连接泄露</h3><p>　　在实现较为完善的数据库连接池时，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露。</p><hr><h2 id="五、C3P0实操"><a href="#五、C3P0实操" class="headerlink" title="五、C3P0实操"></a>五、C3P0实操</h2><h3 id="1-导入jar包"><a href="#1-导入jar包" class="headerlink" title="1.导入jar包"></a>1.导入jar包</h3><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211013220230.png" style="zoom:67%;" /><hr><h3 id="2-配置xml文件"><a href="#2-配置xml文件" class="headerlink" title="2.配置xml文件"></a>2.配置xml文件</h3><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211013220419.png" style="zoom:67%;" /><hr><h3 id="3-一般c3p0-config-xml模板"><a href="#3-一般c3p0-config-xml模板" class="headerlink" title="3. 一般c3p0-config.xml模板"></a>3. 一般c3p0-config.xml模板</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">c3p0-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">default-config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mysql数据库连接的各项参数--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/java36<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>445566<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置数据库连接池的初始连接数、最小链接数、获取连接数、最大连接数、最大空闲时间--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxIdleTime&quot;</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">default-config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">c3p0-config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="4-c3p0-config-xml参数清单"><a href="#4-c3p0-config-xml参数清单" class="headerlink" title="4.c3p0-config.xml参数清单"></a>4.c3p0-config.xml参数清单</h3><p>　　开发过程中根据需要设置</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">c3p0-config</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">default-config</span>&gt;</span>   <br>    <span class="hljs-comment">&lt;!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireIncrement&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br> <br>    <span class="hljs-comment">&lt;!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireRetryAttempts&quot;</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--两次连接中间隔时间，单位毫秒。Default: 1000 --&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireRetryDelay&quot;</span>&gt;</span>1000<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--连接关闭时默认将所有未提交的操作回滚。Default: false --&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommitOnClose&quot;</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么   </span><br><span class="hljs-comment">    属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试   </span><br><span class="hljs-comment">    使用。Default: null--&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;automaticTestTable&quot;</span>&gt;</span>Test<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效   </span><br><span class="hljs-comment">    保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试   </span><br><span class="hljs-comment">    获取连接失败后该数据源将申明已断开并永久关闭。Default: false--&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;breakAfterAcquireFailure&quot;</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出   </span><br><span class="hljs-comment">    SQLException,如设为0则无限期等待。单位毫秒。Default: 0 --&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkoutTimeout&quot;</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--通过实现ConnectionTester或QueryConnectionTester的类来测试连接。类名需制定全路径。   </span><br><span class="hljs-comment">    Default: com.mchange.v2.c3p0.impl.DefaultConnectionTester--&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connectionTesterClassName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--指定c3p0 libraries的路径，如果（通常都是这样）在本地即可获得那么无需设置，默认null即可   </span><br><span class="hljs-comment">    Default: null--&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;factoryClassLocation&quot;</span>&gt;</span>null<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--强烈不建议使用该方法，将这个设置为true可能会导致一些微妙而奇怪的bug--&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;forceIgnoreUnresolvedTransactions&quot;</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--每60秒检查所有连接池中的空闲连接。Default: 0 --&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;idleConnectionTestPeriod&quot;</span>&gt;</span>60<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 --&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialPoolSize&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 --&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxIdleTime&quot;</span>&gt;</span>60<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--连接池中保留的最大连接数。Default: 15 --&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements   </span><br><span class="hljs-comment">    属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。   </span><br><span class="hljs-comment">    如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0--&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxStatements&quot;</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 --&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxStatementsPerConnection&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能   </span><br><span class="hljs-comment">    通过多线程实现多个操作同时被执行。Default: 3--&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;numHelperThreads&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--当用户调用getConnection()时使root用户成为去获取连接的用户。主要用于连接池连接非c3p0   </span><br><span class="hljs-comment">    的数据源时。Default: null--&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;overrideDefaultUser&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--与overrideDefaultUser参数对应使用的一个参数。Default: null--&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;overrideDefaultPassword&quot;</span>&gt;</span>password<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--密码。Default: null--&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个一显著提高测试速度。注意：   </span><br><span class="hljs-comment">    测试的表必须在初始数据源的时候就存在。Default: null--&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;preferredTestQuery&quot;</span>&gt;</span>select id from test where id=1<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--用户修改系统配置参数执行前最多等待300秒。Default: 300 --&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;propertyCycle&quot;</span>&gt;</span>300<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的   </span><br><span class="hljs-comment">    时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable   </span><br><span class="hljs-comment">    等方法来提升连接测试的性能。Default: false --&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testConnectionOnCheckout&quot;</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false --&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testConnectionOnCheckin&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--用户名。Default: null--&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <br>       <br>    <span class="hljs-comment">&lt;!--早期的c3p0版本对JDBC接口采用动态反射代理。在早期版本用途广泛的情况下这个参数   </span><br><span class="hljs-comment">    允许用户恢复到动态反射代理以解决不稳定的故障。最新的非反射代理更快并且已经开始   </span><br><span class="hljs-comment">    广泛的被使用，所以这个参数未必有用。现在原先的动态反射与新的非反射代理同时受到   </span><br><span class="hljs-comment">    支持，但今后可能的版本可能不支持动态反射代理。Default: false--&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;usesTraditionalReflectiveProxies&quot;</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">default-config</span>&gt;</span>      <br><span class="hljs-tag">&lt;/<span class="hljs-name">c3p0-config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="5-创建C3P0Util类"><a href="#5-创建C3P0Util类" class="headerlink" title="5.创建C3P0Util类"></a>5.创建C3P0Util类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhiyou.util;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C3P0Util</span> </span>&#123;<br>    <span class="hljs-comment">//使用ComboPooledDataSource来生成DataSource的实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br><br>    <span class="hljs-comment">//从连接池中获取连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> dataSource.getConnection();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//释放连接回连接池</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release</span><span class="hljs-params">(Connection conn, Statement stmt, ResultSet rs)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (rs != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            rs = <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (stmt != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                stmt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            stmt = <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            conn = <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><hr><h3 id="6-创建user表和类"><a href="#6-创建user表和类" class="headerlink" title="6.创建user表和类"></a>6.创建user表和类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.c3p0.utils;<br> <br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> Date birthday;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEmail</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEmail</span><span class="hljs-params">(String email)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.email = email;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getBirthday</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBirthday</span><span class="hljs-params">(Date birthday)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.birthday = birthday;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User [id=&quot;</span> + id + <span class="hljs-string">&quot;, username=&quot;</span> + username + <span class="hljs-string">&quot;, password=&quot;</span><br>                + password + <span class="hljs-string">&quot;, email=&quot;</span> + email + <span class="hljs-string">&quot;, birthday=&quot;</span> + birthday<br>                + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br> <br>&#125;<br></code></pre></div></td></tr></table></figure><p>　（注：后面的测试程序也是调用此表，我们就对表中的数据进行了封装，后台数据库也是此类结构，这里不再展示）</p><hr><h3 id="7-测试程序"><a href="#7-测试程序" class="headerlink" title="7.测试程序"></a>7.测试程序</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.c3p0.utils;<br> <br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">import</span> org.junit.Test;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCRUD</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement ps = <span class="hljs-keyword">null</span>;<br>        conn = C3P0Util.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            ps = conn.prepareStatement(<span class="hljs-string">&quot;INSERT INTO users (username,PASSWORD,email,birthday)VALUES(&#x27;SUN99&#x27;,&#x27;123&#x27;,&#x27;123456@qq.com&#x27;,&#x27;2020-01-01&#x27;)&quot;</span>);<br>            ps.executeUpdate();<br>            System.out.println(<span class="hljs-string">&quot;添加操作执行成功！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;添加操作执行失败！&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            C3P0Util.release(conn, ps, <span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelect</span><span class="hljs-params">()</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement ps = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        conn = C3P0Util.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            ps = conn.prepareStatement(<span class="hljs-string">&quot;Select * from users&quot;</span>);<br>            rs = ps.executeQuery();<br>            List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>            <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                User u = <span class="hljs-keyword">new</span> User();<br>                u.setId(rs.getInt(<span class="hljs-number">1</span>));<br>                u.setUsername(rs.getString(<span class="hljs-number">2</span>));<br>                u.setPassword(rs.getString(<span class="hljs-number">3</span>));<br>                u.setEmail(rs.getString(<span class="hljs-number">4</span>));<br>                u.setBirthday(rs.getDate(<span class="hljs-number">5</span>));<br>                list.add(u);<br>            &#125;<br>            <span class="hljs-keyword">for</span> (User user : list) &#123;<br>                System.out.println(user.toString());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            C3P0Util.release(conn, ps, rs);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement ps = <span class="hljs-keyword">null</span>;<br>        conn = C3P0Util.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            ps = conn.prepareStatement(<span class="hljs-string">&quot;delete from users where username=&#x27;SUN99&#x27;&quot;</span>);<br>            ps.executeUpdate();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            C3P0Util.release(conn, ps, <span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement ps = <span class="hljs-keyword">null</span>;<br>        conn = C3P0Util.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            ps = conn.prepareStatement(<span class="hljs-string">&quot;UPDATE users SET username=&#x27;SUN100&#x27;,PASSWORD=&#x27;456&#x27;WHERE id=&#x27;1&#x27;&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            C3P0Util.release(conn, ps, <span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><ol><li><p>相较于<code>JDBC</code>，使用<code>C3P0</code>能够更加高效地建立与数据库的连接，尤其是在高并发随机访问数据库的时候。</p></li><li><p><code>C3P0</code>通过<code>dataSource.getConnection()</code>从线程池中获取“空闲”连接，真正的数据库连接创建与释放则是由<code>C3P0</code>在后台自行完成的，我们只花费了获取和释放连接占用权的时间。</p></li><li><p>使用<code>c3p0-config.xml</code>代替原来<code>JDBC</code>硬编码的形式，提高了代码复用性。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>JDBC</category>
      
      <category>C3P0线程池</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDBC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程</title>
    <link href="/2021/09/24/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2021/09/24/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><strong>java多线程机制</strong></p><hr><h3 id="一、基本概念：程序、进程、线程"><a href="#一、基本概念：程序、进程、线程" class="headerlink" title="一、基本概念：程序、进程、线程"></a>一、基本概念：程序、进程、线程</h3><ul><li><p><strong>程序(program)：</strong>是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。</p></li><li><p><strong>进程(process)：是程序的一次执行过程，或是正在运行的一个程序。</strong>是一个动态的过程；有它自身的产生、存在和消亡的过程。——生命周期</p><ul><li><p>如：运行中的QQ，运行中的MP3播放器</p></li><li><p>程序是静态的，进程是动态的</p></li><li><p><strong>进程作为资源分配的单位</strong>，系统在运行时会为每个进程分配不同的内存区域</p></li></ul></li><li><p><strong>线程(thread)：</strong>进程可进一步细化为线程，<strong>是一个程序内部的一条执行路径</strong>。</p><ul><li>若一个进程同一时间并行执行多个线程，就是支持多线程的</li><li><strong>线程作为调度和执行的单位</strong>，每个线程拥有独立的运行栈和程序计数器(pc)，线程切换的开销小</li><li>一个进程中的多个线程共享相同的内存单元/内存地址空间→它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来<strong>安全的隐患</strong>。</li></ul></li></ul><hr><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210924171150.png" style="zoom: 67%;" /><hr><blockquote><p>一个Java应用程序Java.exe，其实<strong>至少由三个线程</strong>：</p><p>main（）主线程，gc垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</p></blockquote><p><strong>并行与并发</strong>：</p><blockquote><p><strong>并行：</strong>多个CPU同时执行多个任务。比如：多个人同时做不同的事情。</p><p><strong>并发：</strong>一个CPU（采用时间片）同时执行多个任务。比如：秒杀、多个人做同一件事。</p></blockquote><p><strong>使用多线程的优点：</strong></p><ol><li>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。</li><li>提高计算机系统CPU的利用率。</li><li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和<br>修改。</li></ol><p><strong>什么时候需要多线程：</strong></p><ol><li>程序需要同时执行两个或多个任务。</li><li>程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等。</li><li>需要一些后台运行的程序时。</li></ol><hr><h3 id="二、线程的创建和使用（重点）"><a href="#二、线程的创建和使用（重点）" class="headerlink" title="二、线程的创建和使用（重点）"></a>二、线程的创建和使用（重点）</h3><ul><li>Java语言的<code>JVM</code>允许程序运行多个线程，它通过<code>java.lang.Thread</code>类来体现。</li><li><strong>Thread类的特性</strong><ul><li>每个线程都是通过某个特定Thread对象的<code>run()</code>方法来完成操作的，经常把<code>run()</code>方法的主体称为线程体</li><li>通过该Thread对象的<code>start()</code>方法来启动这个线程，而非直接调用<code>run()</code></li></ul></li></ul><h4 id="多线程的创建："><a href="#多线程的创建：" class="headerlink" title="多线程的创建："></a>多线程的创建：</h4><p> JDK1.5之前创建新执行线程有两种方法：</p><ul><li><p> <strong>继承Thread类的方式</strong></p></li><li><p> <strong>实现Runnable接口的方式</strong></p></li></ul><hr><h4 id="方式一：继承于Thread类"><a href="#方式一：继承于Thread类" class="headerlink" title="方式一：继承于Thread类"></a>方式一：继承于Thread类</h4><p><strong>步骤:</strong></p><ol><li>定义子类继承Thread类。</li><li>子类中重写Thread类中的run方法。</li><li>创建Thread子类对象，即创建了线程对象。 </li><li>调用线程对象start方法：启动线程，调用run方法。</li></ol><p><strong>构造器 :</strong></p><ol><li><code>Thread()</code>：创建新的Thread对象 </li><li><code>Thread(String threadname)</code>：创建线程并指定线程实例名 </li><li><code>Thread(Runnable target)</code>：指定创建线程的目标对象，它实现了Runnable接 口中的run方法</li><li><code>Thread(Runnable target, String name)</code>：创建新的Thread对象</li></ol><p><strong>Thread中的常用方法:</strong></p><blockquote><ol><li>start()：启动当前线程;调用当前线程的run()</li><li>run()：通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</li><li>currentThread()：静态方法，返回执行当前代码的线程</li><li>getName()：获取当前线程的名字</li><li>setName()：设置当前线程的名引</li><li>yield()：释放当前cpu的执行权</li><li>join()：在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。</li><li>sleep(Long millitime)：让当前线程 “睡眠” 指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。</li><li>isAlive()：判断当前线程是否存活</li><li>stop()：强制线程生命期结束，不推荐使用</li></ol></blockquote><p style="font-family:arial; color:red;font-size:20px">注意点：<ol><li>如果自己手动调用<code>run()</code>方法，那么就只是普通方法，没有启动多线程模式。 </li><li><code>run()</code>方法由JVM调用，什么时候调用，执行的过程控制都有操作系统的CPU 调度决定。</li><li>想要启动多线程，必须调用<code>start()</code>方法。</li><li>一个线程对象只能调用一次<code>start()</code>方法启动，如果重复调用了，则将抛出以上的异常<code>“illegalThreadStateException”</code>。</li></ol><p>例子:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *多线程的创建，方式一: 继承于Thread类</span><br><span class="hljs-comment"> * 1．创建一个继承于Thread类的子类</span><br><span class="hljs-comment"> * 2．重写Thread类的run()</span><br><span class="hljs-comment"> * 3．创建Thread类的子类的对象</span><br><span class="hljs-comment"> * 4．通过此对象调用start()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//1. 创建一个继承于Thread类的子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-comment">//2. 重写Thread类的run()方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + i);<br>                <span class="hljs-comment">//Thread.currentThread().getName():打印当前出线程的名字</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//3. 创建Thread类的子类的对象</span><br>        MyThread t1 = <span class="hljs-keyword">new</span> MyThread();  <span class="hljs-comment">//调用的是当前子类的空参构造器</span><br><br>        <span class="hljs-comment">//4. 调用start()方法: (1)启动当前线程 (2)调用当前线程的run()</span><br>        t1.start();<br>        <span class="hljs-comment">//问题一: 我们不能通过直接调用run()的方式启动线程</span><br>        <span class="hljs-comment">//mythread.run(): 不能使用对象直接调用,如果用对象直接调用,那就是在主线程中执行,就不再是多线程</span><br><br>        <span class="hljs-comment">//问题二: 再启动一个线程,不可以还让已经start()的线程去执行,执行会报异常IllegalThreadStateException</span><br>        <span class="hljs-comment">//如果需要再启动一个线程,则需要重新创建一个线程的对象,重新去调用start()方法</span><br>        MyThread t2 = <span class="hljs-keyword">new</span> MyThread();<br>        t2.start();<br><br>        <span class="hljs-comment">//如下操作仍然是在main线程中执行的</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + i + <span class="hljs-string">&quot;******main()******&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">/*执行过程:</span><br><span class="hljs-comment">            创建Thread类的子类的对象,通过对象调用start()方法,</span><br><span class="hljs-comment">            当在调用start()方法时,start()方法自动调用run()方法</span><br><span class="hljs-comment"> */</span><br></code></pre></div></td></tr></table></figure><hr><h4 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级:"></a>线程的优先级:</h4><p>线程的优先级等级：</p><ul><li><p><code>MAX_PRIORITY：10  </code></p></li><li><p><code>MIN_PRIORITY：1  </code></p></li><li><p><code>NORM_PRIORITY：5</code>     —&gt;默认优先级</p></li></ul><p>如何获取和设置当前线程的优先级：</p><ul><li><code>getPriority()</code>：获取线程的优先级</li><li><code>setpriority(int p)</code>：设置线程的优先级</li></ul><hr><p style= "font-family:arial; color:red; font-size:20px">说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。<hr><p>练习:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 练习:创建两个分线程,一个线程遍历100以内的偶数,另一个线程遍历100以内的奇数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><span class="hljs-comment">//        MyThred1 t1= new MyThred1();</span><br><span class="hljs-comment">//        MyThred2 t2 =new MyThred2();</span><br><span class="hljs-comment">//        t1.start();</span><br><span class="hljs-comment">//        t2.start();</span><br><br>        <span class="hljs-comment">//如果创建的对象只用一次,后边就不再使用了,可以使用匿名的方式</span><br>        <span class="hljs-comment">//面向对象的语法:  匿名类</span><br>        <span class="hljs-comment">//new Thread().start()调用的是Thread()自己里面的run()方法</span><br>        <span class="hljs-keyword">new</span> Thread() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + i);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;.start();<br><br>        <span class="hljs-keyword">new</span> Thread() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + i);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;.start();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThred1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThred2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="方式二：实现Runnable接口"><a href="#方式二：实现Runnable接口" class="headerlink" title="方式二：实现Runnable接口"></a>方式二：实现Runnable接口</h4><p><strong>步骤:</strong></p><ol><li> 定义子类，实现Runnable接口。 </li><li>子类中重写Runnable接口中的run方法。 </li><li>通过Thread类含参构造器创建线程对象。 </li><li>将Runnable接口的子类对象作为实际参数传递给Thread类的构造器中。 </li><li>调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。</li></ol><p>例子:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *创建多线程的方式二:实现Runnable接口</span><br><span class="hljs-comment"> * 1.创建一个实现了Runnable接口的类</span><br><span class="hljs-comment"> * 2.实现类去实现Runnable中的抽象方法: run( )</span><br><span class="hljs-comment"> * 3.创建实现类的对象</span><br><span class="hljs-comment"> * 4．将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span><br><span class="hljs-comment"> * 5．通过Thread类的对象调用start()</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//1. 创建一个实现了 Runnable 接口的类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-comment">//2. 实现类去实现 Runnable 中的抽象方法: run()</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;  &quot;</span>+i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//3. 创建实现类的对象</span><br>        MThread mThread = <span class="hljs-keyword">new</span> MThread();<br>        <span class="hljs-comment">//4．将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(mThread);<br>        <span class="hljs-comment">//5．通过Thread类的对象调用start()：(1) 启动线程. (2) 调用当前线程的run()方法--&gt;调用了Runnable类型的targetd的run()</span><br><br>        <span class="hljs-comment">//设置线程的名字,需要在调用start()方法之前</span><br>        t1.setName(<span class="hljs-string">&quot;线程1&quot;</span>);<br>        t1.start();<br><br>        <span class="hljs-comment">//再启动一个线程</span><br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(mThread);<br><br>        t2.setName(<span class="hljs-string">&quot;线程2&quot;</span>);<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="继承方式和实现方式的联系与区别"><a href="#继承方式和实现方式的联系与区别" class="headerlink" title="继承方式和实现方式的联系与区别:"></a>继承方式和实现方式的联系与区别:</h4><p><strong>联系:</strong></p><blockquote><p>public class Thread implements Runnable</p><p>相同点：两种方式都需要重写run()，将线程要执行的逻辑声明在run()中</p></blockquote><p><strong>区别:</strong></p><blockquote><p>继承Thread：线程代码存放Thread子类run方法中。 </p><p>实现Runnable：线程代码存在接口的子类的run方法。 </p></blockquote><p><strong>实现方式的好处:</strong></p><blockquote><p>避免了单继承的局限性</p><p>多个线程可以共享同一个接口实现类的对象，非常适合多个相同线 程来处理同一份资源。</p></blockquote><p><strong>比较创建线程的两种方式:</strong></p><blockquote><p>开发中，优先选择：实现Runnable接口的方式原因</p><ol><li><p>实现的方式没有类的单继承性的局限性</p></li><li><p>实现的方式更适合来处理多个线程有共享数据的情况。</p></li></ol></blockquote><hr><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210924172904.png" style="zoom: 67%;" /><h4 id="补充-线程的分类"><a href="#补充-线程的分类" class="headerlink" title="补充:线程的分类"></a>补充:线程的分类</h4><p>Java中的线程分为两类：一种是<code>守护线程</code>，一种是<code>用户线程</code>。 </p><blockquote><p>它们在几乎每个方面都是相同的，唯一的区别是判断JVM何时离开。 </p><p>守护线程是用来服务用户线程的，通过在start()方法前调用 **thread.setDaemon(true)**可以把一个用户线程变成一个守护线程。 </p><p>Java垃圾回收就是一个典型的守护线程。 </p><p>若JVM中都是守护线程，当前JVM将退出。</p><p>形象理解：兔死狗烹，鸟尽弓藏</p></blockquote><p>应用场景：迅雷下载东西,关闭一个下载选项(守护线程),其他的正常执行.当主程序关闭时,所有下载选项全部关闭.(主线程退出,守护线程全部退出)</p><hr><h3 id="三、线程的生命周期"><a href="#三、线程的生命周期" class="headerlink" title="三、线程的生命周期"></a>三、线程的生命周期</h3><p><strong>JDK中用Thread.State类定义了线程的几种状态</strong> </p><p>要想实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类 及其子类的对象来表示线程，在它的一个完整的生命周期中通常要经历如下的<strong>五种状态</strong>： </p><ul><li><strong>新建：</strong> 当一个<code>Thread</code>类或其子类的对象被声明并创建时，新生的线程对象处于新建 状态 </li><li><strong>就绪：</strong>处于新建状态的线程被<code>start()</code>后，将进入线程队列等待CPU时间片，此时它已 具备了运行的条件，只是没分配到CPU资源 </li><li><strong>运行：</strong>当就绪的线程被调度并获得CPU资源时,便进入运行状态， <code>run()</code>方法定义了线 程的操作和功能 </li><li><strong>阻塞：</strong>在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中 止自己的执行，进入阻塞状态 </li><li><strong>死亡：</strong>线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</li></ul><hr><p><strong>线程的生命周期：</strong></p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210924174153.png" style="zoom: 67%;" /><hr><h3 id="四、线程的同步（重点）"><a href="#四、线程的同步（重点）" class="headerlink" title="四、线程的同步（重点）"></a>四、线程的同步（重点）</h3><h4 id="多线程安全问题分析"><a href="#多线程安全问题分析" class="headerlink" title="多线程安全问题分析:"></a>多线程安全问题分析:</h4><p><strong>问题的提出:</strong></p><blockquote><p>多个线程执行的不确定性引起执行结果的不稳定</p><p>多个线程对账本的共享，会造成操作的不完整性，会破坏数据。</p></blockquote><hr><p><strong>例题：</strong> 模拟火车站售票程序，开启三个窗口售票。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tick = <span class="hljs-number">100</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (tick &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(Thread.currentThread<br>                        ().getName() + <span class="hljs-string">&quot;售出车票，tick号为：&quot;</span> +<br>                        tick--);<br>            &#125; <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TicketDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Ticket t = <span class="hljs-keyword">new</span> Ticket();<br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(t);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(t);<br>        Thread t3 = <span class="hljs-keyword">new</span> Thread(t);<br>        t1.setName(<span class="hljs-string">&quot;t1窗口&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;t2窗口&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;t3窗口&quot;</span>);<br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>问题:</strong></p><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">1)</span><span class="hljs-string">.</span> <span class="hljs-comment">问题：卖票过程中，出现了重票、错票</span> --&gt; <span class="hljs-comment">出现了线程的安全问题</span><br><span class="hljs-comment">2)</span><span class="hljs-string">.</span> <span class="hljs-comment">问题出现的原因：当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车募</span><br><span class="hljs-comment">3)</span><span class="hljs-string">.</span> <span class="hljs-comment">如何解决：当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时</span><span class="hljs-string">.</span><br>             <span class="hljs-comment">线程才可以开始操作ticket。这种情况即使线程α出现了阻塞，也不能被改变。</span><br><span class="hljs-comment">4)</span><span class="hljs-string">.</span> <span class="hljs-comment">解决方案：在Java中，我们通过同步机制，来解决线程的安全问题。</span><br></code></pre></div></td></tr></table></figure><hr><p><strong>线程同步的理想状态：</strong></p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210924175048.png" style="zoom: 67%;" /><p><strong>线程同步的极端状态：</strong></p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210924175042.png" style="zoom: 67%;" /><hr><p><strong>多线程出现的安全问题：</strong></p><p><strong>问题的原因：</strong> </p><blockquote><p>当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，</p><p>还没有 执行完，另一个线程参与进来执行。导致共享数据的错误。 </p></blockquote><p><strong>解决办法：</strong> </p><blockquote><p>对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以 参与执行。</p></blockquote><hr><p><strong>同步原理:</strong></p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210924202231.png" style="zoom: 67%;" /><hr><h4 id="方法一：同步代码块"><a href="#方法一：同步代码块" class="headerlink" title="方法一：同步代码块"></a>方法一：同步代码块</h4><p><strong>基本格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//同步代码块</span><br> <span class="hljs-keyword">synchronized</span>(同步监视器（也是一个对象）)&#123;<br>    <span class="hljs-comment">//需要被同步的代码</span><br>    (完整的操作共享数据的代码)<br>&#125;<br><br><br><span class="hljs-comment">/* 两个难点: (1)共享数据 (2) 同步监视器</span><br><span class="hljs-comment"> * 说明: 1.操作共享数据的代码，即为需要被同步的代码</span><br><span class="hljs-comment"> *          ---&gt;包含的代码必须是要同步的代码,不能多(代码越多效率越低.包含代码多了也可能出错),也不能少</span><br><span class="hljs-comment"> *      2.共享数据: 多个线程共同操作的变量。比如: ticket就是共享数据。</span><br><span class="hljs-comment"> *               如果多个线程没有共享数据,就不会出现线程安全问题</span><br><span class="hljs-comment"> *      3.同步监视器，俗称: 锁。任何一个类的对象，都可以充当锁。</span><br><span class="hljs-comment"> *        要求:多个线程必须要共用同一把锁。(非常重要)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *        补充:在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。</span><br><span class="hljs-comment"> */</span><br></code></pre></div></td></tr></table></figure><hr><h4 id="方法二：同步方法"><a href="#方法二：同步方法" class="headerlink" title="方法二：同步方法"></a>方法二：同步方法</h4><p><strong>基本格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//synchronized还可以放在方法声明中，表示整个方法为同步方法。</span><br><span class="hljs-comment">//例如：</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span> <span class="hljs-params">(String name)</span></span>&#123; <br>…<br>&#125;<br><br><span class="hljs-comment">/* 关于同步方法的总结:</span><br><span class="hljs-comment"> * 1．同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</span><br><span class="hljs-comment"> * 2. 非静态的同步方法，同步监视器是: this</span><br><span class="hljs-comment"> *    静态的同步方法，同步监视器是:当前类本身</span><br><span class="hljs-comment"> */</span><br></code></pre></div></td></tr></table></figure><hr><h4 id="练习-解决火车票的重票-和错票问题"><a href="#练习-解决火车票的重票-和错票问题" class="headerlink" title="练习(解决火车票的重票,和错票问题):"></a><strong>练习(解决火车票的重票,和错票问题):</strong></h4><h5 id="1-继承Thread类-使用两种同步方法解决线程安全问题"><a href="#1-继承Thread类-使用两种同步方法解决线程安全问题" class="headerlink" title="(1) 继承Thread类(使用两种同步方法解决线程安全问题)"></a><strong>(1) 继承Thread类(使用两种同步方法解决线程安全问题)</strong></h5><p><strong>同步代码块：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 例子：创建三个窗口卖票，总票数为100张. 继承于Thread类的方式</span><br><span class="hljs-comment"> * 存在线程的安全问题，等解决</span><br><span class="hljs-comment"> * 说明：在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//方式一:同步代码块 (继承Thread类)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Window</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">static</span> Object obj = <span class="hljs-keyword">new</span> Object(); <span class="hljs-comment">//仍然出问题原因: 锁不唯一,每个线程都有一个obj,同步监视器就不是共享的了</span><br><br>    <span class="hljs-comment">//解决办法 : 把锁变成共享的,即把Object修饰为static,此时同步监视器也就是共享的了</span><br>    <span class="hljs-meta">@Override</span>                   <span class="hljs-comment">//注意: 继承Thread和实现Runnable接口不一样</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;         <span class="hljs-comment">//同步了以后线程安全问题还没解决. 原因 :多个线程没有共同使用一把锁</span><br>        <span class="hljs-comment">//继承Thread类,建了三个线程和对象,每个线程调用的都是一把新锁</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-comment">//synchronized (this)(错误方式):此时使用this是不对的,因为类中创建了三个对象,不唯一</span><br>            <span class="hljs-keyword">synchronized</span> (obj) &#123; <span class="hljs-comment">//方法二: Window2.class,只会加载一次,类也是个对象</span><br>                <span class="hljs-keyword">if</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; :卖票, 票号为: &quot;</span> + ticket);<br>                    ticket--;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WindowTest2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Window t1 = <span class="hljs-keyword">new</span> Window();<br>        Window t2 = <span class="hljs-keyword">new</span> Window();<br>        Window t3 = <span class="hljs-keyword">new</span> Window();<br><br>        t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>细节问题:</strong></p><blockquote><p>同步代码块的 “锁” 必须要唯一</p></blockquote><hr><p><strong>同步方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用同步方法解决实现Thread类的线程安全问题</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 关于同步方法的总结:</span><br><span class="hljs-comment"> * 1．同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</span><br><span class="hljs-comment"> * 2. 非静态的同步方法，同步监视器是: this</span><br><span class="hljs-comment"> *    静态的同步方法，同步监视器是: 当前类本身</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//方式二:同步方法(继承Thread类)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Window4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">100</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            show();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//静态同步方法的锁就是当前类的本身</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//同步监视器: Window4.class,就是当前的这个类</span><br><span class="hljs-comment">//    public synchronized void show() &#123; //同步监视器不唯一: t1，t2，t3，此种方法是错误的</span><br>        <span class="hljs-keyword">if</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; :卖票, 票号为: &quot;</span> + ticket);<br>            ticket--;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WindowTest4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Window4 t1 = <span class="hljs-keyword">new</span> Window4();<br>        Window4 t2 = <span class="hljs-keyword">new</span> Window4();<br>        Window4 t3 = <span class="hljs-keyword">new</span> Window4();<br><br>        t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>细节问题:</strong></p><blockquote><p>还是 “锁” 的问题,要注意<code>同步代码块</code> 和 <code>同步方法 </code>, “锁” 的区别, </p><p>区别就是</p><ol><li><p>同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。(同步方法的锁是隐式的)</p></li><li><p>非静态的同步方法，同步监视器是:  this</p></li><li><p>静态的同步方法，同步监视器是:  当前类本身</p></li></ol></blockquote><hr><h5 id="2-实现Runnable接口-使用两种同步方法解决线程安全问题"><a href="#2-实现Runnable接口-使用两种同步方法解决线程安全问题" class="headerlink" title="(2) 实现Runnable接口(使用两种同步方法解决线程安全问题)"></a><strong>(2) 实现Runnable接口(使用两种同步方法解决线程安全问题)</strong></h5><p><strong>同步代码块:</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 例子:创建三个窗口卖票，总票数为100张. 使用实现RunnabLe接口的方式</span><br><span class="hljs-comment"> * 仍然存在线程的安全问题，待解决</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 方式一:同步代码块</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * synchronized(同步监视器)&#123;</span><br><span class="hljs-comment"> *      //需要被同步的代码</span><br><span class="hljs-comment"> *      (完整的操作共享数据的代码)</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> * 两个难点: (1)共享数据 (2) 同步监视器</span><br><span class="hljs-comment"> * 说明:1.操作共享数据的代码，即为需要被同步的代码</span><br><span class="hljs-comment"> *          ---&gt;包含的代码必须是要同步的代码,不能多(代码越多效率越低.包含代码多了也可能出错),也不能少</span><br><span class="hljs-comment"> *     2.共享数据:多个线程共同操作的变量。比如: ticket就是共享数据。</span><br><span class="hljs-comment"> *               如果多个线程没有共享数据,就不会出现线程安全问题</span><br><span class="hljs-comment"> *     3.同步监视器，俗称:锁。任何一个类的对象，都可以充当锁。</span><br><span class="hljs-comment"> *       要求:多个线程必须要共用同一把锁。(非常重要)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *       补充:在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//方式一:同步代码块 (实现Runnable接口)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Window1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">100</span>;<span class="hljs-comment">//不需要static,就只有100张票,原因: main方法中只造了一个对象</span><br><span class="hljs-comment">//    Object obj = new Object();</span><br><br>    Dog obj = <span class="hljs-keyword">new</span> Dog();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//Object obj = new Object();//在这里多线程使用的就不是同一把锁了,一个线程一个run()方法</span><br>        <span class="hljs-comment">//如果把 synchronized (this),放在这就会出现100张票只被一个线程调用的情况 ,所以同步代码块要注意范围</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123; <span class="hljs-comment">//this 表示当前类的对象,即Window1的对象w,写this方便,不用再去创建别的对象</span><br>                <span class="hljs-comment">//方式二 : synchronized (obj)</span><br>                <span class="hljs-keyword">if</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; :卖票, 票号为: &quot;</span> + ticket);<br>                    ticket--;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WindowTest1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Window1 w = <span class="hljs-keyword">new</span> Window1();<span class="hljs-comment">//只造了一个对象</span><br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(w);<span class="hljs-comment">//一个对象放到了三个构造器当中</span><br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(w);<br>        Thread t3 = <span class="hljs-keyword">new</span> Thread(w);<br><br>        t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span></span>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>细节问题：</strong></p><blockquote><p>同步监视器,即 “锁” 也是一个对象,注意对象的位置</p></blockquote><hr><p><strong>同步方法:</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用同步方法解决实现RunnabLe接口的线程安全问题</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//方式二：同步方法 (实现Runnable接口)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Window3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">100</span>;<span class="hljs-comment">//不需要static,就只有100张票,原因:main方法中只造了一个对象</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            show();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//同步显示器(锁): this, 就是默认的了,没有显示的声明</span><br><span class="hljs-comment">//        synchronized (this) &#123;</span><br>        <span class="hljs-keyword">if</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; :卖票, 票号为: &quot;</span> + ticket);<br>            ticket--;<br>        &#125;<br><span class="hljs-comment">//        &#125;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WindowTest3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Window1 w = <span class="hljs-keyword">new</span> Window1();  <span class="hljs-comment">//只造了一个对象</span><br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(w);  <span class="hljs-comment">//一个对象放到了三个构造器当中</span><br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(w);<br>        Thread t3 = <span class="hljs-keyword">new</span> Thread(w);<br><br>        t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>实际的开发过程中建议使用Runnable接口</p></blockquote><h3 id="五、线程的通信"><a href="#五、线程的通信" class="headerlink" title="五、线程的通信"></a>五、线程的通信</h3><hr><h3 id="六、JDK5-0新增线程创建方式"><a href="#六、JDK5-0新增线程创建方式" class="headerlink" title="六、JDK5.0新增线程创建方式"></a>六、JDK5.0新增线程创建方式</h3>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>java多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL基础篇</title>
    <link href="/2021/09/05/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87%E6%95%B4%E7%90%86/"/>
    <url>/2021/09/05/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="数据库Database-DB"><a href="#数据库Database-DB" class="headerlink" title="数据库Database-DB"></a>数据库Database-DB</h1><p>　　数据库管理系统(DatabaseManagementSystem)DBMS,是指操作和管理数据的软件.</p><p>　　常见的数据库分为两大类:</p><p>​    　<strong>关系型数据库</strong>  : Oracle SQLServer MySQL DB2 MariaDB </p><p>​    　非关系型数据库** : Redis HBase MongoDB</p><hr><h1 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h1><p>SQL(Structure Query Language)结构化查询语言.</p><p>SQL被美国国家标准局(ANSI),确定为数据库语言标准.后来被国际标准组织(ISO)采纳认可.</p><p>使用SQL99标准.</p><p>每个不同厂商出产的数据库除了标准语句外,还有各自的特点: 方言.</p><p><code>SQL语言</code>分为四大类:</p><blockquote><p><strong>DDL</strong>(Data Defined Language) 数据定义语言.主要是对库,表等操作语句</p><p><strong>DML</strong>(Data Manipulation Language) 数据操作语言.主要是对表中数据的操作(增,删,改)</p><p><strong>DQL</strong>(Data Query Language) 数据查询语言.主要是对表中数据的查询.</p><p><strong>DCL</strong>(Data Control Language) 数据控制语言.主要是对数据库的权限安全操作</p></blockquote><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>下载</p><p>安装</p><p>配置环境变量</p><p><strong>启动:</strong> </p><p>命令: net start mysql  关闭: net stop mysql</p><p> 服务项启动: </p><p><strong>登录mysql</strong>:</p><p>​    mysql -u root -p密码</p><p><strong>退出</strong>: 输入 exit</p><h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><h2 id="操作库"><a href="#操作库" class="headerlink" title="操作库"></a>操作库</h2><p><strong>创建库</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> 库名;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> 库名 <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf<span class="hljs-number">-8</span>; <span class="hljs-comment">-- 默认就是utf-8,所以无需再设置</span><br></code></pre></div></td></tr></table></figure><p><strong>查询库</strong></p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">show databases<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p><strong>删除库</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> 库名;<br></code></pre></div></td></tr></table></figure><p><strong>修改库</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> 库名 <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf<span class="hljs-number">-8</span>;<br>（MySQL修改数据库名称比较麻烦，不支持直接修改，需要通过其它方式间接达到修改数据库名称的目的）<br></code></pre></div></td></tr></table></figure><p><strong>查询当前使用的库</strong></p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">database</span>(<span class="hljs-params"></span>)</span>;<br></code></pre></div></td></tr></table></figure><p><strong>切换数据库</strong>    </p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">use 库名<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><h2 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h2><p>在数据库中创建表</p><p><strong>查看当前库下所有表</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br></code></pre></div></td></tr></table></figure><p><strong>创建表</strong></p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss">create <span class="hljs-selector-tag">table</span> 表名(<br>   列名  数据类型(长度)  <span class="hljs-selector-attr">[约束]</span>,<br>   列名2 数据类型(长度)  <span class="hljs-selector-attr">[约束]</span>,<br>   列名3 数据类型(长度)  <span class="hljs-selector-attr">[约束]</span><br>);<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>数据类型:</strong></p><p><code>整型 int</code> , 长度固定11</p><p><code>浮点型 double</code> 长度(总长,其中小数个数)à(5,2) à 999.99√ 10000.0× 1.1√</p><p>​             <code>float</code> </p><p><code>字符型 char</code>  定长字符,长度0-255, ‘张三    ’</p><p>​             <code>varchar</code> 可变长字符 ‘张三’</p><p>​             <code>text</code> 主要存储大文z  本数据</p><p><code>字节型 blob</code> 字节类型,适合存图像等</p><p><code>日期型 date </code>,日期不需要指定长度</p><p>​    <code>time 时间</code>,不需要指定长度</p><p>​    <code>datetime 日期时间</code>,不需要会指定长度</p><p>​    <code>timestamp 时间戳</code>,时间会自动改变</p><p><strong>除了整型和日期数据类型,其他数据类型都需要指定数据长度.</strong></p></blockquote><table><thead><tr><th>id(整型)</th><th>name(字符串)</th><th>age(整型)</th><th>sex(字符串)</th><th>birthday(日期)</th><th>score(浮点型)</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu(<br>    id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>),     <span class="hljs-comment">-- int类型长度11,每个列之间使用,隔开</span><br>    <span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),  <span class="hljs-comment">-- 字符型长度10,逗号隔开</span><br>    age <span class="hljs-type">int</span>,      <span class="hljs-comment">-- int类型长度固定,可以省略</span><br>    sex <span class="hljs-type">char</span>(<span class="hljs-number">1</span>),<br>    birthday <span class="hljs-type">date</span>,   <span class="hljs-comment">-- 日期不需要写长度</span><br>    score <span class="hljs-type">double</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)  <span class="hljs-comment">-- 最后一个列,不用写,号</span><br>);<br></code></pre></div></td></tr></table></figure><p><strong>查看表的字段信息</strong></p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">desc 表名<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p><strong>更新表字段-添加列</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> 列名 数据类型(长度);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> stu <span class="hljs-keyword">add</span> cid <span class="hljs-type">int</span><br></code></pre></div></td></tr></table></figure><p><strong>更新表字段-删除列</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> 列名;<br></code></pre></div></td></tr></table></figure><p><strong>更新列名</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 change 旧列名 新列名 数据类型(长度);<br></code></pre></div></td></tr></table></figure><p><strong>更新表名（已经不可用）</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">rename</span> <span class="hljs-keyword">table</span> 旧表名 <span class="hljs-keyword">to</span> 新表名;<br></code></pre></div></td></tr></table></figure><p><strong>查看创建表的语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名;<br></code></pre></div></td></tr></table></figure><p><strong>修改表的编码格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> gbk; <span class="hljs-comment">-- 建议就使用utf8</span><br></code></pre></div></td></tr></table></figure><p><strong>删除表</strong></p><figure class="highlight pf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pf"><span class="hljs-keyword">drop</span> <span class="hljs-built_in">table</span> 表名;<br></code></pre></div></td></tr></table></figure><h1 id="DML-数据操作语言"><a href="#DML-数据操作语言" class="headerlink" title="DML-数据操作语言"></a>DML-数据操作语言</h1><p>是指对表中数据的增,删,改</p><h2 id="插入-insert"><a href="#插入-insert" class="headerlink" title="插入-insert"></a>插入-insert</h2><p>语法:：</p><p>​            <strong>insert into 表名 (列名1,列名2,…) values (值1,值2,…);</strong></p><p><strong>注意:</strong></p><ol><li> 列名顺序与原表无关,但是列要在表中存在</li><li> 要插入的列,不需要是全表列.可只列出需要插入的字段名</li><li> 值与列的顺序,个数,类型一致</li><li> 字符串值,日期值需要使用单引号’’,例如’张三’ ‘2021-01-07’</li><li> 可以插入空值null(前提是列允许null值)</li><li>插入全表时,可以省略列名,值的赋值是按照原表列顺序赋值</li></ol><p>演示：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 注释</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 多行注释 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- 插入</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (id,username,birthday) <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;2021-01-07&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (id,username,birthday) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;2021-01-07&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (id,username,birthday) <span class="hljs-keyword">values</span> (<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;2021-01-07&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (id,username,birthday) <span class="hljs-keyword">values</span> (<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-comment">-- 全表</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student (<br>id,<br>username,<br>age,<br>sex,<br>birthday,<br>score<br>)<br><span class="hljs-keyword">VALUES</span><br>(<br><span class="hljs-number">6</span>,<br><span class="hljs-string">&#x27;赵六&#x27;</span>,<br><span class="hljs-number">19</span>,<br><span class="hljs-string">&#x27;男&#x27;</span>,<br><span class="hljs-string">&#x27;2021-01-7&#x27;</span>,<br><span class="hljs-number">99.0</span><br>);<br><span class="hljs-comment">-- 省略列名,要与原表列顺序一致</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span> (<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;赵六7&#x27;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;2021-01-07&#x27;</span>,<span class="hljs-number">98.0</span>);<br><br><span class="hljs-comment">-- 数据长度要与创建时一致</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span> (<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;赵六8&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;2021-01-07&#x27;</span>,<span class="hljs-number">999.99</span>);<br><span class="hljs-comment">-- insert into student values (8,&#x27;赵六8&#x27;,20,&#x27;男&#x27;,&#x27;2021-01-07&#x27;,9999.99);</span><br><br></code></pre></div></td></tr></table></figure><h2 id="更新-update"><a href="#更新-update" class="headerlink" title="更新-update"></a>更新-update</h2><p>语法：</p><p>​            <strong>update 表名 set 字段 1=值,字段 2=值，…【where  字段=值】</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 更新</span><br><span class="hljs-comment">-- 将学号为1的学生年龄改为20,成绩改为100</span><br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> age = <span class="hljs-number">20</span>,score = <span class="hljs-number">100</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">-- 将所有女生的年龄改为18</span><br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> age = <span class="hljs-number">18</span> <span class="hljs-keyword">where</span> sex = <span class="hljs-string">&#x27;女&#x27;</span><br><br><span class="hljs-comment">-- 将学号为7的学生的成绩加2分</span><br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> score = score + <span class="hljs-number">2</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">7</span>;<br><br><span class="hljs-comment">-- 不加条件,全表更新</span><br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> birthday = <span class="hljs-string">&#x27;2021-01-06&#x27;</span>;<br><br></code></pre></div></td></tr></table></figure><h2 id="删除-delete"><a href="#删除-delete" class="headerlink" title="删除-delete"></a>删除-delete</h2><p>语法：</p><p>​            <strong>delete from 表名【where  字段=值】</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 删除学生表姓名为张三的数据</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;李四&#x27;</span>;<br><br><span class="hljs-comment">-- 如果不加条件,则会删除全表</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student;<br></code></pre></div></td></tr></table></figure><p>ps：</p><blockquote><p>工作中，不能真的删除数据，数据很重要，后期可能会做数据收集，处理，分析等等工作。</p><p>那么，如何实现“删除”？</p><p>设计表时，给表设计多设计一个字段：状态字段status，</p><p>一般定义状态码： 1正常    2不正常    </p><p>​                    或者 </p><p>​                                1普通用户     2普通会员     3黄金会员     7已注销</p><p>在点击按钮<strong>删除</strong>时，其实是<strong>更新字段的状态</strong></p></blockquote><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>约束：对插入数据的约束。</p><p>一般在创建表时指定约束，然后在插入值时按照约束赋值。</p><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode">create table 表名<span class="hljs-comment">(</span><br><span class="hljs-comment">    字段 数据类型(长度)</span> 约束,<br>    字段 数据类型<span class="hljs-comment">(长度)</span> 约束<span class="hljs-number">1</span> 约束<span class="hljs-number">2</span>,<br>    字段 数据类型<span class="hljs-comment">(长度)</span> <br>);<br></code></pre></div></td></tr></table></figure><p>约束类型:</p><blockquote><p><code>主键约束</code></p><p><code>自增约束</code></p><p><code>唯一约束</code></p><p><code>数据类型</code></p><p><code>非空约束</code></p><p><code>默认值约束</code></p><p><code>引用完整性约束-&gt;外键</code></p></blockquote><h2 id="主键约束-自增约束"><a href="#主键约束-自增约束" class="headerlink" title="主键约束+自增约束"></a>主键约束+自增约束</h2><blockquote><p><code>primary key 主键</code></p><p><code>auto_increment 自动增长</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 主键约束:</span><br><span class="hljs-comment">1 主键列值不能重复,即唯一标识</span><br><span class="hljs-comment">    2 主键值不能为空</span><br><span class="hljs-comment">    3 主键是索引(index) -查询(效率高速度快)</span><br><span class="hljs-comment"> 一张表中可以设置两个或多个主键,它们是一个整体,叫联合主键</span><br><span class="hljs-comment">   联合主键的所有列值重复,才算重复</span><br><span class="hljs-comment">---------------------------</span><br><span class="hljs-comment">  一般主键都会设置为自增.</span><br><span class="hljs-comment">  如果不给主键设置值,则会根据上条数据主键值,自增1</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu1(<br>id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">primary</span> key,<br>    name <span class="hljs-type">varchar</span> (<span class="hljs-number">10</span>)<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu2(<br>id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>),<br>  age <span class="hljs-type">int</span>(<span class="hljs-number">11</span>),<br>  <span class="hljs-keyword">primary</span> key(id,age) <span class="hljs-comment">-- 联合主键</span><br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu3(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)<br>);<br><br><span class="hljs-comment">-- 没有主键的列值,可以重复</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (id) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (id) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">-- 主键不能为空</span><br><span class="hljs-comment">-- insert into stu1 (name) values (&#x27;张三&#x27;);</span><br><br><span class="hljs-comment">-- 主键自增,插入值,会自动增长</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> stu3 (name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;张三&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> stu3 (name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;李四&#x27;</span>);<br><br><span class="hljs-comment">-- 删除一行数据,自增的数据会按照删除之前继续自增</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> stu3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> stu3 (name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;王五&#x27;</span>);<br></code></pre></div></td></tr></table></figure><h2 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h2><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 唯一约束: unique</span><br><span class="hljs-comment">  使该列的值不能重复</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu4(<br>    id <span class="hljs-type">int</span> ,<br>    <span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">unique</span><br>);<br><br></code></pre></div></td></tr></table></figure><h2 id="数据类型约束"><a href="#数据类型约束" class="headerlink" title="数据类型约束"></a>数据类型约束</h2><p>　　数据类型约束即,限制该列存储的数据类型,不符合不能存入!</p><h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 非空约束:not null</span><br><span class="hljs-comment">  在插入时该列值不能为空</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu5(<br>    id <span class="hljs-type">int</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br><br></code></pre></div></td></tr></table></figure><h2 id="默认值约束"><a href="#默认值约束" class="headerlink" title="默认值约束"></a>默认值约束</h2><p>　　DBMS如果创建时不指定约束,那么每个列的值默认为null</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 默认值 default xx</span><br><span class="hljs-comment"> 当该列不赋值时,默认赋值为xx.</span><br><span class="hljs-comment">设置默认值后,插入的数据仍可以指定值</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu6(<br>    id <span class="hljs-type">int</span>,<br>    <span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>    sex <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;男&#x27;</span><br>);<br><br></code></pre></div></td></tr></table></figure><blockquote><p>ps: 建表时在字段后 使用comment ‘注释’,可以对该列注释</p></blockquote><h2 id="引用完整性约束-gt-外键"><a href="#引用完整性约束-gt-外键" class="headerlink" title="引用完整性约束-&gt;外键"></a>引用完整性约束-&gt;外键</h2><p>　　创建学生表stu，字段sid，sname，age</p><p>　　创建课程表course 字段cid，cname，sid</p><p>　　假设一个学生可以有多个课程,所以在课程表中设计了stu表的主键列sid</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu(<br>    sid <span class="hljs-type">int</span> <span class="hljs-keyword">primary key</span> auto_increment <span class="hljs-keyword">comment</span> ‘学生主键’,<br>    sname <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">comment</span> ‘学生姓名’,<br>    age <span class="hljs-type">int</span> <span class="hljs-keyword">comment</span> ‘学生年龄’<br>);<br></code></pre></div></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> course(<br>    cid <span class="hljs-type">int</span> <span class="hljs-keyword">primary key</span> auto_increment <span class="hljs-keyword">comment</span> ‘课程主键’,<br>    cname <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">comment</span> ‘课程名称’,<br>    sid <span class="hljs-type">int</span> <span class="hljs-keyword">comment</span> ‘关联学生表id’<br>);<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210904231026.png"></p><p>　　设计了外键后，课程表中的sid字段就与学生表的sid字段有联系.</p><p>　　<strong>父表</strong>: <code>stu表 (被引用的表)</code></p><p>　　<strong>子表</strong>: <code>course表 (引用表)</code></p><p><strong>插入时:</strong></p><p>  　　  学生表可以随意插入值</p><p>​    　　课程表插入值时，sid字段只能插入学生表中有的sid值</p><p><strong>删除或更新时:</strong></p><p>　　    <code>RESTRICT</code>: 如果想要删除/更新父表的记录，子表中有关联该父表记录的，则不允许删除父表记录</p><p>​    　　<code>NO ACTION</code>: 同restrict一样，删除时先检查外键。如果有引用，不能删除</p><p>​    　　<code>CASCADE</code>: 级联,父表删除/更新时，如果有子表有关联,那么子表父表数据一起删除/更新</p><p>   　　 <code>SET NULL</code>: 置空，父表删除/更新时，如果子表有关联,那么子表该条记录置为null</p><p>演示：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 引用完整性约束-外键(foreign key)</span><br><span class="hljs-comment"> 创建外键的方式</span><br><span class="hljs-comment"> 1 在建表时直接指定</span><br><span class="hljs-comment">   在引用了别的表字段的表中添加外键约束</span><br><span class="hljs-comment">constraint 外键名 foreign key(当前表字段) references 其他表(字段)</span><br><span class="hljs-comment"> 2 建好表后再指定</span><br><span class="hljs-comment">   alter table 表名 add constraint 外键名 foreign key (字段) references 其他表(字段)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu(<br> sid <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment comment <span class="hljs-string">&#x27;学生主键&#x27;</span>,<br> sname <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;学生姓名&#x27;</span>,<br> age <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;学生年龄&#x27;</span><br>);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> course(<br> cid <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment comment <span class="hljs-string">&#x27;课程主键&#x27;</span>,<br> cname <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;课程名称&#x27;</span>,<br> sid <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;关联学生表id&#x27;</span>,<br> <span class="hljs-keyword">constraint</span> fk_course_stu <span class="hljs-keyword">foreign</span> key(sid) <span class="hljs-keyword">references</span> stu(sid)<br>);<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> course <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> fk_course_stu <span class="hljs-keyword">foreign</span> key (sid) <span class="hljs-keyword">references</span> stu(sid);<br><br></code></pre></div></td></tr></table></figure><h1 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h1><p>　　DQL是指查询语言,从数据表中通过一系列条件将符合条件查出.</p><p>　　<strong>DQL查询语句只是查看数据,不会对原表有任何影响.</strong></p><p>　　查询的<code>结果</code>是一张<code>虚拟表</code>.</p><p>　　查询的关键字: select</p><hr><p>　　查询语句大致分为:</p><ol><li>==基础查询==</li><li>==条件查询==</li><li>==模糊查询==</li><li>==排序查询==</li></ol><p>语法: </p><p>​            <strong>select 字段1,字段2,… from 表名【where… group by… having… order by… limit…】</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">语法:<br><span class="hljs-keyword">select</span> <br>selection_list         <span class="hljs-comment">--要查询的列 </span><br><span class="hljs-keyword">from</span> <br><span class="hljs-built_in">table_name</span>          <span class="hljs-comment">-- 要查询的表名</span><br><span class="hljs-keyword">where</span> condition          <span class="hljs-comment">-- 过滤行条件</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> grouping_clumns <span class="hljs-comment">-- 对结果按照列进行分组</span><br><span class="hljs-keyword">having</span> condition          <span class="hljs-comment">-- 分组后再过滤</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sort_column      <span class="hljs-comment">-- 排序</span><br><span class="hljs-keyword">limit</span> <span class="hljs-keyword">offset</span>,<span class="hljs-built_in">row_count</span>      <span class="hljs-comment">-- 对结果限制</span><br><br></code></pre></div></td></tr></table></figure><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><p>  – ==============  基础查询 =============</p><figure class="highlight moonscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs moonscript"><span class="hljs-comment">-- 查询所有列,将所有列名写出即可</span><br><span class="hljs-built_in">select</span> sname,sex,sid,score,age,cid,groupLeaderId <span class="hljs-keyword">from</span> stu;<br><span class="hljs-comment">-- 查询所有列,可以使用* 代替所有列名</span><br><span class="hljs-built_in">select</span> * <span class="hljs-keyword">from</span> stu;<br><br><span class="hljs-comment">-- 查询指定 列</span><br><span class="hljs-comment">-- 查询学生学号,姓名,年龄</span><br><span class="hljs-built_in">select</span> sid,sname,age <span class="hljs-keyword">from</span> stu;<br><span class="hljs-built_in">select</span> sname <span class="hljs-keyword">from</span> stu;<br></code></pre></div></td></tr></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>  – ==============  条件查询 =============</p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet">/*<br>  条件查询就是查询时在基础查询的后面使用<br>  <span class="hljs-keyword">where</span>语句,<span class="hljs-keyword">where</span>后使用运算符将符合条件的数据保留<br>  =     相等<br>  != &lt;&gt; 不等<br>  &lt;小于 &gt;大于 &lt;=  &gt;=<br>  <span class="hljs-built_in">and</span>    和/与 两边的条件同时成立才行<br>  <span class="hljs-built_in">or</span>     或    两边的条件有一个成立即可<br>  <span class="hljs-keyword">in</span>(<span class="hljs-keyword">set</span>)     范围  在<span class="hljs-keyword">set</span>集合范围内<br>  between 值<span class="hljs-number">1</span> <span class="hljs-built_in">and</span> 值<span class="hljs-number">2</span>  在..之间.. (包含临界值,从小到大)<br>  <span class="hljs-built_in">not</span> <span class="hljs-keyword">in</span>   取反<br>*/<br><br>-- 查询学号为<span class="hljs-number">1001</span>的学生信息<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sid = <span class="hljs-number">1001</span> <br><br>-- 查询学生成绩大于<span class="hljs-number">60</span>的学生id 姓名,成绩<br><span class="hljs-keyword">select</span> sid,sname,score <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> score &gt; <span class="hljs-number">60</span>;<br><br>-- 查询学生性别为女，并且年龄小于<span class="hljs-number">50</span>的记录<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sex = <span class="hljs-comment">&#x27;女&#x27; and age &lt; 50</span><br><br>-- 查询学生学号为<span class="hljs-number">1001</span>，或者姓名为李四的记录<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sid = <span class="hljs-number">1001</span> <span class="hljs-built_in">or</span> sname = <span class="hljs-comment">&#x27;李四&#x27;</span><br><br>-- 查询学号为<span class="hljs-number">1001</span>，<span class="hljs-number">1002</span>，<span class="hljs-number">1003</span>的记录<br>-- <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sid = <span class="hljs-number">1001</span> <span class="hljs-built_in">or</span> sid = <span class="hljs-number">1002</span> <span class="hljs-built_in">or</span> sid = <span class="hljs-number">1003</span><br>---<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sid <span class="hljs-keyword">in</span> (<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>,<span class="hljs-number">1003</span>)<br><br>-- 查询学号不是<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>,<span class="hljs-number">1003</span>的记录<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sid <span class="hljs-built_in">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>,<span class="hljs-number">1003</span>)<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sid != <span class="hljs-number">1001</span> <span class="hljs-built_in">and</span> sid != <span class="hljs-number">1002</span> <span class="hljs-built_in">and</span> sid != <span class="hljs-number">1003</span><br><br>-- 查询学生年龄在<span class="hljs-number">20</span>到<span class="hljs-number">40</span>之间的学生记录<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age &gt;= <span class="hljs-number">20</span> <span class="hljs-built_in">and</span> age &lt;= <span class="hljs-number">40</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age between <span class="hljs-number">20</span> <span class="hljs-built_in">and</span> <span class="hljs-number">40</span>;<br><br>-- 查询性别非男的学生记录<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sex != <span class="hljs-comment">&#x27;男&#x27;</span><br>-- <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sex = <span class="hljs-comment">&#x27;女&#x27;</span><br><br></code></pre></div></td></tr></table></figure><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p>  – ==============  条件查询 =============</p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet">/*<br> 模糊查询需要放在<span class="hljs-keyword">where</span>后使用<span class="hljs-built_in">like</span>关键字<br> 例如 <span class="hljs-keyword">where</span> 字段 <span class="hljs-built_in">like</span> <span class="hljs-comment">&#x27;%关键字&#x27;</span><br> 例如 <span class="hljs-keyword">where</span> 字段 <span class="hljs-built_in">like</span> <span class="hljs-comment">&#x27;_关键字&#x27;</span><br> 通配符:<br>% ,可以匹配任何个数任意字符<br>       _ ,可以匹配一个任意字符<br>*/<br>-- 查询姓名以“张”开头的学生记录<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sname <span class="hljs-built_in">like</span> <span class="hljs-comment">&#x27;张%&#x27;;</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sname <span class="hljs-built_in">like</span> <span class="hljs-comment">&#x27;张_&#x27;;</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sname <span class="hljs-built_in">like</span> <span class="hljs-comment">&#x27;张__&#x27;;</span><br><br>-- 查询姓名中包含“三”的学生记录<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sname <span class="hljs-built_in">like</span> <span class="hljs-comment">&#x27;%三%&#x27;</span><br></code></pre></div></td></tr></table></figure><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><p>  – ==============  排序查询 =============</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 排序查询:将查询到的的结果按照一定的顺序排序</span><br><span class="hljs-comment">order by 字段 [desc|asc] ==&gt; desc 降序, asc升序</span><br><span class="hljs-comment">例如: order by 字段 desc</span><br><span class="hljs-comment">例如: order by 字段 asc</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- 查询所有学生记录，按年龄升序排序</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">asc</span><br><br><span class="hljs-comment">-- 查询所有学生记录，按年龄降序排序</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">desc</span><br><br><span class="hljs-comment">-- 不写排序类型,默认是升序</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age<br><br><span class="hljs-comment">-- 查询所有学生记录，按年龄升序排序,如果年龄相同时，按编号降序排序</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">asc</span>,sid <span class="hljs-keyword">desc</span><br><br><span class="hljs-comment">-- 查询成绩大于60的学生id,姓名,成绩,并根据成绩降序</span><br><span class="hljs-keyword">select</span> sid,sname,score <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> score &gt; <span class="hljs-number">60</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span>;<br><br></code></pre></div></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>  – ==============  聚合函数 =============</p><p>聚合：把多行数据,变成一行输出</p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210905170103.png"></p><p>演示:</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 聚合函数</span><br><span class="hljs-comment"> count(列名) 统计指定列不为null的行数</span><br><span class="hljs-comment"> max(列名) 获得指定列中最大值,如果是字符串,按照字符顺序</span><br><span class="hljs-comment"> min(列名) 获得最小</span><br><span class="hljs-comment"> sum(列名) 计算指定列的和值,计算非数字,结果是0</span><br><span class="hljs-comment"> avg(列名) 计算指定列的平均值,计算非数字,结果是0</span><br><span class="hljs-comment">---------------</span><br><span class="hljs-comment">语法: </span><br><span class="hljs-comment">select 聚合函数 from 表名 [where.. ]</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- 查询stu表中记录数：</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(sid) <span class="hljs-keyword">from</span> stu;<br>update stu <span class="hljs-keyword">set</span> score <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">where</span> sid <span class="hljs-operator">=</span> <span class="hljs-number">1001</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(sex) <span class="hljs-keyword">from</span> stu;<br><br><span class="hljs-comment">-- 在列名后使用as 给列取别名,as可以省略</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(sid) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;记录数&#x27;</span> <span class="hljs-keyword">from</span> stu;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(sid) <span class="hljs-string">&#x27;记录数&#x27;</span> <span class="hljs-keyword">from</span> stu;<br><br><span class="hljs-comment">-- 查询stu表中有成绩的人数：</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(score) <span class="hljs-string">&#x27;人数&#x27;</span> <span class="hljs-keyword">from</span> stu;<br><br><span class="hljs-comment">-- 查询stu表中成绩大于60的人数：</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> score <span class="hljs-operator">&gt;</span> <span class="hljs-number">60</span>;<br><br><span class="hljs-comment">-- 查询所有学生成绩和：</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(score) <span class="hljs-keyword">from</span> stu;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(score) <span class="hljs-string">&#x27;总成绩&#x27;</span> <span class="hljs-keyword">from</span> stu;<br><br><span class="hljs-comment">-- 统计所有学生平均成绩</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(score) <span class="hljs-keyword">from</span> stu;<br><br><span class="hljs-comment">-- 统计stu表中成绩大于60的平均分</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(score) <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> score <span class="hljs-operator">&gt;</span> <span class="hljs-number">60</span><br><br><span class="hljs-comment">-- 查询最高成绩和最低成绩：</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(score) <span class="hljs-string">&#x27;最高分&#x27;</span>,<span class="hljs-built_in">min</span>(score) <span class="hljs-string">&#x27;最低分&#x27;</span> <span class="hljs-keyword">from</span> stu;<br><br><span class="hljs-comment">-- 统计stu表中成绩大于60的最高成绩和最低成绩：</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(score) <span class="hljs-string">&#x27;最高分&#x27;</span>,<span class="hljs-built_in">min</span>(score) <span class="hljs-string">&#x27;最低分&#x27;</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> score <span class="hljs-operator">&gt;</span> <span class="hljs-number">60</span>;<br><br><span class="hljs-comment">-- 查询最高成绩,以及学生姓名</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 与聚合函数一同出现的列名,必须出现在group by后</span><br><span class="hljs-comment"> 反之,如果出现了一个没有在group by后出现的字段,那么查询结果不正常!</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(score) <span class="hljs-string">&#x27;最高分&#x27;</span>,sname <span class="hljs-keyword">from</span> stu;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> stu; <span class="hljs-comment">-- 490</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(score) <span class="hljs-keyword">from</span> stu; <span class="hljs-comment">-- 742</span><br><br><span class="hljs-comment">-- 计算总年龄与总成绩的和</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(age)<span class="hljs-operator">+</span><span class="hljs-built_in">sum</span>(score) <span class="hljs-keyword">from</span> stu;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(age <span class="hljs-operator">+</span> score) <span class="hljs-keyword">from</span> stu;<br><br></code></pre></div></td></tr></table></figure><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><p>  – ==============  去重 =============</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 去重函数 distinct(列)</span><br><span class="hljs-comment">将指定列的数据去重</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- 不重复的年龄</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span>(age) <span class="hljs-keyword">from</span> stu;<br><br><span class="hljs-comment">-- 查询年龄不重复的共有多少人</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> age) <span class="hljs-keyword">from</span> stu;<br><br></code></pre></div></td></tr></table></figure><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><p>  – ==============  分组查询 =============</p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210905170100.png"></p><figure class="highlight q"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs q">-- ================ 分组查询 ==================<br>/*<br>当需要分组查询时,需要使用<span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span>语句.<br>  语法:<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu [<span class="hljs-built_in">where</span> ...] <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> 字段 [order <span class="hljs-keyword">by</span>..]<br>    字段值相同的分到一组<br>    注意:<br><span class="hljs-number">1</span> 一般分组之后的操作都是聚合操作<br>      <span class="hljs-number">2</span> 分成几组,虚拟表结果就是几行数据<br>      <span class="hljs-number">3</span> 聚合函数,是对每组进行单独聚合操作<br>--------------------------------<br>   分组后再过滤,使用having子句(<span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span>后使用having)<br>   与<span class="hljs-built_in">where</span>的区别:<br><span class="hljs-built_in">where</span>是分组前过滤, having是分组后过滤<br><span class="hljs-built_in">where</span>后不能使用聚合函数,having可以使用聚合函数<br>   <br>*/ <br><span class="hljs-keyword">select</span> sex <span class="hljs-keyword">from</span> stu <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> sex;<br> <br>-- 查询男生多少人,女生多少人<br><span class="hljs-keyword">select</span> sex,<span class="hljs-built_in">count</span>(*) &#x27;人数&#x27; <span class="hljs-keyword">from</span> stu <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> sex;<br> <br>-- 查询每个班级的班级编号和每个班级的成绩和：<br><span class="hljs-keyword">select</span> cid,<span class="hljs-built_in">sum</span>(score) <span class="hljs-keyword">from</span> stu <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> cid;<br><br>-- 查询每个班级的班级编号以及每个班级的人数：<br><span class="hljs-keyword">select</span> cid &#x27;班级&#x27;,<span class="hljs-built_in">count</span>(sid) &#x27;人数&#x27; <span class="hljs-keyword">from</span> stu <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> cid;<br><br>-- 查询成绩总和大于<span class="hljs-number">200</span>的班级编号以及成绩和<br><span class="hljs-keyword">select</span> cid,<span class="hljs-built_in">sum</span>(score) <span class="hljs-keyword">from</span> stu <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> cid having <span class="hljs-built_in">sum</span>(score) &gt; <span class="hljs-number">200</span><br>-- having可以使用前面定义的别名<br><span class="hljs-keyword">select</span> cid,<span class="hljs-built_in">sum</span>(score) &#x27;<span class="hljs-built_in">sum</span>&#x27; <span class="hljs-keyword">from</span> stu <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> cid having <span class="hljs-built_in">sum</span> &gt; <span class="hljs-number">200</span><br><br>-- 查询成绩总和大于<span class="hljs-number">200</span>的班级编号以及成绩和并根据成绩总和降序<br><span class="hljs-keyword">select</span> cid,<span class="hljs-built_in">sum</span>(score) &#x27;<span class="hljs-built_in">sum</span>&#x27; <span class="hljs-keyword">from</span> stu <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> cid having <span class="hljs-built_in">sum</span> &gt; <span class="hljs-number">200</span> order <span class="hljs-keyword">by</span> <span class="hljs-built_in">sum</span> <span class="hljs-built_in">asc</span>;<br><br></code></pre></div></td></tr></table></figure><h2 id="限制输出-重要"><a href="#限制输出-重要" class="headerlink" title="限制输出(重要)"></a>限制输出(重要)</h2><p>  – ==============  限制输出 =============</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-comment">-- =============== 限制输出 ================</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 可以将查询好的结果,限制输出.</span><br><span class="hljs-comment"> 可以限制输出几条,从哪里输出.</span><br><span class="hljs-comment"> 语法:</span><br><span class="hljs-comment">在sql语句最后写 limit offset,row_count</span><br><span class="hljs-comment">    limit 开始下标,行数;</span><br><span class="hljs-comment">    例如: limit 0,2;  ==&gt; 从第一条输出,输出2条</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- 查询所有女生,输出前两个女生</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sex = ‘女’  <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">2</span><br><span class="hljs-comment">-- 查询所有女生, 输出成绩前两名的女生</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sex = ‘女’ <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">2</span><br><br><span class="hljs-comment">-- 输出前两条</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">2</span>;<br><br><span class="hljs-comment">-- 从第四条开始,输出三条</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">limit</span> <span class="hljs-number">3</span>,<span class="hljs-number">3</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 分页: 每页3条数据</span><br><span class="hljs-comment">----------------------------------------------</span><br><span class="hljs-comment">在写项目的分页逻辑中,有一些已知条件:</span><br><span class="hljs-comment">1.在进入分页时,默认打开的是第一页</span><br><span class="hljs-comment">2.每页展示所多少条数据是固定的</span><br><span class="hljs-comment">----------------------------------------------</span><br><span class="hljs-comment">一般情况下,在写分页逻辑时,会设计几个变量</span><br><span class="hljs-comment">1)pageNo     当前页(已知条件)</span><br><span class="hljs-comment">2)pageSize    每页展示多少条数据(页面大小)(已知条件)</span><br><span class="hljs-comment">3)total        总共多少条记录(用SQL语句查出总条数)(select count(*) from stu)</span><br><span class="hljs-comment">4)pageCount  总页数(推导出)(total % pageSize != 0 ? (total/pageSize) : total /pageSize)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- 输出第一页(当前页)数据</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">limit</span> (pageNo<span class="hljs-number">-1</span>)*pageSize,pageSize<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">3</span>;<br><span class="hljs-comment">-- 第二页</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">limit</span> <span class="hljs-number">3</span>,<span class="hljs-number">3</span>;<br></code></pre></div></td></tr></table></figure><p>PS：<strong>分页这部分挺重要</strong></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h2><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">IF(expr1,expr2,expr3)</span><br><span class="hljs-comment">  如果expr1为真，则返回expr2，否则返回expr3</span><br><span class="hljs-comment">-- isnull()函数,判断是否为空</span><br><span class="hljs-comment">-- isnull(字段) 如果是null,返回1 不是null返回0</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- 查询学生id,姓名,成绩,如果成绩为null,显示缺考</span><br><span class="hljs-keyword">select</span> sid,sname,<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isnull</span>(score)=<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;缺考&#x27;</span>,score) <span class="hljs-keyword">from</span> stu;<br><br><span class="hljs-comment">-- is null 是判断条件 判断条件放在where后用来过滤要查询的数据</span><br><span class="hljs-comment">-- isnull() 是函数 (函数可以做运算)</span><br><span class="hljs-keyword">update</span> stu <span class="hljs-keyword">set</span> score = <span class="hljs-number">72</span> <span class="hljs-keyword">where</span> score <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br><br><span class="hljs-comment">-- 查询学生成绩为null的学生信息</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> score <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br><span class="hljs-comment">-- 查询学生成绩不为null的学生信息</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> score <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br><br><span class="hljs-comment">-- IFNULL(expr1,expr2)如果 expr1不是NULL,则返回expr1，否则返回expr2；</span><br><span class="hljs-comment">-- 查询学生id,姓名,成绩,如果成绩为null,显示缺考</span><br><span class="hljs-keyword">select</span> sid,sname,ifnull(score,<span class="hljs-string">&#x27;缺考&#x27;</span>) <span class="hljs-string">&#x27;成绩&#x27;</span> <span class="hljs-keyword">from</span> stu<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">CASE WHEN [expr1] THEN [result1]… ELSE [default] END如果expr是真, 返回result1,否则返回default</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  case</span><br><span class="hljs-comment">when 条件 then 执行语句</span><br><span class="hljs-comment">    when 条件 then 执行语句</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">else  执行语句</span><br><span class="hljs-comment">end</span><br><span class="hljs-comment">  执行第一个when后的条件,如果为true,执行then后的语句,</span><br><span class="hljs-comment">  如果when后的条件为false,执行第二when后的条件</span><br><span class="hljs-comment">  如果都是false,执行else后语句</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 查询学生id,姓名,成绩,以及等级</span><br><span class="hljs-comment">-- (0-59 不及格,60-69中,70-89良,90-100优 )</span><br><span class="hljs-keyword">select</span> sid,sname,score,<br><span class="hljs-keyword">case</span> <br><span class="hljs-keyword">when</span> score &lt; <span class="hljs-number">60</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;不及格&#x27;</span><br>        <span class="hljs-keyword">when</span> score &lt; <span class="hljs-number">70</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;中&#x27;</span><br><span class="hljs-keyword">when</span> score &lt; <span class="hljs-number">90</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;良&#x27;</span><br><span class="hljs-keyword">when</span> <span class="hljs-keyword">isnull</span>(score)=<span class="hljs-number">1</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;缺考&#x27;</span>  (等于 <span class="hljs-keyword">when</span> score <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> ‘缺考’)<br><span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;优&#x27;</span><br><span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;等级&#x27;</span><br><span class="hljs-keyword">from</span> stu;<br><br><span class="hljs-comment">-- 类似于switch case结构</span><br><span class="hljs-keyword">CASE</span> <br>[<span class="hljs-keyword">VALUE</span>]<br><span class="hljs-keyword">WHEN</span> [ value1 ] <span class="hljs-keyword">THEN</span> [ result1 ] <br> …<br><span class="hljs-keyword">ELSE</span><br>[ <span class="hljs-keyword">DEFAULT</span> ]<br><span class="hljs-keyword">END</span> <br><br>如果<span class="hljs-keyword">value</span>等于value1,返回result1,<br> 否则返回<span class="hljs-keyword">default</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> score <br><span class="hljs-keyword">when</span> <span class="hljs-number">72</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;七十二&#x27;</span><br>  <span class="hljs-keyword">when</span> <span class="hljs-number">78</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;七十八&#x27;</span><br>  <span class="hljs-keyword">else</span>  <span class="hljs-string">&#x27;其他&#x27;</span><br><span class="hljs-keyword">end</span> <br><span class="hljs-keyword">from</span> stu<br><br></code></pre></div></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>==书写语法:==</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <br>selection_list     <span class="hljs-comment">--要查询的列</span><br><span class="hljs-keyword">from</span> <br><span class="hljs-built_in">table_name</span>     <span class="hljs-comment">-- 要查询的表名</span><br><span class="hljs-keyword">where</span> condition     <span class="hljs-comment">-- 过滤行条件</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> grouping_clumns <span class="hljs-comment">-- 对结果按照列进行分组</span><br><span class="hljs-keyword">having</span> condition     <span class="hljs-comment">-- 分组后再过滤</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sort_column   <span class="hljs-comment">-- 排序</span><br><span class="hljs-keyword">limit</span> <span class="hljs-keyword">offset</span>,<span class="hljs-built_in">row_count</span>   <span class="hljs-comment">-- 对结果限制</span><br></code></pre></div></td></tr></table></figure><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210905170045.png" style="zoom: 50%;" /><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h2 id="1-联合查询-合并结果集-不常见"><a href="#1-联合查询-合并结果集-不常见" class="headerlink" title="1 联合查询-合并结果集(不常见)"></a>1 联合查询-合并结果集(不常见)</h2><p>　　将两表的查询结果<strong>纵向</strong>拼接在一起</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> / <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <br></code></pre></div></td></tr></table></figure><p>　　拼接的两个表的<strong>字段个数</strong>，<strong>类型</strong>，<strong>顺序</strong>保证一致.</p><p>　　<strong>union 在拼接时会去重</strong></p><p>　　<strong>union all 将两表的全部数据都拼接</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> sid,sname <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> cid,cname <span class="hljs-keyword">from</span> <span class="hljs-keyword">class</span>;    <br></code></pre></div></td></tr></table></figure><h2 id="2-连接查询"><a href="#2-连接查询" class="headerlink" title="2 连接查询"></a>2 连接查询</h2><p>　　将两表的查询结果<strong>横向</strong>拼接在一起</p><h3 id="表和表之间的关系"><a href="#表和表之间的关系" class="headerlink" title="表和表之间的关系"></a>表和表之间的关系</h3><p><strong>1对1</strong></p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210905170057.png"></p><p><strong>1对n</strong></p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210905170053.png"></p><p><strong>n对n</strong></p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210905170049.png"></p><p>　　<strong>连接查询就是将多个表多行数据相乘 —&gt; 笛卡尔积</strong></p><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>　　<strong>内连接只会保留完全符合关联条件的数据 (两个表的字段信息全部相等,查询才会显示)</strong></p><p>　　 <strong>不保留不满足条件的数据</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-comment">-- =========== 内连接 ==========</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 内连接语法:</span><br><span class="hljs-comment">select * from 表1 inner join 表2 on 关联条件</span><br><span class="hljs-comment"> 内连接只会保留完全符合关联条件的数据 (两个表的字段信息全部相等,查询才会显示)</span><br><span class="hljs-comment">  不保留不满足条件的数据</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- 没有关联条件,会产生笛卡尔积</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">class</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">on</span> stu.cid = <span class="hljs-keyword">class</span>.cid <br><br><span class="hljs-comment">-- 查询每个学生的信息,包括班级的全部信息</span><br><span class="hljs-comment">-- 查询学生名称、学生成绩、班级名称、班级地址(多表联查建议每个字段加上表名)</span><br><span class="hljs-keyword">select</span> sname,score,cname,caddress <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">on</span> stu.cid = <span class="hljs-keyword">class</span>.cid<br><br><span class="hljs-comment">-- 查询学号为1007的学生名称、学生成绩、班级名称、班级地址</span><br><span class="hljs-comment">-- 给表取别名</span><br><span class="hljs-keyword">SELECT</span><br>sname,<br>score,<br>cname,<br>caddress<br><span class="hljs-keyword">FROM</span><br>stu s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">class</span> c <span class="hljs-keyword">ON</span> s.cid = c.cid<br><span class="hljs-keyword">WHERE</span><br>s.sid = <span class="hljs-number">1007</span><br><br><span class="hljs-comment">-- 内连接可以简写</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">on</span> stu.cid = <span class="hljs-keyword">class</span>.cid <br><span class="hljs-comment">-- 简写成</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu,<span class="hljs-keyword">class</span> <span class="hljs-keyword">where</span> stu.cid = <span class="hljs-keyword">class</span>.cid<br><br></code></pre></div></td></tr></table></figure><h3 id="外连接-常用左外链接"><a href="#外连接-常用左外链接" class="headerlink" title="外连接(常用左外链接)"></a>外连接(常用左外链接)</h3><p>　　 <strong>外连接: 会保留不满足条件的数据 (与内连接相反)</strong></p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet">/*<br> 外连接: 会保留不满足条件的数据 (与内连接相反)<br> 左外连接-left outer <span class="hljs-keyword">join</span> <span class="hljs-keyword">on</span><br>会保留左表中不符合的条件的数据<br> 右外连接 - right outer <span class="hljs-keyword">join</span> <span class="hljs-keyword">on</span><br>    会保留右表中不符合的条件的数据<br>  一般outer关键字可以省略<br>*/<br>-- 查询全部学生信息,如果有班级信息,一并查出.<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu s left outer <span class="hljs-keyword">join</span> <span class="hljs-keyword">class</span> c <span class="hljs-keyword">on</span> s.cid = c.cid<br><br>-- 查询全部班级信息,如果有学生,将学生信息查出<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu s right outer <span class="hljs-keyword">join</span> <span class="hljs-keyword">class</span> c <span class="hljs-keyword">on</span> s.cid = c.cid<br></code></pre></div></td></tr></table></figure><h3 id="子查询-嵌套查询"><a href="#子查询-嵌套查询" class="headerlink" title="子查询(嵌套查询)"></a>子查询(嵌套查询)</h3><p>　　 <code>子查询</code>就是<code>嵌套查询</code>.</p><p>一般子查询出现在:</p><blockquote><p>from后, 当做<strong>一张表</strong>使用</p><p>where后, 当做<strong>条件</strong>使用</p></blockquote><p>　　 select后</p><p>  – ============= 子查询 ============= </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- ============= 子查询 =============</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">子查询就是嵌套查询.</span><br><span class="hljs-comment">一般子查询出现在:</span><br><span class="hljs-comment">from后, 当做一张表使用</span><br><span class="hljs-comment">where后, 当做条件使用</span><br><span class="hljs-comment">select后</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- 查询与张三同一个班级的学生。</span><br><span class="hljs-comment">-- 1查出张三的班级</span><br><span class="hljs-keyword">select</span> cid <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span><br><span class="hljs-comment">-- 2查出1班的学生</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> cid <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><span class="hljs-comment">-- 合并成子查询</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> cid <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> cid <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>)<br><br><span class="hljs-comment">-- 成绩高于3号班级所有人的学生信息</span><br><span class="hljs-comment">-- 1 找到3班最高分</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(score) <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> cid <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br><span class="hljs-comment">-- 2 找成绩比96高的学生</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> score <span class="hljs-operator">&gt;</span> <span class="hljs-number">96</span><br><span class="hljs-comment">-- 合并</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> score <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(score) <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> cid <span class="hljs-operator">=</span> <span class="hljs-number">3</span>)<br><br><span class="hljs-comment">-- 有2个以上组员的组长学生信息</span><br><span class="hljs-comment">-- 1 根据组长编号分组,计算分组人数,保留&gt;2的组</span><br><span class="hljs-keyword">select</span> groupLeaderId,<span class="hljs-built_in">count</span>(sid) <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> groupLeaderId <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(sid) <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> <br><span class="hljs-comment">-- 2 查询学号1007,1010学生的信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sid <span class="hljs-keyword">in</span>(<span class="hljs-number">1007</span>,<span class="hljs-number">1010</span>)<br><span class="hljs-comment">-- 合并</span><br><span class="hljs-keyword">SELECT</span><br><span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>stu<br><span class="hljs-keyword">WHERE</span><br>sid <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span><br>groupLeaderId<br><span class="hljs-keyword">FROM</span><br>stu<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>groupLeaderId<br><span class="hljs-keyword">HAVING</span><br><span class="hljs-built_in">count</span>(sid) <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span><br>) <br><span class="hljs-comment">-- 自连接,自己连接自己,s1当做组长,s2当做组员</span><br><span class="hljs-keyword">select</span> s1.sid,s1.sname <span class="hljs-keyword">from</span> stu s1,stu s2 <span class="hljs-keyword">where</span> s1.sid <span class="hljs-operator">=</span> s2.groupLeaderId <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> s1.sid <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(s1.sid) <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span><br><br><span class="hljs-comment">-- stu s1当做组员,stu s2 组长</span><br><span class="hljs-keyword">select</span> s2.sid,s2.sname <span class="hljs-keyword">from</span> stu s1,stu s2 <span class="hljs-keyword">where</span> s1.groupLeaderId <span class="hljs-operator">=</span> s2.sid <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> s2.sid <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(s2.sid) <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span><br><br><span class="hljs-comment">-- 求1008学生编号、姓名、组长编号和组长姓名</span><br><span class="hljs-comment">-- 1 找到1008学生的组长的编号</span><br><span class="hljs-keyword">select</span> groupLeaderId <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sid <span class="hljs-operator">=</span> <span class="hljs-number">1008</span><br><span class="hljs-comment">-- 2 找到1010的编号和姓名</span><br><span class="hljs-keyword">select</span> sid,sname <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sid <span class="hljs-operator">=</span> <span class="hljs-number">1010</span><br><span class="hljs-comment">-- 3 找1008编号和姓名</span><br><span class="hljs-keyword">select</span> sid,sname <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> sid <span class="hljs-operator">=</span> <span class="hljs-number">1008</span><br><span class="hljs-comment">-- 合并</span><br><span class="hljs-keyword">SELECT</span><br>s.sid,<br>s.sname,<br>b.sid,<br>b.sname<br><span class="hljs-keyword">FROM</span><br>stu s,<br>(<br><span class="hljs-keyword">SELECT</span><br>sid,<br>sname<br><span class="hljs-keyword">FROM</span><br>stu<br><span class="hljs-keyword">WHERE</span><br>sid <span class="hljs-operator">=</span> (<br><span class="hljs-keyword">SELECT</span><br>groupLeaderId<br><span class="hljs-keyword">FROM</span><br>stu<br><span class="hljs-keyword">WHERE</span><br>sid <span class="hljs-operator">=</span> <span class="hljs-number">1008</span><br>)<br>) b<br><span class="hljs-keyword">WHERE</span><br>s.sid <span class="hljs-operator">=</span> <span class="hljs-number">1008</span> <br><span class="hljs-comment">-- 自连接,s1做学生表 s2做组长表</span><br><span class="hljs-comment">-- s1的组长是s2中的学生</span><br><span class="hljs-keyword">select</span> s1.sid,s1.sname,s2.sid,s2.sname <span class="hljs-keyword">from</span> stu s1,stu s2 <span class="hljs-keyword">where</span> s1.groupLeaderId <span class="hljs-operator">=</span> s2.sid <span class="hljs-keyword">and</span> s1.sid <span class="hljs-operator">=</span> <span class="hljs-number">1008</span><br><br><span class="hljs-comment">-- 自连接,s1做组长 s2做学生</span><br><span class="hljs-keyword">select</span> s2.sid,s2.sname,s1.sid,s1.sname <span class="hljs-keyword">from</span> stu s1,stu s2 <span class="hljs-keyword">where</span> s2.groupLeaderId <span class="hljs-operator">=</span> s1.sid <span class="hljs-keyword">and</span> s2.sid <span class="hljs-operator">=</span> <span class="hljs-number">1008</span><br></code></pre></div></td></tr></table></figure><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>　　 自己连接自己</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>1.查询每个学生成绩大于60且成绩总和小于200的班级编号以及成绩和并根据成绩和降序</p><p>2.创建一个表：student sid sname sage sex score sclass sbirthday</p><p>​    》 插入20条数据: 其中sgae随机 sex随机 score随机 </p><p>​    》获取所有年龄小于18 并且 名字中有妹的 所有女生的信息</p><p>​    》 获取所有学生的总人数 平均分 最低分 最高分</p><p>​    》 获取所有参加考试的学生的总人数和参加考试学生的平均分 和 所有学生的平均分</p><p>​    》 获取所有学生的自我介绍信息：我叫xxx,今年xxx岁，明年xx岁，考了xx分,我是成年人/未成年人</p><p>​    》 获取5月份生日的学生的个数</p><p>​    》 获取本月生日的学生的个数</p><p>​    》 获取年龄在18到22岁之间的学生的信息</p><p>​    》 获取第6-10条的所有学生的信息</p><p>​    》 把所有女生 并且年龄&lt;20的学生分数+1</p><p>​    》 把所有成绩为null的学生 分数设置为100</p><p>​    》 删除sclass列</p><p>​    》 添加sgrade列 列类型固定长度4的字符串</p><p>​    》 修改列名sgrade为grade</p><p>​    》 修改grade列类型为char(4)</p><p>​    》 修改表名为stu</p><h1 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h1><p>　　 ==函数这部分按需求学习==</p><h3 id="时间日期相关函数"><a href="#时间日期相关函数" class="headerlink" title="时间日期相关函数"></a>时间日期相关函数</h3><table><thead><tr><th>sysdate()</th><th>获得当前时间</th></tr></thead><tbody><tr><td>ADDTIME (date2 ,time_interval )</td><td>将time_interval（时间间隔）加到date2</td></tr><tr><td>CURRENT_DATE ( )</td><td>当前日期（年月日）</td></tr><tr><td>CURRENT_TIME ( )</td><td>当前时间（时分秒）</td></tr><tr><td>CURRENT_TIMESTAMP  ( )</td><td>当前时间戳</td></tr><tr><td>DATE (datetime )</td><td>返回datetime的日期部分</td></tr><tr><td>DATE_ADD (date2 , INTERVAL d_value d_type )</td><td>在date2中加上日期或时间</td></tr><tr><td>DATE_SUB (date2 , INTERVAL d_value d_type )</td><td>在date2上减去一个时间</td></tr><tr><td>DATEDIFF (date1 ,date2 )</td><td>两个日期差</td></tr><tr><td>NOW ( )</td><td>当前时间</td></tr><tr><td>YEAR|Month|DAY (datetime )</td><td>获得指定日期的年月日</td></tr><tr><td>dayofmonth(datetime)</td><td>获得指定日期的日</td></tr></tbody></table><p>示例：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> addtime(‘<span class="hljs-number">02</span>:<span class="hljs-number">30</span>:<span class="hljs-number">30</span>’,‘<span class="hljs-number">01</span>:<span class="hljs-number">01</span>:<span class="hljs-number">01</span>’);注意：字符串、时间日期的引号问题<br><span class="hljs-attribute">select</span> date_add(entry_date,INTERVAL <span class="hljs-number">2</span> year) from student;／／增加两年<br><span class="hljs-attribute">select</span> addtime(time,‘<span class="hljs-number">1</span> <span class="hljs-number">1</span>-<span class="hljs-number">1</span> <span class="hljs-number">10</span>:<span class="hljs-number">09</span>:<span class="hljs-number">09</span>’) from student;　／／时间戳上增加，注意年后没有- <br></code></pre></div></td></tr></table></figure><p>– <strong>dual,哑表,补全完整的sql语句.dual表并不存在</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- dual,哑表,补全完整的sql语句.dual表并不存在</span><br><span class="hljs-keyword">select</span> sysdate() <span class="hljs-keyword">from</span> dual<br><span class="hljs-keyword">select</span> now() <span class="hljs-keyword">from</span> dual<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">current_date</span>() <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">current_time</span>() <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">current_timestamp</span>() <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">year</span>(<span class="hljs-string">&#x27;2021-01-01&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">year</span>(sbirthday) <span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">month</span>(<span class="hljs-string">&#x27;2021-01-01&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">month</span>(sbirthday) <span class="hljs-keyword">from</span> student;<br><span class="hljs-comment">--5月份生日</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">month</span>(sbirthday) <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">day</span>(<span class="hljs-string">&#x27;2021-01-11&#x27;</span>) <span class="hljs-keyword">from</span> dual<br><span class="hljs-keyword">select</span> dayofmonth(<span class="hljs-string">&#x27;2021-01-11&#x27;</span>) <span class="hljs-keyword">from</span> dual<br><span class="hljs-keyword">select</span> dayofmonth(sbirthday) <span class="hljs-keyword">from</span> student<br><span class="hljs-comment">-- ADDTIME (date2 ,time_interval )将time_interval加到date2</span><br><span class="hljs-keyword">select</span> addtime(<span class="hljs-string">&#x27;2021-01-01 00:00:00&#x27;</span>,<span class="hljs-number">30</span>) <span class="hljs-keyword">from</span> dual;<span class="hljs-comment">-- 加30秒</span><br><span class="hljs-keyword">select</span> addtime(<span class="hljs-string">&#x27;2021-01-01 00:00:00&#x27;</span>,<span class="hljs-string">&#x27;01:59:59&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> addtime(<span class="hljs-string">&#x27;2021-01-01 00:00:01&#x27;</span>,<span class="hljs-string">&#x27;01:59:59&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-comment">-- DATE_ADD (date2 , INTERVAL d_value d_type )在date2中加上日期或时间</span><br><span class="hljs-comment">-- 注意: 第二个参数位置,是三部分 1) 固定关键字 interval 2) 要加的日期值 3) 日期单位 day|month|year</span><br><span class="hljs-keyword">select</span> date_add(<span class="hljs-string">&#x27;2021-01-01&#x27;</span>,<span class="hljs-type">interval</span> <span class="hljs-number">32</span> <span class="hljs-keyword">day</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> date_add(<span class="hljs-string">&#x27;2021-01-01&#x27;</span>,<span class="hljs-type">interval</span> <span class="hljs-number">10</span> <span class="hljs-keyword">month</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> date_add(<span class="hljs-string">&#x27;2021-01-01&#x27;</span>,<span class="hljs-type">interval</span> <span class="hljs-number">10</span> <span class="hljs-keyword">year</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-comment">-- DATE_SUB (date2 , INTERVAL d_value d_type ) 减</span><br><span class="hljs-keyword">select</span> date_sub(<span class="hljs-string">&#x27;2021-01-01&#x27;</span>,<span class="hljs-type">interval</span> <span class="hljs-number">1</span> <span class="hljs-keyword">day</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-comment">-- DATEDIFF (date1 ,date2 )两个日期差,date1-date2返回相差的天数,可以为负</span><br><span class="hljs-keyword">select</span> datediff(<span class="hljs-string">&#x27;2021-01-01&#x27;</span>,<span class="hljs-string">&#x27;2021-01-03&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 获取本月生日的学生的个数 (1月)</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> date_format(sbirthday,<span class="hljs-string">&#x27;%m&#x27;</span>) = date_format(sysdate(),<span class="hljs-string">&#x27;%m&#x27;</span>)<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> month(now()) = month(sbirthday)<br><br><br><span class="hljs-comment">-- 获取近30天生日的学生</span><br><span class="hljs-keyword">select</span> sname,sbirthday <span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> date_format(sbirthday,<span class="hljs-string">&#x27;%m%d&#x27;</span>)<br><span class="hljs-keyword">between</span> date_format(now(),<span class="hljs-string">&#x27;%m%d&#x27;</span>)<br><span class="hljs-keyword">and</span> date_format(date_add(now(),<span class="hljs-type">interval</span> <span class="hljs-number">30</span> DAY),<span class="hljs-string">&#x27;%m%d&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h3 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h3><table><thead><tr><th>CHARSET(str)</th><th>返回字串字符集</th></tr></thead><tbody><tr><td>CONCAT (str1[,… ])</td><td>连接字串</td></tr><tr><td>INSTR (string ,substring )</td><td>返回substring在string中出现的位置,没有返回0</td></tr><tr><td>UCASE  (string2 )</td><td>转换成大写</td></tr><tr><td>LCASE  (string2 )</td><td>转换成小写</td></tr><tr><td>LEFT  (string2 ,length )</td><td>从string2中的左边起取length个字符</td></tr><tr><td>RIGHT  (string2 ,length )</td><td>从string2中的右边起取length个字符</td></tr><tr><td>LENGTH  (string )</td><td>string长度</td></tr><tr><td>REPLACE (str ,search_str ,replace_str )</td><td>在str中用replace_str替换search_str</td></tr><tr><td>STRCMP  (string1 ,string2 )</td><td>逐字符比较两字串大小,</td></tr><tr><td>SUBSTRING (str , position [,length ])</td><td>从str的position开始,取length个字符</td></tr><tr><td>LTRIM  (string2 )   RTRIM  (string2 )   Trim(修剪)</td><td>去除前端空格或后端空格</td></tr></tbody></table><p>示例:</p><p>​            SELECT CHARSET(‘QIUSHIJU’);</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> charset(sname) <span class="hljs-keyword">from</span> stu;<br><br><span class="hljs-comment">-- CONCAT (str1[,... ])连接字串</span><br><span class="hljs-keyword">select</span> concat(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> concat(<span class="hljs-string">&#x27;我叫:&#x27;</span>,sname,’年龄:’,age) <span class="hljs-keyword">from</span> stu;<br><br><span class="hljs-comment">-- INSTR (string ,substring )返回substring在string中出现的位置,没有返回0</span><br><br><span class="hljs-comment">-- 即判断是否包含字符串</span><br><span class="hljs-keyword">select</span> instr(<span class="hljs-string">&#x27;java&#x27;</span>,<span class="hljs-string">&#x27;av&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> instr(<span class="hljs-string">&#x27;java&#x27;</span>,<span class="hljs-string">&#x27;aa&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> instr(sname,<span class="hljs-string">&#x27;三&#x27;</span>) <span class="hljs-keyword">from</span> stu;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">if</span>(instr(sname,<span class="hljs-string">&#x27;三&#x27;</span>) = <span class="hljs-number">0</span>,<span class="hljs-string">&#x27;不包含三&#x27;</span>,<span class="hljs-string">&#x27;包含三&#x27;</span> ) <span class="hljs-keyword">from</span> stu;<br><br><span class="hljs-comment">-- UCASE (string2 )转换成大写</span><br><span class="hljs-keyword">select</span> ucase(<span class="hljs-string">&#x27;smith&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> ucase(<span class="hljs-string">&#x27;爪哇&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-comment">-- LEFT (string2 ,length )从string2中的左边起取length个字符</span><br><span class="hljs-keyword">select</span> left(<span class="hljs-string">&#x27;java&#x27;</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">from</span> dual<br><br><span class="hljs-comment">-- 查询stu表中不同姓氏的人数</span><br><span class="hljs-keyword">select</span> count(<span class="hljs-keyword">distinct</span> left(sname,<span class="hljs-number">1</span>) )<span class="hljs-keyword">from</span> stu<br><span class="hljs-comment">-- RIGHT (string2 ,length )从string2中的右边起取length个字符</span><br><span class="hljs-keyword">select</span> right(<span class="hljs-string">&#x27;java&#x27;</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-comment">-- LENGTH (string )string长度,中文在utf8编码占3个,英文占1个</span><br><span class="hljs-keyword">select</span> length(sname) <span class="hljs-keyword">from</span> stu<br><span class="hljs-keyword">select</span> length(<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">from</span> dual<br><span class="hljs-comment">-- REPLACE (str ,search_str ,replace_str )在str中用replace_str替换search_str</span><br><span class="hljs-keyword">select</span> replace(<span class="hljs-string">&#x27;java&#x27;</span>,<span class="hljs-string">&#x27;av&#x27;</span>,<span class="hljs-string">&#x27;AV&#x27;</span>) <span class="hljs-keyword">from</span> dual<br><span class="hljs-keyword">select</span> replace(sname,<span class="hljs-string">&#x27;三&#x27;</span>,<span class="hljs-string">&#x27;叁&#x27;</span>) <span class="hljs-keyword">from</span> stu<br><span class="hljs-comment">-- STRCMP (str1 ,str2 )逐字符比较两字串大小,</span><br><span class="hljs-comment">-- str1 &lt; str2 返回 -1</span><br><span class="hljs-comment">-- str1 &gt; str2 返回  1</span><br><span class="hljs-comment">-- str1 = str2 返回 0  </span><br><span class="hljs-comment">-- ===&gt;  参考Java.TreeSet集合的排序算法</span><br><span class="hljs-keyword">select</span> strcmp(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-keyword">from</span> dual<br><span class="hljs-keyword">select</span> strcmp(<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">from</span> dual<br><span class="hljs-keyword">select</span> strcmp(<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-keyword">from</span> dual<br><br><span class="hljs-comment">-- SUBSTRING (str , position  [,length ])从str的position开始,取length个字符</span><br><span class="hljs-comment">-- position是位置,不是下标,即第一个字符就是1</span><br><span class="hljs-keyword">select</span> substring(<span class="hljs-string">&#x27;javabigdata&#x27;</span>,<span class="hljs-number">5</span>) <span class="hljs-keyword">from</span> dual<br><span class="hljs-keyword">select</span> substring(<span class="hljs-string">&#x27;javabigdata&#x27;</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>) <span class="hljs-keyword">from</span> dual<br><br><span class="hljs-comment">-- 滤空</span><br><span class="hljs-keyword">select</span> ltrim(<span class="hljs-string">&#x27; java &#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> rtrim(<span class="hljs-string">&#x27; java &#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> trim(<span class="hljs-string">&#x27; java &#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><br></code></pre></div></td></tr></table></figure><h3 id="字符-日期互转"><a href="#字符-日期互转" class="headerlink" title="字符-日期互转"></a>字符-日期互转</h3><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less">日期转字符串<br><span class="hljs-selector-tag">date_format</span>(date,<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>) <span class="hljs-selector-tag">--------------</span>&gt;<span class="hljs-selector-tag">oracle</span>中的<span class="hljs-selector-tag">to_char</span>();<br>字符串转日期<br>　　<span class="hljs-selector-tag">str_to_date</span>(date,<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>) <span class="hljs-selector-tag">--------------</span>&gt;<span class="hljs-selector-tag">oracle</span>中的<span class="hljs-selector-tag">to_date</span>();<br>　　%<span class="hljs-selector-tag">Y</span>：代表<span class="hljs-selector-tag">4</span>位的年份<br>　　%<span class="hljs-selector-tag">y</span>：代表<span class="hljs-selector-tag">2</span>为的年份<br>　　%<span class="hljs-selector-tag">m</span>：代表月, 格式为(<span class="hljs-number">01</span>……<span class="hljs-number">12</span>)<br>　　%<span class="hljs-selector-tag">c</span>：代表月, 格式为(<span class="hljs-number">1</span>……<span class="hljs-number">12</span>)<br>　　%<span class="hljs-selector-tag">d</span>：代表月份中的天数,格式为(<span class="hljs-number">00</span>……<span class="hljs-number">31</span>)<br>　　%<span class="hljs-selector-tag">e</span>：代表月份中的天数, 格式为(<span class="hljs-number">0</span>……<span class="hljs-number">31</span>)<br>　　%<span class="hljs-selector-tag">H</span>：代表小时,格式为(<span class="hljs-number">00</span>……<span class="hljs-number">23</span>)<br>　　%<span class="hljs-selector-tag">k</span>：代表 小时,格式为(<span class="hljs-number">0</span>……<span class="hljs-number">23</span>)<br>　　%<span class="hljs-selector-tag">h</span>： 代表小时,格式为(<span class="hljs-number">01</span>……<span class="hljs-number">12</span>)<br>　　%<span class="hljs-selector-tag">I</span>： 代表小时,格式为(<span class="hljs-number">01</span>……<span class="hljs-number">12</span>)<br>　　%<span class="hljs-selector-tag">l</span> ：代表小时,格式为(<span class="hljs-number">1</span>……<span class="hljs-number">12</span>)<br>　　%<span class="hljs-selector-tag">i</span>： 代表分钟, 格式为(<span class="hljs-number">00</span>……<span class="hljs-number">59</span>)<br>　　%<span class="hljs-selector-tag">r</span>：代表 时间,格式为<span class="hljs-selector-tag">12</span> 小时(<span class="hljs-attribute">hh</span>:<span class="hljs-attribute">mm</span>:ss [AP]M)<br>　　%<span class="hljs-selector-tag">T</span>：代表 时间,格式为<span class="hljs-selector-tag">24</span> 小时(<span class="hljs-attribute">hh</span>:<span class="hljs-attribute">mm</span>:ss)<br>　　%<span class="hljs-selector-tag">S</span>：代表 秒,格式为(<span class="hljs-number">00</span>……<span class="hljs-number">59</span>)<br>　　%<span class="hljs-selector-tag">s</span>：代表 秒,格式为(<span class="hljs-number">00</span>……<span class="hljs-number">59</span>)<br>　　<span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">DATE_FORMAT</span>(<span class="hljs-number">20130111191640</span>,<span class="hljs-string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>)<br>　　<span class="hljs-selector-tag">DATE_FORMAT</span>(<span class="hljs-number">20130111191640</span>,<span class="hljs-string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>)<br><br><span class="hljs-selector-tag">--</span> 日期到字符串<br><span class="hljs-selector-tag">select</span> <span class="hljs-selector-tag">date_format</span>(now(),<span class="hljs-string">&#x27;%Y年%m月%d日&#x27;</span>) <span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">dual</span><br><span class="hljs-selector-tag">--</span> 字符串到日期<br><span class="hljs-selector-tag">select</span> <span class="hljs-selector-tag">str_to_date</span>(<span class="hljs-string">&#x27;2021年01月11日&#x27;</span>,<span class="hljs-string">&#x27;%Y年%m月%d日&#x27;</span>) <span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">dual</span>;<br><br><span class="hljs-selector-tag">--</span> 错误 <span class="hljs-selector-tag">insert</span> <span class="hljs-selector-tag">into</span> <span class="hljs-selector-tag">student</span> (sid,sname,sbirthday) <span class="hljs-selector-tag">values</span> (<span class="hljs-number">21</span>,<span class="hljs-string">&#x27;猪八戒&#x27;</span>,<span class="hljs-string">&#x27;2021年01月01日&#x27;</span>)<br><span class="hljs-selector-tag">--</span> 正确 <span class="hljs-selector-tag">insert</span> <span class="hljs-selector-tag">into</span> <span class="hljs-selector-tag">student</span> (sid,sname,sbirthday) <span class="hljs-selector-tag">values</span> (<span class="hljs-number">21</span>,<span class="hljs-string">&#x27;猪八戒&#x27;</span>,<span class="hljs-string">&#x27;2021-01-01&#x27;</span>)(正确格式)<br><br><span class="hljs-selector-tag">insert</span> <span class="hljs-selector-tag">into</span> <span class="hljs-selector-tag">student</span> (sid,sname,sbirthday) <span class="hljs-selector-tag">values</span> (<span class="hljs-number">21</span>,<span class="hljs-string">&#x27;猪八戒&#x27;</span>,str_to_date(<span class="hljs-string">&#x27;2021年01月01日&#x27;</span>,<span class="hljs-string">&#x27;%Y年%m月%d日&#x27;</span>))<br><span class="hljs-selector-tag">insert</span> <span class="hljs-selector-tag">into</span> <span class="hljs-selector-tag">student</span> (sbirthday) <span class="hljs-selector-tag">values</span> (str_to_date(<span class="hljs-string">&#x27;2021年01月01日&#x27;</span>,<span class="hljs-string">&#x27;%Y年%m月%d日&#x27;</span>))<br><br></code></pre></div></td></tr></table></figure><h3 id="数学相关函数"><a href="#数学相关函数" class="headerlink" title="数学相关函数"></a>数学相关函数</h3><table><thead><tr><th>ABS  (number2)</th><th>绝对值</th></tr></thead><tbody><tr><td>BIN  (decimal_number )</td><td>十进制转二进制</td></tr><tr><td>CEILING  (number2 )</td><td>向上取整</td></tr><tr><td>CONV(number2,from_base,to_base)</td><td>进制转换</td></tr><tr><td>FLOOR  (number2 )</td><td>向下取整</td></tr><tr><td>FORMAT (number,decimal_places )</td><td>保留小数位数</td></tr><tr><td>HEX  (DecimalNumber )</td><td>转十六进制</td></tr><tr><td>LEAST  (number , number2 [,..])</td><td>求最小值</td></tr><tr><td>MOD  (numerator ,denominator )</td><td>求余</td></tr><tr><td>RAND([seed])</td><td>RAND([seed])</td></tr><tr><td>round(x[,d])</td><td>四舍五入</td></tr></tbody></table><p>示例:</p><p>SELECT ABS(-101);</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-comment">-- abs(x) 取绝对值</span><br><span class="hljs-keyword">select</span> abs(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> dual<br><span class="hljs-keyword">select</span> abs(<span class="hljs-number">-1</span>) <span class="hljs-keyword">from</span> dual<br><br><span class="hljs-comment">-- CEILING (number2 )向上取整</span><br><span class="hljs-keyword">select</span> ceiling(<span class="hljs-number">11.1</span>) <span class="hljs-keyword">from</span> dual;<br><br><span class="hljs-comment">-- FLOOR (number2 )向下取整</span><br><span class="hljs-keyword">select</span> floor(<span class="hljs-number">11.1</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> floor(<span class="hljs-number">-11.1</span>) <span class="hljs-keyword">from</span> dual;<br><br><span class="hljs-comment">-- FORMAT (number,decimal_places )保留小数位数,保留时会四舍五入</span><br><span class="hljs-keyword">select</span> format(<span class="hljs-number">99.12645</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> format(score,<span class="hljs-number">2</span>) <span class="hljs-keyword">from</span> stu <br><span class="hljs-keyword">select</span> format(score,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> stu <br><br><span class="hljs-comment">-- 随机数,产生0-1之间随机数</span><br><span class="hljs-keyword">select</span> rand() <span class="hljs-keyword">from</span> dual;<br><br><span class="hljs-comment">-- 种子,会根据种子计算出一个随机数.但多次运行种子一样,结果一样</span><br><span class="hljs-keyword">select</span> rand(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> dual;<br><br><span class="hljs-comment">-- round(x) 四舍五入</span><br><span class="hljs-keyword">select</span> round(<span class="hljs-number">1.1</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> round(<span class="hljs-number">1.5</span>) <span class="hljs-keyword">from</span> dual;<br><br><span class="hljs-comment">-- round(x,d) 四舍五入,保留d位小数</span><br><span class="hljs-keyword">select</span> round(<span class="hljs-number">1.1234</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> round(<span class="hljs-number">1.1254</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">from</span> dual;<br><br><span class="hljs-comment">-- 使用mysql函数,产生0-10之间的随机数</span><br><span class="hljs-keyword">select</span> round(rand()*<span class="hljs-number">10</span>) <span class="hljs-keyword">from</span> dual<br><br></code></pre></div></td></tr></table></figure><h1 id="事务transaction-–-TX"><a href="#事务transaction-–-TX" class="headerlink" title="事务transaction – TX"></a>事务transaction – TX</h1><p>需求：有一张银行账户表,有a用户给b用户转账.A账户钱减少,b账户钱增加.但是当a账户钱减少时,断电了,B账                    户并没有增加钱.</p><p>解决方案：a减少钱，但是不要立即修改数据表，b的钱增加之后，同时修改表。</p><p>事务：</p><p>​            　　 <strong>事务指逻辑上的一组操作，组成这组操作的各个单元，要么全部成功，要么全部不成功。</strong></p><p>演示:</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `account` (<br> `id` <span class="hljs-type">int</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br> `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br> `money` <span class="hljs-type">int</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> account <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> account <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">1000</span>);<br><br>修改a的钱<br>Update account <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-1000</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>此时退出mysql,再次进去查看b账户的钱.没有增加<br></code></pre></div></td></tr></table></figure><h1 id="１、Mysql中的事务"><a href="#１、Mysql中的事务" class="headerlink" title="１、Mysql中的事务"></a>１、Mysql中的事务</h1><p>a、<code>mysql引擎</code>是支持事务的（<code>默认引擎InnoDB</code>）</p><p>b、<strong>mysql默认自动提交事务</strong>。每条语句都处在单独的事务中。</p><p><strong>查看当前数据库事务的提交方式</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">SHOW </span>VARIABLES<span class="hljs-comment">; [like ‘autocommit’]</span><br></code></pre></div></td></tr></table></figure><p><strong>查看当前数据库事务的提交方式</strong></p><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs llvm"><span class="hljs-keyword">select</span> @<span class="hljs-title">@autocommit</span><span class="hljs-comment">; 0是手动提交,1是自动提交</span><br></code></pre></div></td></tr></table></figure><p><strong>设置当前数据库的提交方式</strong></p><figure class="highlight dart"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dart"><span class="hljs-keyword">set</span> @<span class="hljs-meta">@autocommit</span> = <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>　　 看到是<code>autocommit on </code>开启自动提交</p><p>　　 手动关闭：<code>set autocommit = off</code>  / 或者= 0</p><p>　　 再演示：直接修改数据,在别的窗口可以查看效果,数据没有修改.需要手动处理：<strong>提交或回滚</strong></p><p>c、手动控制事务</p><ol><li><p><strong>开启事务：</strong><code>start transaction</code> | <code>begin</code></p></li><li><p><strong>提交事务：</strong><code>commit</code></p></li><li><p><strong>回滚事务：</strong><code>rollback</code></p></li><li><p><strong>手动回滚：</strong></p><p>​                    BEGIN; – 开启事务</p><p>​                    UPDATE account SET money=money-100 WHERE <code>name</code>=’张三’;</p><p>​                    ROLLBACK; – 回滚,数据不会变动</p></li></ol><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-comment">-- =================== 原始数据 ======================</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `account` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `<span class="hljs-type">name</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `<span class="hljs-type">money</span>` <span class="hljs-type">int</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>) ENGINE=InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET=utf8;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> account <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> account <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">1000</span>);<br><span class="hljs-comment">-- ================== 默认事务 ==================</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> mysql默认每句sql都是处于事务,自动开启,提交.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- 查看当前提交方式</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;autocommit&#x27;</span><br><br><span class="hljs-comment">-- A向B转账100</span><br><span class="hljs-comment">-- A减少100</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> - <span class="hljs-number">100</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span>;<br><span class="hljs-comment">-- B增加100</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> + <span class="hljs-number">100</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">-- =============== 手动控制事务 ================</span><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;<br><span class="hljs-comment">-- A减少100</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> - <span class="hljs-number">100</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">-- 假如此处出现事故,下个语句不执行,可以执行rollback回滚数据</span><br><span class="hljs-comment">-- B增加100</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> + <span class="hljs-number">100</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">commit</span>;<br><br><span class="hljs-comment">-- 出错,可以回滚</span><br><span class="hljs-keyword">rollback</span>;<br></code></pre></div></td></tr></table></figure><h1 id="2、事务的特性（ACID）（面试题）"><a href="#2、事务的特性（ACID）（面试题）" class="headerlink" title="2、事务的特性（ACID）（面试题）"></a>2、事务的特性（ACID）（面试题）</h1><p><strong>原子性</strong>（Atomicity）：指事务的整个操作是一个整体，要么都成功,要么都失败</p><p><strong>一致性</strong>（Consistency）：事务必须使数据库从一个一致性状态变换到另外一个一致性状态。转账前和转账后的总金额不变。</p><p>事务必须要保持和系统处于一致的状态（如果不一致会导致系统其它的方出现bug）</p><p><strong>隔离性</strong>（Isolation）：事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</p><p>=&gt;  讲解:一个事务A开始事务,修改a表数据,自己查询数据,已经修改</p><p>=&gt;  另外开启一个事务B:操作同一个表-&gt; 修改a表其他列数据,自己查看已经修改</p><p>=&gt;  但是A事务再查表数据,并未看见B事务做出的修改.同样B事务也看不见A事务做出的修改.</p><p><strong>持久性</strong>（Durability）：指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</p><h1 id="3、事务的隔离级别"><a href="#3、事务的隔离级别" class="headerlink" title="3、事务的隔离级别"></a>3、事务的隔离级别</h1><p>隔离级别:</p><p>　　 数据库通过设置事务的<strong>隔离级别</strong>防止以上情况的发生：</p><p>1、<strong>读未提交</strong> - <code>DUNCOMMITTED</code>：赃读、不可重复读、虚读都有可能发生。</p><p>2、<strong>读已提交</strong> - <code>READ COMMITTED</code>： 避免赃读。不可重复读、虚读都有可能发生。（oracle默认的）</p><p>3、<strong>可重复读</strong> - <code>REPEATABLE READ</code>：避免赃读、不可重复读。虚读有可能发生。（<strong>mysql</strong>默认）</p><p>4、<strong>串行化</strong> - <code>SERIALIZABLE</code>：避免赃读、不可重复读、虚读。(<strong>级别最高</strong>)</p><hr><p><strong>MySQL的隔离级别的作用就是让事务之间互相隔离，互不影响，这样可以保证事务的一致性。</strong></p><p>　　 隔离<strong>级别比较</strong>：可串行化&gt;可重复读&gt;读已提交&gt;读未提交</p><p>　　 隔离级别对性能的<strong>影响</strong>比较：可串行化&gt;可重复读&gt;读已提交&gt;读未提交</p><p>　　 由此看出，隔离级别越高，所需要消耗的MySQL性能越大（如事务并发严重性），为了平衡二者，一般建议设置的隔离级别为可重复读(REPEATABLE READ).</p><hr><p>　　 不同的隔离级别产生如下情况:</p><p><strong>赃读</strong>：指一个事务读取了另一个事务未提交的数据。</p><p><strong>不可重复读</strong>：在一个事务内读取表中的某一行数据，多次读取结果不同。一个事务读取到了另一个事务提交后的数据。（update）</p><p><strong>虚读</strong>（幻读）：是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。       (insert)</p><blockquote><p>脏读: </p><p>​            对于两个事物 T1, T2, T1 读取了已经被 T2 更新但还没有被提交的字段.</p><p>​            之后, 若 T2 回滚, T1读取的内容就是临时且无效的.</p><p>不可重复读: </p><p>​            对于两个事物 T1, T2, T1 读取了一个字段, 然后 T2 更新了该字段.</p><p>​            之后, T1再次读取同一个字段, 值就不同了.</p><p>幻读: </p><p>​            对于两个事物 T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中</p><p>​            插入了一些新的行. 之后, 如果 T1 再次读取同一个表, 就会多出几行.</p></blockquote><hr><p>　　 以上四种隔离级别最高的是<code>Serializable</code>级别，最低的是<code>Read uncommitted</code>级别，当然级别越高，执行效率就越低。像<code>Serializable</code>这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。<strong>在MySQL数据库中默认的隔离级别为<code>Repeatable read</code> (可重复读)。</strong></p><hr><p>　　 mysql中：</p><p><strong>查看</strong>当前的事务隔离级别：<code>SELECT @@TX_ISOLATION;</code></p><p><strong>更改</strong>当前的事务隔离级别：<code>SET [glogal | session] TRANSACTION ISOLATION LEVEL 四个级别之一</code></p><p style="font-family:arial; color:red;">设置隔离级别必须在事务之前<hr><p>案例演示：</p><p>Navicat演示隔离级别效果</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-comment">-- ================== 默认事务 ==================</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> mysql默认每句sql都是处于事务,自动开启,提交.</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 查看当前提交方式</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;autocommit&#x27;</span><br><span class="hljs-comment">-- A向B转账100</span><br><span class="hljs-comment">-- A减少100</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> - <span class="hljs-number">100</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span>;<br><span class="hljs-comment">-- B增加100</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> + <span class="hljs-number">100</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">2</span>;<br><br><br><span class="hljs-comment">-- =============== 手动控制事务 ================</span><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;<br><br><span class="hljs-comment">-- A减少100</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> - <span class="hljs-number">100</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span>;<br><span class="hljs-comment">-- 假如此处出现事故,,下个语句不执行,可以执行rollback回滚数据</span><br><span class="hljs-comment">-- B增加100</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> + <span class="hljs-number">100</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">commit</span>;<br><br><span class="hljs-comment">-- 出错,可以回滚</span><br><span class="hljs-keyword">rollback</span>;<br><br><br><span class="hljs-comment">-- ====================== 隔离级别,以及对应的bug ================</span><br><span class="hljs-comment">-- 查看当前的事务隔离级别：</span><br><span class="hljs-keyword">SELECT</span> @@TX_ISOLATION;<br><br><span class="hljs-comment">-- 修改隔离级别</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> <span class="hljs-keyword">TRANSACTION</span> <span class="hljs-keyword">ISOLATION</span> <span class="hljs-keyword">LEVEL</span> <span class="hljs-keyword">REPEATABLE</span> <span class="hljs-keyword">READ</span><br><span class="hljs-comment">-- ======&gt; 一,设置级别为读未提交</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> <span class="hljs-keyword">TRANSACTION</span> <span class="hljs-keyword">ISOLATION</span> <span class="hljs-keyword">LEVEL</span> <span class="hljs-keyword">READ</span> <span class="hljs-keyword">UNCOMMITTED</span>;<br><span class="hljs-comment">-- ======&gt; 二,设置级别为读已提交</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> <span class="hljs-keyword">TRANSACTION</span> <span class="hljs-keyword">ISOLATION</span> <span class="hljs-keyword">LEVEL</span> <span class="hljs-keyword">READ</span> <span class="hljs-keyword">COMMITTED</span>;<br><span class="hljs-comment">-- ======&gt; 三,设置级别为可重复读</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> <span class="hljs-keyword">TRANSACTION</span> <span class="hljs-keyword">ISOLATION</span> <span class="hljs-keyword">LEVEL</span> <span class="hljs-keyword">REPEATABLE</span> <span class="hljs-keyword">READ</span>;<br><span class="hljs-comment">-- ======&gt; 三,设置级别为可重复读</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> <span class="hljs-keyword">TRANSACTION</span> <span class="hljs-keyword">ISOLATION</span> <span class="hljs-keyword">LEVEL</span> <span class="hljs-keyword">SERIALIZABLE</span>;<br><br><span class="hljs-comment">-- 开事务</span><br><span class="hljs-keyword">begin</span>;<br><br><span class="hljs-comment">-- 改数据</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> - <span class="hljs-number">100</span> <span class="hljs-keyword">where</span> id =<span class="hljs-number">1</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> account <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;赵六&#x27;</span>,<span class="hljs-number">1000</span>);<br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">commit</span>;<br></code></pre></div></td></tr></table></figure><h1 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a><strong>锁机制</strong></h1><p>　　 <strong>Innodb默认是行锁,但是在事务(增删改)中，没有使用到索引，那么系统会自动升级会表锁，</strong></p><p><strong>行锁：事务开始后，其他用户不能操作该行数据</strong></p><p><strong>表锁：事务开始后,其他用户不能操作这张表</strong></p><hr>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常见集合的默认大小及扩容机制</title>
    <link href="/2021/07/29/Java%E5%B8%B8%E8%A7%81%E9%9B%86%E5%90%88%E7%9A%84%E9%BB%98%E8%AE%A4%E5%A4%A7%E5%B0%8F%E5%8F%8A%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/07/29/Java%E5%B8%B8%E8%A7%81%E9%9B%86%E5%90%88%E7%9A%84%E9%BB%98%E8%AE%A4%E5%A4%A7%E5%B0%8F%E5%8F%8A%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="ArrayList-和-HashMap的默认大小以及扩容机制"><a href="#ArrayList-和-HashMap的默认大小以及扩容机制" class="headerlink" title="ArrayList 和 HashMap的默认大小以及扩容机制"></a>ArrayList 和 HashMap的默认大小以及扩容机制</h2><p>这里要讨论这些常用的默认初始容量和扩容的原因是：</p><p>当底层实现涉及到扩容时，容器或重新分配一段更大的连续内存（如果是离散分配则不需要重新分配，离散分配都是插入新元素时动态分配内存），要将容器原来的数据全部复制到新的内存上，</p><p>这无疑使效率大大降低。加载因子的系数小于等于1，意指即当元素个数超过容量长度*加载因子的系数时，进行扩容。另外，扩容也是有默认的倍数的，不同的容器扩容情况不同。</p><ul><li>List 元素是有序的、可重复</li></ul><blockquote><p><strong>ArrayList、Vector默认初始容量为10</strong></p><p><strong>Vector：</strong>线程安全，但速度慢</p><p>　　　　底层数据结构是数组结构</p><p>　　　　加载因子为1：即当 元素个数 超过 容量长度 时，进行扩容</p><p>　　　　扩容增量：原容量的 1倍</p><p>　　　　　　如 Vector的容量为10，一次扩容后是容量为20</p><p><strong>ArrayList：</strong>线程不安全，查询速度快</p><p>　　　　底层数据结构是数组结构</p><p>　　　　扩容增量：原容量的 0.5倍+1</p><p>　　　　　　如 ArrayList的容量为10，一次扩容后是容量为16</p></blockquote><ul><li>Set(集) 元素无序的、不可重复</li></ul><blockquote><p><strong>HashSet：</strong>线程不安全，存取速度快</p><p>　　　　　底层实现是一个HashMap（保存数据），实现Set接口</p><p>　　　　　默认初始容量为16（为何是16，见下方对HashMap的描述）</p><p>　　　　　加载因子为0.75：即当 元素个数 超过 容量长度的0.75倍 时，进行扩容</p><p>　　　　　扩容增量：原容量的 1 倍</p><p>　　　　　　如 HashSet的容量为16，一次扩容后是容量为32</p></blockquote><ul><li>Map是一个双列集合</li></ul><blockquote><p><strong>HashMap：默认初始容量为16</strong></p><p>　　　　　（为何是16：16是2^4，可以提高查询效率，另外，32=16&lt;&lt;1）</p><p>　　　　　加载因子为0.75：即当 元素个数 超过 容量长度的0.75倍 时，进行扩容</p><p>　　　　　扩容增量：原容量的 1 倍</p><p>　　　　　　如 HashSet的容量为16，一次扩容后是容量为32</p></blockquote><hr><h2 id="ArrayList的JDK1-8之前与之后的实现区别？"><a href="#ArrayList的JDK1-8之前与之后的实现区别？" class="headerlink" title="ArrayList的JDK1.8之前与之后的实现区别？"></a>ArrayList的JDK1.8之前与之后的实现区别？</h2><p> JDK1.7：ArrayList像饿汉式，直接创建一个初始容量为10的数组 </p><p> JDK1.8：ArrayList像懒汉式，一开始创建一个长度为0的数组，当添加第一个元 素时再创建一个始容量为10的数组</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>集合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用类(二)</title>
    <link href="/2021/07/25/Java%E5%B8%B8%E7%94%A8%E7%B1%BB(%E4%BA%8C)/"/>
    <url>/2021/07/25/Java%E5%B8%B8%E7%94%A8%E7%B1%BB(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><hr><p>将基本数据类型包装成类，即包装类。</p><p>把基本数据类型包装成类，是因为</p><p>​        <strong>1)   变为类，就可以定义属性，方法等，功能性增强</strong></p><p>​        <strong>2)   用来和字符串之间的互相转换（常用操作）</strong></p> <br><table><thead><tr><th align="left">基本类型</th><th>包装类</th></tr></thead><tbody><tr><td align="left"><code>byte</code></td><td><code>Byte</code></td></tr><tr><td align="left"><code>short</code></td><td><code>Short</code></td></tr><tr><td align="left"><code>int</code></td><td><code>Integer</code></td></tr><tr><td align="left"><code>long</code></td><td><code>Long</code></td></tr><tr><td align="left"><code>float</code></td><td><code>Float</code></td></tr><tr><td align="left"><code>double</code></td><td><code>Double</code></td></tr><tr><td align="left"><code>boolean</code></td><td><code>Boolean</code></td></tr><tr><td align="left"><code>char</code></td><td><code>Character</code></td></tr></tbody></table><br><p>八个包装类中的方法基本类似，以Integer为例讲解演示方法</p><hr><table><thead><tr><th>属性/字段(field)</th><th></th></tr></thead><tbody><tr><td><code>static int</code></td><td>[MAX_VALUE] 值为 2 <sup>31</sup>－1  的常量，它表示 <code>int</code> 类型能够表示的最大值。</td></tr><tr><td><code>static int</code></td><td>[MIN_VALUE] 值为  -2 <sup>31</sup>  的常量，它表示 <code>int</code> 类型能够表示的最小值。</td></tr></tbody></table><br><table><thead><tr><th>构造方法</th><th></th></tr></thead><tbody><tr><td><code>Integer(int value)</code></td><td>构造一个新分配的 <code>Integer</code> 对象，它表示指定的 <code>int</code> 值。</td></tr><tr><td><code>Integer(String s)</code></td><td>构造一个新分配的 <code>Integer</code> 对象，它表示 <code>String</code> 参数所指示的 <code>int</code> 值。</td></tr></tbody></table><p>Test :</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//通过基本类型创建出包装类对象</span><br>Integer i = <span class="hljs-keyword">new</span> Ineger(<span class="hljs-number">1</span>);<br>System.out.println(i);<br><br><span class="hljs-comment">//通过字符串创建出包装类对象,一定要和对应的数据类型一致</span><br>Integer i2 = <span class="hljs-keyword">new</span> Integer(<span class="hljs-string">&quot;222&quot;</span>)<br>System.out.println(i2);<br></code></pre></div></td></tr></table></figure><p><strong>方法</strong>  : </p><table><thead><tr><th>方法返回值</th><th></th></tr></thead><tbody><tr><td><code> int</code></td><td><code>intValue()</code>      以 <code>int</code>类型返回该 <code>Integer</code> 的值。</td></tr><tr><td><code>static int</code></td><td><code>parseInt(String s)</code>      将字符串参数作为有符号的十进制整数进行解析</td></tr><tr><td><code>String</code></td><td><code>toString()</code>      返回一个表示该 <code>Integer</code> 值的 <code>String</code>  对象。</td></tr><tr><td><code>static </code> <code>String</code></td><td><code>toString(int i)</code>      返回一个表示指定整数的 <code>String</code>  对象。</td></tr><tr><td><code>Integer</code></td><td><code>valueOf(int i)</code>       返回一个表示指定的 <code>int</code> 值的 <code>Integer</code> 实例。</td></tr><tr><td><code>static Integer</code></td><td><code>valueOf(String s)</code>      返回保存指定的 <code>String</code>  的值的 <code>Integer</code> 对象</td></tr></tbody></table><br><p><strong>包装类转换图 :</strong></p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211105211834.png" style="zoom:80%;" /><br><p><strong>测试方法  :</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Integer i = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">111</span>);<br><br><span class="hljs-comment">// 返回包装类这的基本类型数值</span><br><span class="hljs-keyword">int</span> intValue = i.intValue();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解析字符串为基本类型 </span><br><span class="hljs-comment"> * int parseInt(String s);</span><br><span class="hljs-comment"> *   纯数字字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">int</span> parseInt = Integer.parseInt(<span class="hljs-string">&quot;1&quot;</span>);<br>System.out.println(parseInt);<br><br><span class="hljs-comment">// toString() 将对象内容以字符串返回 --&gt; 将包装类变成String</span><br>String string = i.toString();<br><br><span class="hljs-comment">// static toString(int i);</span><br><span class="hljs-comment">// 静态方法,直接将基本类型转成String</span><br>String string2 = Integer.toString(<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// Integer valueOf(int i) 将基本类型转成包装类</span><br>Integer j = i.valueOf(<span class="hljs-number">123</span>);<br><br><span class="hljs-comment">// static Integer  valueOf(String s); </span><br><span class="hljs-comment">// 将字符串转成包装类</span><br>Integer valueOf = Integer.valueOf(<span class="hljs-string">&quot;123&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 装箱</span><br><span class="hljs-comment"> * 拆箱</span><br><span class="hljs-comment"> */</span><br>Integer a = <span class="hljs-number">1</span>; <span class="hljs-comment">// 装箱, 等价于 = new Integer(1)</span><br><span class="hljs-keyword">int</span> b = a;     <span class="hljs-comment">// 拆箱, 等价于 a.intValue();</span><br><br></code></pre></div></td></tr></table></figure><hr><h3 id="Character类"><a href="#Character类" class="headerlink" title="Character类"></a>Character类</h3><blockquote><p>该类主要用于单个字符的甄别和操作. 无法与String类之间直接相互转换。</p><p>该类提供了几种方法，以确定字符的类别（小写字母，数字，等等），</p><p>并将字符从大写转换成小写，反之亦然。</p></blockquote><br><p><strong>方法  :</strong></p><p><strong>该类没有parseXxx方法,无法将字符串解析为String.</strong></p><table><thead><tr><th>方法返回值</th><th></th></tr></thead><tbody><tr><td><code>char</code></td><td><code>charValue()</code>      返回此 <code>Character</code> 对象的值。</td></tr><tr><td><code>static boolean</code></td><td><code>isDigit(char ch)</code>       确定指定字符是否为数字。</td></tr><tr><td><code>static</code> <code>boolean</code></td><td><code>isLetter(char ch)</code>       确定指定字符是否为字母。</td></tr><tr><td><code>static boolean</code></td><td><code>isLowerCase(char ch)</code>       确定指定字符是否为小写字母</td></tr><tr><td><code>static boolean</code></td><td><code>isUpperCase(char ch)</code>      确定指定字符是否为大写字母。</td></tr><tr><td><code>static char</code></td><td><code>toLowerCase(char ch)</code>       使用取自 UnicodeData 文件的大小写映射信息将字符参数转换为小写。</td></tr><tr><td><code>static char</code></td><td><code>toUpperCase(char ch)</code>      使用取自 UnicodeData 文件的大小写映射信息将字符参数转换为大写。</td></tr><tr><td><code>static Character</code></td><td><code>valueOf(char c)</code>      返回一个表示指定 <code>char</code> 值的  <code>Character</code> 实例。</td></tr></tbody></table><br><p><strong>测试方法  :</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Character ch = <span class="hljs-string">&#x27;a&#x27;</span>; <span class="hljs-comment">// 装箱, new Character(char) 或者 Character.valueOf(char)</span><br>                   <br><span class="hljs-keyword">char</span> a = ch;  <span class="hljs-comment">// 拆箱 等价于, ch.charValue()</span><br><br>System.out.println(Character.isDigit(<span class="hljs-string">&#x27;1&#x27;</span>));<span class="hljs-comment">// 是否是数字</span><br>System.out.println(Character.isLetter(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">// 是否是字母</span><br>System.out.println(Character.isUpperCase(<span class="hljs-string">&#x27;A&#x27;</span>));<span class="hljs-comment">// 是否是大写字母</span><br>System.out.println(Character.isLowerCase(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">// 是否是小写字母</span><br><br>System.out.println(Character.toUpperCase(<span class="hljs-string">&#x27;a&#x27;</span>));<br>System.out.println(Character.toLowerCase(<span class="hljs-string">&#x27;A&#x27;</span>));<br></code></pre></div></td></tr></table></figure><hr><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a><strong>Math类</strong></h3><p>是<code>java.lang</code>包的，不需要导包</p><p style="font-family:arial; color:red;">        该类所有方法属性都是静态，所有该类将构造方法私有，禁止创建对象.<img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211105213021.png" style="zoom: 50%;" /><p><strong>方法  :</strong></p><table><thead><tr><th>方法返回值</th><th></th></tr></thead><tbody><tr><td><code>static double </code></td><td><code>abs(double a)</code>         返回 double 值的<strong>绝对值</strong>。</td></tr><tr><td><code>static double </code></td><td><code>ceil(double a)</code>        <strong>//天花板,向上取整</strong>        返回最小的（最接近负无穷大）double 值，该值大于等于参数，并等于某个整数。</td></tr><tr><td><code>static double</code></td><td><code>floor(double a)</code>      <strong>//地板,向下取整</strong>        返回最大的（最接近正无穷大）double 值，该值小于等于参数，并等于某个整数。</td></tr><tr><td><code>static double</code></td><td><code>pow(double a, double b)</code>    <strong>//次幂</strong>     返回第一个参数的第二个参数次幂的值。</td></tr><tr><td><code>static double</code></td><td><code>random()</code>              <strong>// 随机数</strong>        返回带正号的 double 值，该值大于等于 0.0 且小于 1.0。</td></tr><tr><td><code>static long</code></td><td><code>round(double a)</code>   <strong>// 四舍五入</strong>        返回最接近参数的 long。</td></tr></tbody></table><br><p><strong>方法测试  :</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>System.out.println(Math.abs(-<span class="hljs-number">1</span>));<br><br>System.out.println(Math.ceil(<span class="hljs-number">11.1</span>));<br>System.out.println(Math.ceil(-<span class="hljs-number">11.1</span>));<br>System.out.println(Math.floor(<span class="hljs-number">11.1</span>));<br>System.out.println(Math.floor(-<span class="hljs-number">11.1</span>));<br><br>System.out.println(Math.pow(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>));<br>System.out.println(Math.pow(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>System.out.println(Math.pow(<span class="hljs-number">4</span>, <span class="hljs-number">0.5</span>));<br><br>System.out.println(Math.random());<br><br>System.out.println(Math.round(<span class="hljs-number">1.1</span>));<br>System.out.println(Math.round(<span class="hljs-number">1.5</span>));<br><br>System.out.println(Math.round(Math.random() * <span class="hljs-number">10</span>));<br><br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><br><table><thead><tr><th>方法返回值</th><th></th></tr></thead><tbody><tr><td><code>static void</code></td><td><code>arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</code>      从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。</td></tr><tr><td><code>static long</code></td><td><code>currentTimeMillis()</code>         返回以毫秒为单位的当前时间。</td></tr></tbody></table><hr><h3 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h3><br><p>构造方法</p><blockquote><p>public Random()    </p><p>该对像调用 <code>nextInt()</code> 每次值都不一样</p><p>public Random(long seed)，以指定种子开始计算随机数</p><p>该对像调用 <code>nextInt()</code> 每次值一样，因为每次种子都一样</p></blockquote><br><table><thead><tr><th>方法返回值</th><th></th></tr></thead><tbody><tr><td>int</td><td>nextInt)(int n)           返回一个伪随机数，它是取自此随机数生成器序列的、在 0（包括）和指定值（不包括）之间均匀分布的 int 值。</td></tr></tbody></table><br><p><strong>测试方法  :</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 空参构造,每次都会创建随机数</span><br>Random random = <span class="hljs-keyword">new</span> Random(); <span class="hljs-comment">// 创建随机数生成器</span><br><span class="hljs-keyword">int</span> nextInt = random.nextInt(); <span class="hljs-comment">// 调用方法,让随机数生成器产生随机数</span><br>System.out.println(nextInt);<br><br>System.out.println(<span class="hljs-string">&quot;------------&quot;</span>);<br><br><span class="hljs-comment">// 有参构造,会根据种子创建随机数,但是种子不变随机数不变</span><br>Random random2 = <span class="hljs-keyword">new</span> Random(-<span class="hljs-number">1000</span>); <span class="hljs-comment">// 创建随机数生成器</span><br><span class="hljs-keyword">int</span> nextInt2 = random2.nextInt(); <span class="hljs-comment">// 调用方法,让随机数生成器产生随机数</span><br>System.out.println(nextInt2);<br><br><span class="hljs-keyword">int</span> i = random.nextInt(<span class="hljs-number">10</span>);<span class="hljs-comment">// 产生0-9的随机数</span><br>System.out.println(i);<br><br><span class="hljs-comment">// 摇骰子</span><br>System.out.println(random.nextInt(<span class="hljs-number">6</span>) + <span class="hljs-number">1</span>);<br></code></pre></div></td></tr></table></figure><hr><h3 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h3><br><p>​        可以表示年月日时分秒，毫秒。也可以单独获得，设置年月日时分秒.</p><p>​        但是该类大部分都过时（过时,是不建议用,但是可以使用）</p><br><table><thead><tr><th align="left">构造方法</th></tr></thead><tbody><tr><td align="left"><code>Date()</code>         分配 <code>Date</code> 对象并初始化此对象，以表示分配它的时间（精确到毫秒）。</td></tr><tr><td align="left"><code>Date(long date)</code>         分配 Date 对象并初始化此对象，以表示自从标准基准时间（称为“ 历元（epoch）”，即 1970 年 1 月 1 日 00:00:00 GMT）以来的指定毫秒数。</td></tr></tbody></table><br><p><strong>测试构造方法  :</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 默认当前时间</span><br>Date date = <span class="hljs-keyword">new</span> Date();<br>System.out.println(date);<br><br><span class="hljs-comment">// 指定毫秒值创建时间</span><br>Date date2 = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>);<br>System.out.println(date2);<br><br><span class="hljs-comment">// 废弃,过时方法也可以用,只是不建议用</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * year - 1900</span><br><span class="hljs-comment"> * month 0-11</span><br><span class="hljs-comment"> */</span><br>Date date3 = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">100</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>System.out.println(date3);<br>&#125;<br></code></pre></div></td></tr></table></figure><br><table><thead><tr><th>方法返回值</th><th></th></tr></thead><tbody><tr><td><code>long</code></td><td><code>getTime()</code>         返回自 1970 年 1 月 1 日 00:00:00  GMT 以来此 Date 对象表示的毫秒数。</td></tr><tr><td><code>void</code></td><td><code>setTime(long time)</code>      设置此 Date 对象，以表示 1970 年 1 月 1 日 00:00:00 GMT 以后 time 毫秒的时间点。</td></tr><tr><td><code>boolean  </code></td><td><code>after(Date  when)</code>        测试此日期是否在指定日期之后。</td></tr><tr><td><code>boolean</code></td><td><code>before(Date  when)</code>       测试此日期是否在指定日期之前。</td></tr></tbody></table><br><p><strong>测试方法  :</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Date date1 = <span class="hljs-keyword">new</span> Date(); <span class="hljs-comment">// 2021</span><br>Date date2 = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">1</span>);<span class="hljs-comment">// 1970</span><br><br><span class="hljs-comment">// date1是否在date2之后</span><br>System.out.println(date1.after(date2)); <br><br><span class="hljs-comment">// date1是否在date2之前</span><br>System.out.println(date1.before(date2)); <br><br><span class="hljs-comment">// 获得毫秒值</span><br>System.out.println(date1.getTime());<br><br><span class="hljs-comment">// 设置毫秒值</span><br>date2.setTime(<span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>);<br>System.out.println(date2);<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><p><code>java.util</code> 包，使用时需要导包</p><p>该类是抽象类，不能创建对象，但是</p><p><code>Calendar</code> 提供了一个类方法 <code>getInstance</code>，以获得此类型的一个通用的对象.</p><p>该类提供了一系列静态常量字段（field）来获得和设置时间.</p><br><p><strong>属性  ：</strong></p><table><thead><tr><th>返回值</th><th></th></tr></thead><tbody><tr><td><code>static int</code></td><td><code>YEAR</code>         指示年的 <code>get</code> 和 <code>set</code> 的字段数字。</td></tr><tr><td><code>static int</code></td><td><code>MONTH</code>         指示月份的 <code>get</code> 和 <code>set</code> 的字段数字。</td></tr><tr><td><code>static int</code></td><td><code>DATE         </code>         <code>get</code> 和 <code>set</code> 的字段数字，指示一个月中的某天。</td></tr><tr><td><code>static int</code></td><td><code>DAY_OF_MONTH</code>         <code>get</code>  和 <code>set</code> 的字段数字，指示一个月中的某天。</td></tr><tr><td><code>static int</code></td><td><code>HOUR         </code>         <code>get</code> 和 <code>set</code> 的字段数字，指示上午或下午的小时。</td></tr><tr><td><code>static int</code></td><td><code>HOUR_OF_DAY</code>         <code>get</code>  和 <code>set</code> 的字段数字，指示一天中的小时。</td></tr><tr><td><code>static int</code></td><td><code>SECOND</code>         <code>get</code>  和 <code>set</code> 的字段数字，指示一分钟中的秒</td></tr><tr><td><code>static int</code></td><td><code>DAY_OF_WEEK</code>         <code>get</code>  和 <code>set</code> 的字段数字，指示一个星期中的某天</td></tr></tbody></table><br><p><strong>方法  :</strong></p><table><thead><tr><th>返回值</th><th></th></tr></thead><tbody><tr><td><code> int</code></td><td><code>get(int field)</code>      返回给定日历字段的值</td></tr><tr><td><code> void</code></td><td><code>set(int field,  int value)</code>      将给定的日历字段设置为给定值。</td></tr><tr><td><code> void</code></td><td><code>set(int year,  int month, int date)</code>      设置日历字段 <code>YEAR</code>、<code>MONTH</code> 和 <code>DAY_OF_MONTH</code> 的值。</td></tr><tr><td><code>abstract  void</code></td><td><code>add(int field,  int amount)</code>      根据日历的规则，为给定的日历字段添加或减去指定的时间量。</td></tr></tbody></table><br><p><strong>测试方法  :</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCalendar</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>Calendar calendar = Calendar.getInstance();<br>System.out.println(calendar);<br><br><span class="hljs-comment">// 获得日历信息</span><br><span class="hljs-keyword">int</span> year = calendar.get(Calendar.YEAR);<br><span class="hljs-comment">// 月份 0 - 11</span><br><span class="hljs-keyword">int</span> month = calendar.get(Calendar.MONTH);<br><span class="hljs-keyword">int</span> day = calendar.get(Calendar.DAY_OF_MONTH);<br><span class="hljs-keyword">int</span> hour = calendar.get(Calendar.HOUR_OF_DAY);<br><span class="hljs-keyword">int</span> minute = calendar.get(Calendar.MINUTE);<br><span class="hljs-keyword">int</span> second = calendar.get(Calendar.SECOND);<br><br><span class="hljs-comment">// 周是 周日1-周一2-二3.....-周六7</span><br><span class="hljs-keyword">int</span> index = calendar.get(Calendar.DAY_OF_WEEK);<br>        <br>String[] weeks = &#123;<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;周日&quot;</span>,<span class="hljs-string">&quot;周一&quot;</span>,<span class="hljs-string">&quot;周二&quot;</span>,<span class="hljs-string">&quot;周三&quot;</span>,<span class="hljs-string">&quot;周四&quot;</span>,<span class="hljs-string">&quot;周五&quot;</span>, <span class="hljs-string">&quot;周六&quot;</span>&#125;;<br>String week = weeks[index];<br><br>System.out.println(year);<br>System.out.println(month + <span class="hljs-number">1</span>);<br>System.out.println(day);<br>System.out.println(hour);<br>System.out.println(minute);<br>System.out.println(second);<br>System.out.println(week);<br><br><span class="hljs-comment">// 设置时间</span><br>calendar.set(Calendar.DAY_OF_MONTH, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">int</span> index2= calendar.get(Calendar.DAY_OF_WEEK);<br>System.out.println(weeks[index2]);<br><br><span class="hljs-comment">// add(field,amount); 在当前时间上添加/减去指定时间</span><br>calendar.add(Calendar.YEAR, -<span class="hljs-number">21</span>);<br>calendar.add(Calendar.MONTH, <span class="hljs-number">3</span>);<br>System.out.println(calendar.get(Calendar.YEAR));<br>System.out.println(calendar.get(Calendar.MONTH) + <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>常用类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用类(一)</title>
    <link href="/2021/07/24/Java%E5%B8%B8%E7%94%A8%E7%B1%BB(%E4%B8%80)/"/>
    <url>/2021/07/24/Java%E5%B8%B8%E7%94%A8%E7%B1%BB(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><hr><h4 id="String类的两种实例化方式"><a href="#String类的两种实例化方式" class="headerlink" title="String类的两种实例化方式"></a>String类的两种实例化方式</h4><p>直接赋值:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str = <span class="hljs-string">&quot;Hello&quot;</span>;<br>System.out.println(str);<br></code></pre></div></td></tr></table></figure><p>构造方法:（String本身是一个类，类中一定存在构造方法）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Hello&quot;</span>);<br>System.out.println(str);<br></code></pre></div></td></tr></table></figure><p>两种方式的区别</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>String str2 = <span class="hljs-string">&quot;hello&quot;</span>;<br>String str3 = <span class="hljs-string">&quot;hello&quot;</span>;        <span class="hljs-comment">//三个str都指向同一块内存空间</span><br></code></pre></div></td></tr></table></figure><p>原因：在JVM底层自动维护一个字符串对象池（对象数组）</p><p>　　<strong>如果采用直接赋值的方式进行String类对象的实例化操作，此对象将自动保存到 <code>对象池</code> 中，如果下次继续采用直接赋值的模式声明 String 类对象，先去 <code>对象池</code> 中找是否有指定内容，如果有，直接引用，如果没有，开辟新的空间而后将其保存到对象池中以供下次引用。</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;hello&quot;</span>); <br><span class="hljs-comment">//产生两块空间，一块堆内存为垃圾空间，并且不会保存到对象池中。</span><br></code></pre></div></td></tr></table></figure><p>字符串的手工入池操作</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;hello&quot;</span>).intern();<br></code></pre></div></td></tr></table></figure><hr><h4 id="字符串的相等比较"><a href="#字符串的相等比较" class="headerlink" title="字符串的相等比较"></a>字符串的相等比较</h4><p>​        观察如下关于比较的代码，可以看到，在进行数值比较时，得到的结果是true，</p><p>　　但是在进行对象的比较时，比较的是另个对象所保存的内存地址而非内容，所以得到的结果为false</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//      数值的==比较</span><br>        <span class="hljs-keyword">int</span> a=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> b=<span class="hljs-number">1</span>;<br>        System.out.println(a==b);   <span class="hljs-comment">//true</span><br><span class="hljs-comment">//      String类对象的==比较</span><br>        String str1 = <span class="hljs-string">&quot;Hello&quot;</span>;<br>        String str2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        System.out.println(str1==str2); <span class="hljs-comment">//false</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>　　那么如何对两个字符串进行内容上的比较呢，我们采用String类提供的equals方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//      String类对象的equals比较</span><br>        String str1 = <span class="hljs-string">&quot;Hello&quot;</span>;<br>        String str2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        System.out.println(str1.equals(str2)); <span class="hljs-comment">//true</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>String类的equals() 和 == 的区别：</strong></p><blockquote><p>a. <code>&quot;==&quot;</code>  进行数值比较，比较的是两个数的值，进行字符串比较，比较的是两个字符串对象的内存地址</p><p>b.<code>&quot;equals()&quot;</code>可以对字符串内容进行比较</p></blockquote><hr><h4 id="字符串常量是String类的匿名对象"><a href="#字符串常量是String类的匿名对象" class="headerlink" title="字符串常量是String类的匿名对象"></a>字符串常量是String类的匿名对象</h4><p>字符串常量：”hello”就是一个String类中没有名字的对象。</p><p>任何的字符串常量都是 String 类的匿名对象，所以该对象永远不会为null</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str = <span class="hljs-keyword">null</span>;<br>        System.out.println(str.equals(<span class="hljs-string">&quot;hello&quot;</span>));    <span class="hljs-comment">//NullPointerException</span><br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>.equals(str));    <span class="hljs-comment">//false</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p style="font-family:arial; color:red;">tips：在进行指定内容比较时，将指定字符串常量写在前面，以免发生空指针异常。<hr><h4 id="字符串常量不可变更"><a href="#字符串常量不可变更" class="headerlink" title="字符串常量不可变更"></a>字符串常量不可变更</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 创建一块空间保存&quot;hello&quot;; </span><br>        <span class="hljs-comment">//2. str对象指向&quot;hello&quot;所在的空间</span><br>        <br>        String str = <span class="hljs-string">&quot;hello&quot;</span>;   <br>        str += <span class="hljs-string">&quot; world&quot;</span>; <br>       <br>        <span class="hljs-comment">/*1.创建一块空间保存 &quot;world&quot; ; </span><br><span class="hljs-comment">          2.进行 += 操作创建一块空间保存&quot;hello world&quot;; </span><br><span class="hljs-comment">          3.str对象指向&quot;hello world&quot;所在的空间*/</span><br>        <br>        str += <span class="hljs-string">&quot;!&quot;</span>;     <br>        <br>        <span class="hljs-comment">/*1.创建一块空间保存&quot;！&quot;; </span><br><span class="hljs-comment">          2.进行+=操作创建一块空间保存&quot;hello world&quot;; </span><br><span class="hljs-comment">          3.str对象指向&quot;hello world&quot;所在的空间*/</span><br>        <br>        System.out.println(str);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>​        可以看到，以上操作改变的只是字符串对象的引用，字符串并不会发生变化，而且还会产生大量的垃圾空间。</p><hr><h4 id="字符（char-与字符串（String）"><a href="#字符（char-与字符串（String）" class="headerlink" title="字符（char[]) 与字符串（String）"></a>字符（char[]) 与字符串（String）</h4><p><strong>字符转字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">char</span>[] data = &#123;<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;个&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>&#125;;<br>String str = <span class="hljs-keyword">new</span> String(data);    <span class="hljs-comment">//str =1个apple;</span><br></code></pre></div></td></tr></table></figure><p><strong>字符串转字符</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str = <span class="hljs-string">&quot;1个apple&quot;</span>;<br><span class="hljs-keyword">char</span>[] data = str.toCharArray();<br></code></pre></div></td></tr></table></figure><p><strong>获取字符串某个位置的字符</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str = <span class="hljs-string">&quot;1个apple&quot;</span>;<br><span class="hljs-keyword">char</span> index_value = str.charAt(<span class="hljs-number">1</span>); <span class="hljs-comment">//index_value = 个；</span><br></code></pre></div></td></tr></table></figure><p><strong>例题：</strong></p><p>​        从键盘接受一个字符串，判断这个字符串是否由数字组成</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">judgeIsNumber</span><span class="hljs-params">(String str)</span></span>&#123;<br>        <span class="hljs-keyword">char</span>[] data = str.toCharArray();<br>        <span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>( i=<span class="hljs-number">0</span>;i&lt;data.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>((data[i]&lt;<span class="hljs-string">&#x27;0&#x27;</span>) ||(data[i]&gt;<span class="hljs-string">&#x27;9&#x27;</span>))&#123;<br>                System.out.println(<span class="hljs-string">&quot;这不是一个数字&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i==data.length)&#123;<br>            System.out.println(<span class="hljs-string">&quot;这是一个数字&quot;</span>+str);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in );<br>        String str = scanner.next();<br>        <br>        <span class="hljs-keyword">new</span> Test().judgeIsNumber(str);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="字节（byte-）与字符串（String）"><a href="#字节（byte-）与字符串（String）" class="headerlink" title="字节（byte[]）与字符串（String）"></a>字节（byte[]）与字符串（String）</h4><p><strong>字节转字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">byte</span>[] data = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>&#125;;<br>String str = <span class="hljs-keyword">new</span> String(data);<br></code></pre></div></td></tr></table></figure><p><strong>字符串转字节</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str = <span class="hljs-string">&quot;a is b&quot;</span>;<br><span class="hljs-keyword">byte</span>[] data = str.getBytes();<br></code></pre></div></td></tr></table></figure><hr><h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><p>字符串比较规则:</p><blockquote><p>比较两个字符串第一个字符，谁大则哪个字符串大，如果第一个相等，比较第二个，以此类推。</p><p>如果前面N个都相等，那么谁长谁就大。</p></blockquote><br><p><strong>不区分大小写的相等比较</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str1= <span class="hljs-string">&quot;Hello&quot;</span>;<br>String str2= <span class="hljs-string">&quot;hello&quot;</span>;<br>System.out.println(str1.equals(str2));          <span class="hljs-comment">//区分大小写：false</span><br>System.out.println(str1.equalsIgnoreCase(str2));<span class="hljs-comment">//不区分大小写：true</span><br></code></pre></div></td></tr></table></figure><p><strong>比较两个字符串的大小关系（比较少用）</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str1= <span class="hljs-string">&quot;Hello&quot;</span>;<br>String str2= <span class="hljs-string">&quot;hello&quot;</span>;<br>String str3= <span class="hljs-string">&quot;hello&quot;</span>;<br>System.out.println(str1.compareTo(str2));<span class="hljs-comment">//-32  &lt;0,本字符串小于目标字符串</span><br>System.out.println(str2.compareTo(str1));<span class="hljs-comment">//32   &gt;0,本字符串大于目标字符串</span><br>System.out.println(str2.compareTo(str3));<span class="hljs-comment">//0    =0本字符串等于目标字符串</span><br></code></pre></div></td></tr></table></figure><hr><h4 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str1= <span class="hljs-string">&quot;hello world&quot;</span>;<br>String str2= <span class="hljs-string">&quot;hello&quot;</span>;<br>System.out.println(str1.contains(str2));     <span class="hljs-comment">//ture  判断指定字符串是否存在         </span><br>System.out.println(str1.startsWith(str2));   <span class="hljs-comment">//true  判断是否以指定字符串开头</span><br>System.out.println(str1.endsWith(str2));     <span class="hljs-comment">//false  判断是否以指定字符串结尾</span><br></code></pre></div></td></tr></table></figure><hr><h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str1= <span class="hljs-string">&quot;hello,world&quot;</span>;<br>String str2= <span class="hljs-string">&quot;Bye bye&quot;</span>;<br>System.out.println(str1.replaceAll(<span class="hljs-string">&quot;hello&quot;</span>,str2));   <span class="hljs-comment">//Bye bye,world</span><br>System.out.println(str1.replaceAll(<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>));        <span class="hljs-comment">//heeeo,world</span><br></code></pre></div></td></tr></table></figure><hr><h4 id="字符串拆分"><a href="#字符串拆分" class="headerlink" title="字符串拆分"></a>字符串拆分</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//按照&quot;,&quot;拆分字符串str</span><br>        String str1= <span class="hljs-string">&quot;hello,world&quot;</span>;<br>        String[] result = str1.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-keyword">for</span>(String temp :result)&#123;<br>            System.out.print(temp+<span class="hljs-string">&quot;-&quot;</span>);   <span class="hljs-comment">//hello-world-</span><br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p style="font-family:arial; color:red;">tips：按照特殊字符拆分需要用到转义字符"\\"<blockquote><p><strong>注意：</strong> **. ** 、$  <strong>|</strong> 和 * 等转义字符，必须得加 \\。</p><p>​             多个分隔符，可以用 <strong>|</strong> 作为连字符。</p></blockquote><hr><h4 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str1 = <span class="hljs-string">&quot;hello world&quot;</span>;<br>System.out.println(str1.substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)); <span class="hljs-comment">//从下标为0的字符开始截取一个字符</span><br></code></pre></div></td></tr></table></figure><h4 id="去除字符串的左右空格，并且保留中间空格"><a href="#去除字符串的左右空格，并且保留中间空格" class="headerlink" title="去除字符串的左右空格，并且保留中间空格"></a>去除字符串的左右空格，并且保留中间空格</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str1 = <span class="hljs-string">&quot; hello world &quot;</span>;<br>System.out.println(str1.trim());   <span class="hljs-comment">//把前后的空格去除</span><br></code></pre></div></td></tr></table></figure><h4 id="字符串转大小写"><a href="#字符串转大小写" class="headerlink" title="字符串转大小写"></a>字符串转大小写</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str1 = <span class="hljs-string">&quot; hello world &quot;</span>;<br>System.out.println(str1.toUpperCase()); <span class="hljs-comment">//变大写  HELLO WORLD </span><br>System.out.println(str1.toLowerCase()); <span class="hljs-comment">//变小写  hello world</span><br></code></pre></div></td></tr></table></figure><h4 id="判断字符串是否为空字符串"><a href="#判断字符串是否为空字符串" class="headerlink" title="判断字符串是否为空字符串"></a>判断字符串是否为空字符串</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str1 = <span class="hljs-string">&quot;&quot;</span>;<br>String str2 = <span class="hljs-string">&quot;    &quot;</span>;<br>String str3 = <span class="hljs-keyword">null</span>;<br>System.out.println(str1.isEmpty());  <span class="hljs-comment">//true </span><br>System.out.println(str2.isEmpty());  <span class="hljs-comment">//false</span><br>System.out.println(str3.isEmpty());  <br><span class="hljs-comment">//NullPointerException isEmpty()不判断null</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><table><thead><tr><th>构造方法</th><th></th></tr></thead><tbody><tr><td><code>StringBuffer ()</code></td><td>构造一个其中不带字符的字符串缓冲区，其初始容量为 16 个字符。</td></tr><tr><td><code>StringBuffer (CharSequence seq)</code></td><td>public java.lang.StringBuilder(CharSequence seq) 构造一个字符串缓冲区，它包含与指定的 CharSequence 相同的字符。</td></tr><tr><td><code>StringBuffer (int capacity)</code></td><td>构造一个不带字符，但具有指定初始容量的字符</td></tr><tr><td><code>StringBuffer(String str)</code></td><td>构造一个字符串缓冲区，并将其内容初始化为指定的字符串内容。</td></tr></tbody></table><br><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th>返回值类型</th><th>方法</th><th>方法使用</th></tr></thead><tbody><tr><td><code>StringBuffer</code></td><td><code>append（参数类型  参数）</code></td><td>将大部分数据类型的参数<strong>拼接</strong>到字符串末尾返回该字符串的引用</td></tr><tr><td><code>StringBuffer</code></td><td><code>insert（int  offset，数据类型  参数）</code></td><td>将大部分类型的参数插入到指定下标处,返回字符串的引用</td></tr><tr><td><code>StringBuffer</code></td><td><code>delete（int  start，int  end）</code></td><td>移除此序列的子字符串</td></tr><tr><td><code>StringBuffer</code></td><td><code>delectCharAt（int  index）</code></td><td>移除此序列指定位置的</td></tr><tr><td><code>void</code></td><td><code>setCharAt（int  index，char  ch）</code></td><td>将给定索引处的字符设</td></tr><tr><td><code>StringBuffer</code></td><td><code>reverse（）</code></td><td>将此字符序列用其<strong>反转</strong>形式</td></tr><tr><td><code>StringBuffer</code></td><td><code>replace（int  start，int  end，String  str）</code></td><td>使用给定 String 中的字符<strong>替换</strong>此序列的子字符串中的字符</td></tr></tbody></table><p style="font-family:arial; color:red;">StringBuffer 和 StringBuilder 方法都类似，直接过<hr><h4 id="1-字符串拼接方法（append-能拼接各种类型）"><a href="#1-字符串拼接方法（append-能拼接各种类型）" class="headerlink" title="1.字符串拼接方法（append(),能拼接各种类型）"></a>1.字符串拼接方法（append(),能拼接各种类型）</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer sb1 = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;12&quot;</span>);<br>System.out.println(sb1.append(<span class="hljs-number">3</span>));    <span class="hljs-comment">//123</span><br>System.out.println(sb1.append(<span class="hljs-string">&quot;三&quot;</span>)); <span class="hljs-comment">//123三</span><br>System.out.println(sb1.append(<span class="hljs-string">&quot;3&quot;</span>));  <span class="hljs-comment">//123三3</span><br></code></pre></div></td></tr></table></figure><hr><h4 id="2-String-StringBuffer-StringBuilder-之间的互相转换的方法"><a href="#2-String-StringBuffer-StringBuilder-之间的互相转换的方法" class="headerlink" title="2.String , StringBuffer ,StringBuilder 之间的互相转换的方法"></a>2.String , StringBuffer ,StringBuilder 之间的互相转换的方法</h4><p>&nbsp;&nbsp;有时候，<code>String</code> 在解题的时候不能更改 <code>String</code> 的大小，所以我们往往会采用 <code>StringBuffer</code> ，动态的更改字符串，但是当题目要求返回 <code>String</code> 时，我们必须要将 <code>StringBuffer</code> 转换回来。</p><br><p>​        主要的方法如下</p><p><strong>1)   String  -&gt;  StringBuffer / StringBuilder</strong></p><ul><li><code>使用SB的构造方法</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;java&quot;</span>);<br>System.out.println(sb);<br></code></pre></div></td></tr></table></figure><p><strong>2)   StringBuilder / StringBuffer  -&gt;  String</strong></p><ul><li><code>String.valueOf()</code></li><li><code>SB.toString()</code></li><li><code>String类构造方法</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s1 = String.valueOf(sb);<br>System.out.println(s1);<br><br>String s2 = sb.toString();<br>System.out.println(s2);<br><br>String s3 = <span class="hljs-keyword">new</span> String(sb);<br>System.out.println(s3);<br></code></pre></div></td></tr></table></figure><p><strong>3)   StringBuilder  &lt;–&gt;  StringBuffer 互转</strong></p><ul><li><code>SB的构造方法</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer buffer = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;java&quot;</span>));<br>StringBuilder builder = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;java&quot;</span>));<br></code></pre></div></td></tr></table></figure><hr><h4 id="3-字符串反转"><a href="#3-字符串反转" class="headerlink" title="3.字符串反转"></a>3.字符串反转</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(sb.reverse());      <span class="hljs-comment">//olleh</span><br></code></pre></div></td></tr></table></figure><h4 id="4-删除指定范围内的数据"><a href="#4-删除指定范围内的数据" class="headerlink" title="4.删除指定范围内的数据"></a>4.删除指定范围内的数据</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(sb.delete(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>));     <span class="hljs-comment">//从下标为0的元素开始，删除三个字符</span><br></code></pre></div></td></tr></table></figure><h4 id="5-向指定位置插入数据"><a href="#5-向指定位置插入数据" class="headerlink" title="5.向指定位置插入数据"></a>5.向指定位置插入数据</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(sb.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;world&quot;</span>));<span class="hljs-comment">//从下标为0的字符开始，插入world;</span><br></code></pre></div></td></tr></table></figure><hr><p style="font-family:arial; color:red;">总结 : <p>相同：</p><ul><li>都代表字字符串</li></ul><p>不同：</p><ul><li>String 的内容不可变，但是 StringBuffer 和 StringBuilder 的内容可变</li><li>StringBuffer（JDK1.0），采用<strong>同步</strong>处理，线程安全，效率较低</li><li>StringBuilder（JDK1.5），采用<strong>异步</strong>处理，线程不安全，效率较高</li><li>当在进行 String 对象 “+” 操作时，编译时会将 String 类变为 StringBuilder 进行 append（） 处理</li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>常用类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java异常处理</title>
    <link href="/2021/07/24/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/2021/07/24/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="java异常处理机制"><a href="#java异常处理机制" class="headerlink" title="java异常处理机制"></a>java异常处理机制</h2><hr><h3 id="一、异常类体系结构"><a href="#一、异常类体系结构" class="headerlink" title="一、异常类体系结构"></a>一、异常类体系结构</h3><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210703163435.png"></p><hr><h3 id="二、常见异常"><a href="#二、常见异常" class="headerlink" title="二、常见异常"></a>二、常见异常</h3><p>Java的异常的都是可以抛出的，所以有一个共同父类<code>Throwable</code></p><p><code>Throwable</code>类下有两个子类：<code>Error</code>，<code>Exception</code></p><ul><li><p><strong>Error：错误</strong></p><blockquote><p>一般情况下，发上Error是比较严重问题.</p><p>特点：Error错误出现,只能抛出,不能捕获.</p></blockquote></li></ul><br><ul><li><p><strong>Exception：异常</strong></p><blockquote><p>异常是可以抛出,也可以捕获.</p><p>分为两种异常：</p><p>（1）编译期异常：<strong>必须处理</strong>，又叫受检查异常.</p><p>（2）运行时异常：<strong>可以处理</strong>，也可以不处理( 默认就是抛出 ). 又叫不受检查异常</p></blockquote></li></ul><br><p>java.lang.Throwable</p><ul><li><p>java.lang.Error：一般不编写针对性的代码进行处理。</p></li><li><p>java.lang.Exception：可以进行异常的处理 (在Exception异常体系中，只有RuntimeException及其子类是运行时异常，其他所有异常都是编译期异常p><ul><li><p><strong>编译时异常</strong>(checked)</p><p>|——- <code>IOException</code></p><div class="hljs code-wrapper"><pre><code>   |------- `FileNotFoundException`            找不到文件异常</code></pre></div><p>|——- <code>ClassNotFoundException</code>                <strong>类无法加载异常/类文件未找到异常</strong></p></li><li><p><strong>运行时异常</strong>(unchecked)</p><p>|——- <code>NullPointerException</code>                           <strong>空指针异常</strong></p><p>|——- <code>ArrayIndexOutOfBoundsException</code>    <strong>数组索引越界异常</strong></p><p>|——- <code>StringIndexOutOfBoundsException</code>  <strong>字符串索引越界异常</strong></p><p>|——- <code>ClassCastException</code>                               <strong>类转换异常</strong></p><p>|——- <code>NoClassDefFoundError</code>                        <strong>没有类定义发现错误</strong></p><p>|——- <code>NumberFormatException</code>                    <strong>数字格式异常</strong></p><p>|——- <code>InputMismatchException</code>                    <strong>检测是否为数字</strong></p><p>|——- <code>ArithmeticException</code>                             <strong>算术异常</strong></p></li></ul><br><p><strong>面试题</strong>：常见的异常类有哪些？举例说明</p><br></li></ul><p>Test:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        ExceptionTest t= <span class="hljs-keyword">new</span> ExceptionTest();<br><span class="hljs-comment">//        t.test1();</span><br><span class="hljs-comment">//        t.test2();</span><br><span class="hljs-comment">//        t.test3();</span><br><span class="hljs-comment">//        t.test4();</span><br><span class="hljs-comment">//        t.test5();</span><br><span class="hljs-comment">//        t.Test6();</span><br><span class="hljs-comment">//        t.test7();</span><br>    &#125;<br><br>    <span class="hljs-comment">//********************以下是运行时异常*************************</span><br>    <span class="hljs-comment">//NullPointerException 空指针异常</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr=<span class="hljs-keyword">null</span>;<br>        System.out.println(arr[<span class="hljs-number">3</span>]);<br><br>        String str =<span class="hljs-string">&quot;asd&quot;</span>;<br>        str=<span class="hljs-keyword">null</span>;<br>        System.out.println(str.charAt(<span class="hljs-number">0</span>)); <br>        <span class="hljs-comment">//char charAt(int index)返回指定索引处的 char 值。</span><br><br>    &#125;<br><br>    <span class="hljs-comment">//IndexOutOfBoundsException 索引越界异常</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        int a[] = new int[10];</span><br><span class="hljs-comment">//        System.out.println(a[10]);      //ArrayIndexOutOfBoundsException</span><br><br>        String str = <span class="hljs-string">&quot;asd&quot;</span>;<br>        System.out.println(str.charAt(<span class="hljs-number">3</span>));<span class="hljs-comment">//StringIndexOutOfBoundsException</span><br>    &#125;<br><br>    <span class="hljs-comment">//ClassCastException 类转换异常</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        Object obj = <span class="hljs-keyword">new</span> Date(); <span class="hljs-comment">//Object 是所有类的父类</span><br>        String str =(String)obj;<br>    &#125;<br><span class="hljs-number">9</span>+<span class="hljs-function">w <span class="hljs-title">FileInputStream</span><span class="hljs-params">(file)</span></span>;<br><br>        <span class="hljs-keyword">int</span> data = fis.read();<br>        <span class="hljs-keyword">while</span>(data !=-<span class="hljs-number">1</span>)&#123;                         <span class="hljs-comment">//当等于-1时，表示文件里的内容已经读取完</span><br>            System.out.println((<span class="hljs-keyword">char</span>)data);       <span class="hljs-comment">//如果直接输出data,因为data是int类型的，所以输出的也是数字</span><br>            data = fis.read();                    <span class="hljs-comment">//相当于迭代条件</span><br>        &#125;<br>        fis.close();        <span class="hljs-comment">//流资源不像对象一样执行完，垃圾就自动回收掉，资源的话需要做一个显示的关闭操作</span><br>                            <span class="hljs-comment">//比如说，Scanner类，一般情况下执行完，也要做一个close()操作</span><br>    &#125;*/<br>&#125;<br><br></code></pre></div></td></tr></table></figure><hr><h3 id="三、异常处理机制"><a href="#三、异常处理机制" class="headerlink" title="三、异常处理机制"></a>三、异常处理机制</h3><p style="font-size:28px">抓抛模型（throw + throws）：</p><p><strong>过程一：</strong>“抛” ：程序在正常执行过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象，并将此对象抛出。<strong>一旦抛出后，其后代码就不再运行。</strong></p><br><p style="font-family:arial; color:red;">关于异常对象的产生：<blockquote><p>（1）<strong>系统自动生成的对象</strong></p><p>（2）<strong>手动生成一个异常对象，并抛出（throw）</strong></p></blockquote><hr><p><strong>过程二：</strong> “抓” ：可以理解为异常的<strong>处理</strong>方式：</p><blockquote><p>（1）try-catch-finally </p><p>（2）throws</p></blockquote><br><p style="font-family:arial; color:red;">注意：java中throw和throws的区别：<p>（1）throws是处理异常对象的方式。</p><p>（2）throw 是产生异常对象的。</p><center><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211108143726.png" style="zoom:48%;" /></center><br><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用 <code>throw</code> 之后要写 <code>throws</code> 的情况：</p><ul><li>使用 <code>throw</code> 抛出编译时异常时，必须使用 <code>throws</code> 添加异常对象的方法签名</li><li>使用 <code>throw</code> 抛出运行时异常时，则不必使用 <code>throws</code> 添加异常签名</li></ul><p>如图所示:</p><center><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211108110810.png" style="zoom:54%;" /></center><br><center><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20211108110809.png" style="zoom:50%;" /></center><br><blockquote><p><strong>抛出异常</strong>：（<strong>throw</strong>）异常的产生阶段：手动抛出异常对象</p><p><strong>声明异常</strong>：（<strong>throws</strong>）异常的处理方式;</p></blockquote><p>例子：上流排污，下流治污。</p><hr><p style="font-family:arial; color:red;font-size:20px">Tips:实际开发过程中，运行时异常就不用再try-catch，因为处理和不处理的结果不大；但是编译时异常一定要try-catch，因为不使用异常编译就过不去，就无法正常运行<hr><p style="font-size:28px">异常捕获（try-catch-finally）：<ol><li><p><code>finally</code> 是可选的。</p><blockquote><p>（1）finally 关键字用来创建在 try 代码块后面执行的代码块。</p><p>（2）无论是否发生异常，finally 代码块中的代码总会被执行。</p><p>（3）在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</p><p>（4）finally 代码块出现在 catch 代码块最后</p></blockquote></li><li><p>使用  <code>try</code>  将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类</p><p>的对象，根据此对象的类型，去  <code>catch</code>  中进行匹配</p></li><li><p>一旦 <code>try</code> 中的异常对象匹配到某一个 <code>catch</code> 时，就进入 <code>catch</code> 中进行异常的处理。一旦处理完成，</p><p>就跳出当前的 <code>try-catch</code> 结构（在没有写 <code>finally</code> 的情况）。 继续执行其后的代码</p></li><li><p><code>catch</code> 中的异常类型如果没有子父类关系，那么声明在次序上，无所谓如 <code>catch</code> 中的异常类满足子</p><p>父类关系，则要求子类一定要声明在父类上面。否则，报错。</p></li><li><p>常用的异常对象处理的方式： </p><ul><li><p><strong><code>getMessage()</code></strong></p><p><strong>只会获得具体的异常名称</strong></p></li><li><p><strong><code>printStackTrace()</code></strong></p><p><strong>可以打印出详细的异常，包括异常的名称，出错的位置，便于程序调试用</strong></p></li></ul></li><li><p>在 <code>try</code> 结构语句中声明的变量，出了 <code>try</code> 结构以后，就不能自再被调用</p></li><li><p><code>try-catch-finally</code> 结构可以嵌套</p></li><li><p>重写时</p><blockquote><p><strong>子类重写的方法抛的异常不能比父类更大</strong></p><p>重写时要求子类方法抛出的异常范围 &lt;= 父类抛出的异常范围</p><p>子异常类 &lt;= 父异常类</p><p>列如:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&gt;ArrayIndexOutOfBoundsException &lt; IndexOutOfBoundsException<br></code></pre></div></td></tr></table></figure><p>特殊的： 父类方法没有异常抛出.子类方法中如果有异常，就只能捕获.</p></blockquote></li></ol><hr><p style="font-family:arial; color:red;">体会1：使用try-catch-finally处理编译时异常，使得程序在编译时就不在报错，但是运行时仍可能报错，相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。也就是说把编译时异常变为运行时异常<br><p style="font-family:arial; color:red;">体会2：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。针对编译时异常，一定要考虑异常的处理。<hr><p><strong>“throws +异常类型”结构说明：</strong></p><ol><li><p>“<code>throws +异常类型</code>“  写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。</p><p>一旦方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不会再执行。</p></li></ol><p style="font-family:arial; color:red;">注意：try-catch-finally：真正的将异常给处理掉了。throws的方式只是将异常抛给了方法的调用者。并没有真正将异常处理掉。<br><br><ol start="2"><li><p><strong>开发中如何选择使用 try-catch-finally 还是使用throws ?</strong></p><blockquote><p>（1）如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中有异常，必须使用try-catch-finally方式处理。</p><p>（2）如果执行的方法中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throw的方式进行处理。而执行的方法可以考虑使用try-catch-finally方式进行处理。</p></blockquote></li></ol><hr><p><strong>方法一：</strong> <code>try-catch-finally</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        String str1 = <span class="hljs-string">&quot;123&quot;</span>;<br>        str1 = <span class="hljs-string">&quot;asd&quot;</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> num = Integer.parseInt(str1);<br>            System.out.println(<span class="hljs-string">&quot;hello ------1&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (NullPointerException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;出现空指针异常！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br><span class="hljs-comment">//            System.out.println(&quot;出现数值转换异常！&quot;);</span><br><span class="hljs-comment">//            String getmessage();   //返回字符串信息</span><br><span class="hljs-comment">//            System.out.println(e.getMessage());</span><br>            <span class="hljs-comment">//printStackTrace();</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;出现异常！&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;hello -----2&quot;</span>);<br><br>    &#125;<br></code></pre></div></td></tr></table></figure><p><strong>方法二：</strong> <code>throws+异常类型</code> 和 <code>throw手动抛异常</code>（异常对象的生成：处了自己生成以外，还可以使用throw自己生成。）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">if</span> (id &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">this</span>.id = id;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//            System.out.println(&quot;输入的数据非法！！&quot;);</span><br><span class="hljs-comment">//            throw new RuntimeException(&quot;输入的数据非法！！&quot;);</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;输入的数据非法！！&quot;</span>);     <br>            <span class="hljs-comment">//throw手动抛异常，throw后面加的对象，是异常类的对象 </span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="四、用户自定义异常类"><a href="#四、用户自定义异常类" class="headerlink" title="四、用户自定义异常类"></a>四、用户自定义异常类</h3><p><strong>如何自定义异常类？</strong></p><ol><li><strong>继承于现有的异常结构</strong>：RuntimeException，Exception</li><li>提供<strong>全局常量</strong>：serialVersionUID</li><li>提供<strong>重载的构造器</strong></li></ol><br><p>举例：</p><ol><li><p>创建类</p></li><li><p>继承一个异常类</p><blockquote><p>继承Exception，自定义异常属于编译期异常</p><p>继承Runtime及其子类中任何一个异常，自定义异常就属于运行时异常</p></blockquote></li><li><p>设计有参构造，用于构造带有指定异常信息的异常对象</p></li><li><p>在需要的地方抛出自定义异常</p></li></ol><br><p>两个自定义异常类:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AgeGT150Exception</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AgeGT150Exception</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(s);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AgeLT0Exception</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AgeLT0Exception</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(s);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>主类:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AgeLT0Exception(<span class="hljs-string">&quot;年龄小于&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (AgeLT0Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">150</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AgeGT150Exception(<span class="hljs-string">&quot;年龄大于&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (AgeGT150Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>.age = age;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AgeLT0Exception(<span class="hljs-string">&quot;年龄小于&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (AgeLT0Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">150</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AgeGT150Exception(<span class="hljs-string">&quot;年龄大于&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (AgeGT150Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>.age = age;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestStudent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">160</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">com.zhiyou.day_12.AgeGT150Exception: 年龄大于<br>at com.zhiyou.day_12.Student.&lt;init&gt;(Student.java:<span class="hljs-number">21</span>)<br>at com.zhiyou.day_12.TestStudent.main(TestStudent.java:<span class="hljs-number">9</span>)<br></code></pre></div></td></tr></table></figure><hr><p style="font-family:arial; color:red; ">总结：异常类这一块最重要的还是异常处理机制的两种方法，实用的较多。<center style ="font-size:20px;">一首小悟结束异常处理</center><p>世界上最遥远的距离，是我在 <code>if</code> 里你在 <code>else</code> 里，似乎一直相伴又永远分离;</p><p>世界上最痴心的等待,是我当 <code>case</code> 你是 <code>switch</code> ，或许永远都选不上自己;</p><p>世界上最真情的相依，是你在 <code>try</code> 我在 <code>catch</code> 。无论你发神马脾气，我都默默承受，静静处理。到那时,再来期待我们的 <code>finally</code> 。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>java异常处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对象的哈希值</title>
    <link href="/2021/07/18/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%93%88%E5%B8%8C%E5%80%BC/"/>
    <url>/2021/07/18/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%93%88%E5%B8%8C%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="对象的哈希值"><a href="#对象的哈希值" class="headerlink" title="对象的哈希值"></a>对象的哈希值</h3><ul><li>就是一个十进制整数。是通过Object类的hashCode()方法获得：int hashCode(); </li><li>默认Object类的hashCode的方法返回的哈希值是该对象在内存中的地址值。</li><li>哈希值是对象存储到哈希表的重要依据。</li></ul><hr><h3 id="哈希表的存储过程"><a href="#哈希表的存储过程" class="headerlink" title="哈希表的存储过程"></a>哈希表的存储过程</h3><p>哈希表的存储过程(存取原理)：每存入一个新的元素都要走以下五步</p><p>(1)调用对象的<code>hashCode()</code>方法，获得要存储元素的哈希值。</p><p>(2)将哈希值与表的长度(即数组的长度)进行求余运算得到一个整数值，该值就是新元素要存放的位置(即是索引值)。</p><blockquote><p>如果索引值对应的位置上没有存储任何元素，则直接将元素存储到该位置上。</p><p>如果索引值对应的位置上已经存储了元素，则执行第3步。</p></blockquote><p>(3)遍历该位置上的所有旧元素，依次比较每个旧元素的哈希值和新元素的哈希值是否相同。</p><blockquote><p>如果有哈希值相同的旧元素，则执行第4步。</p><p>如果没有哈希值相同的旧元素，则执行第5步。</p></blockquote><p>(4)比较新元素和旧元素的地址是否相同。</p><blockquote><p>如果地址值相同则用新的元素替换老的元素。停止比较。</p><p>如果地址值不同，则新元素调用equals方法与旧元素比较内容是否相同。</p></blockquote><blockquote><p>如果返回true，用新的元素替换老的元素，停止比较。</p><p>如果返回false，则回到第3步继续遍历下一个旧元素。</p></blockquote><p>(5)说明没有重复，则将新元素存放到该位置上并让新元素记住之前该位置的元素。</p><hr><h3 id="问题：为什么存储字符串的时候，字符串内容相同的只存储了一个呢"><a href="#问题：为什么存储字符串的时候，字符串内容相同的只存储了一个呢" class="headerlink" title="问题：为什么存储字符串的时候，字符串内容相同的只存储了一个呢?"></a>问题：为什么存储字符串的时候，字符串内容相同的只存储了一个呢?</h3><p>通过查看<code>add</code>方法的源码，我们知道这个方法底层依赖 两个方法：<code>hashCode()</code>和<code>equals()</code>。</p><p>步骤：</p><ul><li><p>首先比较哈希值</p></li><li><p>如果相同，继续走，比较地址值或者走<code>equals()</code></p></li><li><p>如果不同,就直接添加到集合中 </p></li></ul><p>按照方法的步骤来说： </p><ul><li><p>先看<code>hashCode()</code>值是否相同</p></li><li><p>相同:继续走<code>equals()</code>方法</p></li><li><p>返回true： 说明元素重复，就不添加</p></li><li><p>返回false：说明元素不重复，就添加到集合</p></li><li><p>不同：就直接把元素添加到集合</p></li><li><p>如果类没有重写这两个方法，默认使用<code>Object()</code>的方法。</p></li><li><p>而<code>String</code>类重写了<code>hashCode()</code>和<code>equals()</code>方法，所以，它就可以把内容相同的字符串去掉。只留下一个。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <br>          <span class="hljs-comment">// 创建集合对象</span><br>          HashSet&lt;String&gt; hs = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;();<br><br>          <span class="hljs-comment">// 创建并添加元素</span><br>          hs.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>          hs.add(<span class="hljs-string">&quot;world&quot;</span>);<br>          hs.add(<span class="hljs-string">&quot;java&quot;</span>);<br>          hs.add(<span class="hljs-string">&quot;world&quot;</span>);<br>          hs.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>          hs.add(<span class="hljs-string">&quot;world&quot;</span>);<br>          hs.add(<span class="hljs-string">&quot;java&quot;</span>);<br>          hs.add(<span class="hljs-string">&quot;world&quot;</span>);<br><br>          print(hs);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(Collection&lt;E&gt; link)</span> </span>&#123;<br>        <span class="hljs-comment">// 遍历</span><br>        <span class="hljs-keyword">for</span> (E s : link) &#123;<br>            System.out.println(s);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br>         <span class="hljs-comment">// 遍历集合,获取得到每一个元素</span><br>         Iterator&lt;E&gt; it = link.iterator();<br>         <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>         E s = it.next();<br>         System.out.println(s);<br>         &#125;<br>         System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>对象的哈希值</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的关键字总结</title>
    <link href="/2021/07/17/Java%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97%E6%80%BB%E7%BB%93/"/>
    <url>/2021/07/17/Java%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><hr><h4 id="static变量"><a href="#static变量" class="headerlink" title="static变量"></a>static变量</h4><p>​        static变量也称作静态变量，静态变量和非静态变量的区别是：<strong>静态变量被所有的对象所共享</strong>，在内存中只有一个副本，它当且仅当在类初次加载时会被初始化。而非静态变量是对象所拥有的，在创建对象的时候被初始化，存在多个副本，各个对象拥有的副本互不影响。</p><p>static成员变量的初始化顺序按照定义的顺序进行初始化。</p><hr><h4 id="static方法"><a href="#static方法" class="headerlink" title="static方法"></a>static方法</h4><p>​        static方法一般称作静态方法，由于静态方法不依赖于任何对象就可以进行访问，因此对于静态方法来说，是没有this的，因为它不依附于任何对象，既然都没有对象，就谈不上this了。并且由于这个特性，<strong>在静态方法中不能访问类的非静态成员变量和非静态成员方法，因为非静态成员方法/变量都是必须依赖具体的对象才能够被调用。</strong></p><p>​        <strong>在静态方法中不能访问非静态成员方法和非静态成员变量，但是在非静态成员方法中可以访问静态成员方法/变量</strong>。</p><p>​        如果说想在不创建对象的情况下调用某个方法，就可以将这个方法设置为static。static修饰成员方法最大的作用，就是可以使用“类名.方法名”的方式调用方法，避免了new出对象的繁琐和资源消耗。</p><p>​        我们最常见的static方法就是main方法。至于为什么main方法必须是static的，这是因为程序在执行main方法的时候没有创建任何对象，因此只有通过类名来访问。</p><h4 id="static代码块"><a href="#static代码块" class="headerlink" title="static代码块"></a>static代码块</h4><blockquote><p>static块可以置于类中的任何地方，类中可以有多个static块。<strong>在类初次被加载的时候，会按照static块的顺序来执行每个static块，并且只会执行一次</strong>。为什么说static块可以用来优化程序性能，是因为它的特性：<strong>只会在类加载的时候执行一次</strong>。</p><p>所谓的代码块就是当我们初始化static修饰的成员时，可以将他们统一放在一个以static开始，用花括号包裹起来的块状语句中。</p></blockquote><hr><h4 id="static关键字不影响访问权限"><a href="#static关键字不影响访问权限" class="headerlink" title="static关键字不影响访问权限"></a>static关键字不影响访问权限</h4><blockquote><p>使用static关键字修饰只是说明该成员变量属于整个类的所有对象，但是并不影响该成员变量的访问权限，如使用private static 修饰的成员变量只有在本类中可见，在其他类中不能通过“类名.变量名”调用。</p></blockquote><h4 id="static关键字和局部变量"><a href="#static关键字和局部变量" class="headerlink" title="static关键字和局部变量"></a>static关键字和局部变量</h4><blockquote><p>在Java中不能使用static关键字修饰局部变量</p></blockquote><h4 id="能否使用this调用静态成员变量"><a href="#能否使用this调用静态成员变量" class="headerlink" title="能否使用this调用静态成员变量"></a>能否使用this调用静态成员变量</h4><blockquote><p>虽然对于静态方法来说没有this的说法而言，但是在<strong>非静态方法中能够通过this访问静态成员变量</strong>，<strong>这是由于静态成员变量是被类的所有对象所共享的，那么也当然能被this所指向的当前对象调用。</strong></p><p><strong>静态成员变量虽然独立于对象，但是不代表不可以通过对象去访问，所有的静态方法和静态变量都可以通过对象访问（只要访问权限足够）。</strong></p></blockquote><hr><h4 id="final和static"><a href="#final和static" class="headerlink" title="final和static"></a>final和static</h4><p>​        使用final修饰是用以保证变量不被改变，而使用static修饰成员变量，则成员变量在类中只保存一份副本。</p><p>​        在下列代码中，i的两次输出都不一样，而j的两次输出为同一值。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>MyClass myClass1 = <span class="hljs-keyword">new</span> MyClass();<br>MyClass myClass2 = <span class="hljs-keyword">new</span> MyClass();<br>System.out.println(myClass1.i);<br>System.out.println(myClass1.j);<br>System.out.println(myClass2.i);<br>System.out.println(myClass2.j);<br> <br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> i = Math.random();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> j = Math.random();<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="static为什么能和final一起来使用？"><a href="#static为什么能和final一起来使用？" class="headerlink" title="static为什么能和final一起来使用？"></a>static为什么能和final一起来使用？</h4><p>二者表示的意义不同</p><p><code>static</code> 修饰的对象静态的，可以通过类名或者类对象来对其进行访问和修改</p><p><code>final</code> 修饰的对象表示常量，只能够被赋值一次</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> a=<span class="hljs-number">1</span>; <span class="hljs-comment">//a为常量</span><br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> b=<span class="hljs-number">2</span>;       <span class="hljs-comment">//可以多次被赋值</span><br></code></pre></div></td></tr></table></figure><p>再如：</p><p><strong>当在类中创建一个类的对象时，会将该类的成员方法和变量都会在内存copy一份</strong>，如果创建对个对象明显会比较占用内存（前提是对象没有独享这些成员的必要）；</p><p>如果这是<strong>在类中定义了一个static变量，那么这个变量在内存中只能有一份拷贝</strong>，创建的对象可以共享该内存中的值（<strong>互相影响，互相改变</strong>），而如果是想这份共享内存中的值不可改变，可加final来进行修饰</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> b=<span class="hljs-number">1</span>;  <span class="hljs-comment">//一份拷贝</span><br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> c=<span class="hljs-number">2</span>;   <br><span class="hljs-comment">//如果有多个实例，每个实例都会分别存储final修饰的变量，且随着程序的运行，</span><br><span class="hljs-comment">//内存会不断地分配与释放（如销毁对象时）</span><br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> d=<span class="hljs-number">3</span>;  <span class="hljs-comment">//只有一份拷贝，多个实例共享，且属性为只读，会一直占用内存，直到程序的终止</span><br></code></pre></div></td></tr></table></figure><p>对于一些常量或者字符串等等，一般建议写成static final类型（节省空间）</p><p style="font-family:arial; color:red;font-size:20px">但须注意一点：final,static不能和abstract同时来修饰变量和方法<p>如:</p><blockquote><p><strong>public abstract int area(); //对的</strong>    </p><p>public static abstratc int area(); //错的</p></blockquote><p style="font-family:arial; color:red;">补充：<ol><li>final修饰的字段在运行时被初始化，可以直接赋值，也可以在实例构造器中赋值，赋值后不可修改。</li><li>static修饰的字段在加载过程中准备阶段被初始化，但是这个阶段只会赋值一个默认的值（0或者null而并非定义变量设置的值）初始化阶段在类构造器中才会赋值为变量定义的值。</li><li>final 修饰的变量为常量一旦赋值不能修改，被修饰的方法为最终方法不能被重写，被修饰的类是最终类，不能被继承。</li><li>static 修饰的变量和方法，为该整个类及其类的对象所共享，一个类或对象修改了被定义的类或方法，其他的也会跟着变量，这就是说被static修饰的是大家共用的。</li></ol><hr><h4 id="static为什么一般与final一起用？"><a href="#static为什么一般与final一起用？" class="headerlink" title="static为什么一般与final一起用？"></a>static为什么一般与final一起用？</h4><p>static修饰的时候代表对象是静态的，而final修饰的时候代表对象只能赋值一次，他们连用的时候是因为定义的那个对象既要它是静态的，也要求它的值不能再被修改。</p><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> b=<span class="hljs-number">1</span>;<br></code></pre></div></td></tr></table></figure><p>这里a和b的区别在于，a在程序里可以被重新赋值为2或3或等等的整数，而b在程序里不能被重新赋值，b永远都为1，也就是说b是一个常量。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> c=<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> b=<span class="hljs-number">1</span>;<br></code></pre></div></td></tr></table></figure><p>这里c和b的区别在于，b存放在静态空间，不会在程序运行时被释放，它永远占着内存直到程序终止，而c在程序用完它而不会再用到它的时候就会被自动释放，不再占用内存。</p><p>当一个常数或字符串我们需要在程序里反复反复使用的时候，我们就可以把它定义为static final，这样内存就不用重复的申请和释放空间。</p><blockquote><p><strong>static方法就是没有this的方法</strong>。在static方法内部不能调用非静态方法，反过来是可以的。而且可以在没有创建任何对象的前提下，仅仅通过类本身来调用static方法。这实际上正是static方法的主要用途。</p></blockquote><p style="font-family:arial; color:red;">简言之，使用static的目的是为了在不创建对象的前提下来调用方法/变量。<hr><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>this代表它<strong>所在函数所属对象</strong>的引用。</p><p>简单说：</p><blockquote><p>哪个对象在调用this所在的函数，this就代表哪个对象。</p></blockquote><p>this关键字主要有以下三个作用：</p><ul><li>this调用本类中的属性，也就是类中的成员变量；</li><li>this调用本类中的其他方法；</li><li>this调用本类中的其他构造方法，调用时要放在构造方法的首行。(this语句只能定义在构造函数的第一行，因为在初始化时须先执行)</li></ul><h4 id="调用类的构造器方法"><a href="#调用类的构造器方法" class="headerlink" title="调用类的构造器方法"></a>调用类的构造器方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//无参构造器方法</span><br><span class="hljs-keyword">this</span>(“Hello!”);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span></span>&#123; <span class="hljs-comment">//定义一个带形式参数的构造方法</span><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在上述代码中，定义了两个构造方法，一个带参数，另一个没有带参数。在第一个没有带参数的构造方法中，使用了  this(“Hello!”)  这句代码，这句代码表示什么含义呢？在构造方法中使this关键字表示调用类中的构造方法。</p><p>如果一个类中有多个构造方法，因为其名字都相同，跟类名一致，那么这个this到底是调用哪个构造方法呢？其实，这跟采用其他方法引用构造方法一样，都是通过形式参数来调用构造方法的。</p><p style="font-family:arial; color:red;font-size:20px">Tip:语法限制：<blockquote><p><strong>利用this关键字来调用构造方法，只有在无参数构造方法中第一句使用this调用有参数的构造方法。</strong>否则的话，翻译的时候，就会有错误信息。这跟引用成员变量不同。如果引用成员变量的话，this关键字是没有位置上的限制的。</p></blockquote><hr><h4 id="返回对象的引用"><a href="#返回对象的引用" class="headerlink" title="返回对象的引用"></a>返回对象的引用</h4><p>this关键字除了可以引用变量或者成员方法之外，还有一个关键的作用就是返回对象的引用。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> HttpConfig <span class="hljs-title">url</span><span class="hljs-params">(String url)</span> </span>&#123;<br>urls.set(url);<br><span class="hljs-comment">//return this就是返回当前对象的引用(就是实际调用这个方法的实例化对象)</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">HttpConfig  config = HttpConfig.custom();<br>config = config.url(url);<br></code></pre></div></td></tr></table></figure><p>return this；<strong>就是返回当前对象的引用</strong>(就是实际调用这个方法的实例化对象)</p><hr><h4 id="this关键字和super关键字"><a href="#this关键字和super关键字" class="headerlink" title="this关键字和super关键字"></a>this关键字和super关键字</h4><p>在JAVA类中使用super来引用父类的成分，用this来引用当前对象</p><blockquote><p>如果一个类从另外一个类继承，我们new这个子类的实例对象的时候，这个子类对象里面会有一个父类对象。<strong>this指的是当前对象的引用，super是当前对象里面的父对象的引用</strong></p></blockquote><ul><li>属性的区别：this访问本类中的属性，如果本类没有此属性则从父类中继续查找。super访问父类中的属性。</li><li>方法的区别：this访问本类中的方法，如果本类没有此方法则从父类中继续查找。super访问父类中的方法。</li><li>构造的区别：<strong>this调用本类构造，必须放在构造方法的首行。super调用父类构造，必须放在子类构造方法首行。</strong></li><li>其他区别：this表示当前对象。super不能表示当前对象</li></ul><p style="font-family:arial; color:red;font-size:20px">Tips:<ul><li><p><strong>在对拥有父类的子类进行初始化时，父类的构造方法也会执行，且优先于子类的构造函数执行</strong>；<strong>因为每一个子类的构造函数中的第一行都有一条默认的隐式语句super()；</strong> <strong>(如果子类的构造方法中没有手动调用父类的构造方法，则会默认调用父类的无参构造方法)</strong></p></li><li><p>this() 和super()都只能写在构造函数的第一行；</p></li><li><p>this() 和super() 不能存在于同一个构造函数中。</p><blockquote><p>第一，this()和super()都必须写在构造函数的第一行；</p><p>第二，this()语句调用的是当前类的另一个构造函数而这个另一个构造函数中必然有一个父类的</p><p>构造器，再使用super()又调用一次父类的构造器， 就相当于调用了两次父类的构造器，编译器</p><p>不会通过；</p></blockquote></li><li><p>this和super不能用于static修饰的变量，方法，代码块；因为this和super都是指的是对象/实例。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>关键字</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Object类</title>
    <link href="/2021/07/03/Object%E7%B1%BB/"/>
    <url>/2021/07/03/Object%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p><strong>Object类</strong></p><hr><h3 id="一、Object类简介"><a href="#一、Object类简介" class="headerlink" title="一、Object类简介"></a>一、Object类简介</h3><p>Object类是Java<code>java.lang</code>包下的核心类（此包下的所有类在使用时无需手动导入，系统会在程序编译期间自动导入），<strong>Object类是所有类的父类</strong></p><p>Object是java所有类的基类，是整个类继承结构的顶端，也是最抽象的一个类。我们天天都在使用<code>toString()</code>、<code>equals()</code>、<code>hashCode()</code>、<code>waite()</code>、<code>notify()</code>、<code>getClass()</code>等方法，或许都没有意识到是Object的方法，也没有去看Object还有哪些方法以及思考为什么这些方法要放到Object中。</p><p>何一个类时候如果没有明确的继承一个父类的话，那么它就是Object的子类；</p><p>以下两种类的定义的效果是完全相同的：</p><blockquote><p>class Person { } </p><p>class Person extends Object { }</p></blockquote><hr><h3 id="二、Object方法"><a href="#二、Object方法" class="headerlink" title="二、Object方法"></a>二、Object方法</h3><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a><strong>方法：</strong></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">getClass()<br><span class="hljs-function">hash <span class="hljs-title">Code</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">equals</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">clone</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">toString</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">notify</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">notifyAll</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">wait</span><span class="hljs-params">(<span class="hljs-keyword">long</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">wait</span><span class="hljs-params">(<span class="hljs-keyword">long</span>,<span class="hljs-keyword">int</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">wait</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">finalize</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> class&lt;?&gt; <span class="hljs-title">getclass</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-comment">//（返回此对象的运行时类。返回的Class对象是被所表示类的静态同步方法锁定的对象。）</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span></span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">native</span> 0bject <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> string <span class="hljs-title">toString</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notify</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyAll</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">(<span class="hljs-keyword">long</span> timeout)</span> <span class="hljs-keyword">throws</span> InterruptedException</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">(<span class="hljs-keyword">long</span> timeout,<span class="hljs-keyword">int</span> nanos)</span> <span class="hljs-keyword">throws</span> InterruptedException</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123; &#125;<br></code></pre></div></td></tr></table></figure><p>共十二个方法。 </p><hr><h4 id="方法的作用："><a href="#方法的作用：" class="headerlink" title="方法的作用："></a><strong>方法的作用：</strong></h4><ol><li><p><code>clone()</code></p><p>保护方法，实现对象的浅复制，只有实现了Cloneable接口才可以调用该方法，否则抛出CloneNotSupportedException异常。</p></li><li><p><code>getClass()</code></p><p>返回Class类型的对象，反射来获取对象。</p><p>这是一个public的方法，我们可以直接通过对象调用。</p><p>类加载的第一阶段类的加载就是将.class文件加载到内存，并生成一个java.lang.Class对象的过程。<strong>getClass()方法就是获取这个对象，这是当前类的对象在运行时类的所有信息的集合。</strong>这个方法是反射三种方式之一</p></li><li><p><code>toString()</code></p><p>该方法用得比较多，一般子类都有覆盖，来获取对象的信息。</p></li><li><p><code>finalize()</code></p><p>该方法用于释放资源。因为无法确定该方法什么时候被调用，很少使用。</p></li><li><p><code>equals()</code></p><p>比较对象的内容是否相等</p></li><li><p><code>hashCode()</code></p><p>该方法用于哈希查找，重写了equals方法一般都要重写hashCode方法。这个方法在一些具有哈希功能的Collection中用到。</p></li><li><p><code>wait()</code></p><p>wait方法就是使当前线程等待该对象的锁，当前线程必须是该对象的拥有者，也就是具有该对象的锁。wait()方法一直等待，直到获得锁或者被中断。wait(long timeout)设定一个超时间隔，如果在规定时间内没有获得锁就返回。</p><p>调用该方法后当前线程进入睡眠状态，直到以下事件发生。</p><ul><li>其他线程调用了该对象的<code>notify()</code>方法。</li><li>其他线程调用了该对象的<code>notifyAll()</code>方法。</li><li>其他线程调用了``interrupt`中断该线程。</li><li>时间间隔到了。</li></ul><p>此时该线程就可以被调度了，如果是被中断的话就抛出一个InterruptedException异常。</p></li><li><p><code>notify()</code></p><p>该方法唤醒在该对象上等待的<strong>某个</strong>线程。</p></li><li><p><code>notifyAll()</code></p><p>该方法唤醒在该对象上等待的<strong>所有</strong>线程。</p></li></ol><hr><h3 id="三、Object类的常用方法"><a href="#三、Object类的常用方法" class="headerlink" title="三、Object类的常用方法"></a>三、Object类的常用方法</h3><table><thead><tr><th align="center">方法名</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">toString()</td><td align="center">普通</td><td align="center">取得对象信息</td></tr><tr><td align="center">equals()</td><td align="center">普通</td><td align="center">对象内容比较</td></tr></tbody></table><hr><h4 id="一、toString-方法"><a href="#一、toString-方法" class="headerlink" title="一、toString()方法"></a><strong>一、toString()方法</strong></h4><p><code>toString()</code>：<strong>取得对象信息，返回该对象的字符串表示</strong></p><p>例1：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person per = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;xiaoa&quot;</span>, <span class="hljs-number">12</span>);<br>        System.out.println(per);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><blockquote><p>输出：training.Test$Person@7ef20235</p></blockquote><p><strong>在使用对象直接输出的时候，默认输出的是一个对象在堆内存上的地址值；</strong></p><p><strong>如若要输出该对象的内容，则要重写<code>toString()</code>方法</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;名字为：&quot;</span> + <span class="hljs-keyword">this</span>.name + <span class="hljs-string">&quot;  年龄为：&quot;</span> + <span class="hljs-keyword">this</span>.age;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person per = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;xiaoa&quot;</span>, <span class="hljs-number">12</span>);<br>        System.out.println(per);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>输出：名字为：xiaoa  年龄为：12</p></blockquote><p><strong>toString( )的核心目的在于取得对象信息</strong></p><p>String作为信息输出的重要数据类型，在Java中所有的数据类型只要遇见String就执行了<code>+</code>，都要求其变为字符串后连接，而所有对象想要变为字符串就默认用<code>toString( )</code>方法</p><p>例：</p><blockquote><p>System.out.println(“hello” + 111); </p><p>输出：hello111</p></blockquote><hr><p style="font-family:arial; color:red; font-size:20px;">为什么hello 和 111 (一个是字符串，一个是int类型的数据) 就可以直接拼接在一起呢？<p>因为字符串是爸爸，在这个拼爹的时代，他有一个万能的爸爸Object</p><p>换而言之，Object是所有类的父类，任意类都是继承Object类的。而Object中定义了 <code>toString()</code>方法，所以任意类中都包含了<code>toString()</code>方法，对象在实例化之后都可以调用。</p><p>所以任意对象转字符串的输出，是通过重写 <code>toString()</code>方法实现的…</p><p>每一个类中都包含有<code>toString()</code>，但是并不是每一个类都重写了<code>toString()</code></p><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Random rand = <span class="hljs-keyword">new</span> Random();<br>        System.out.println(rand);<br><br>        ArrayList&lt;Integer&gt; list;<br>        list = <span class="hljs-keyword">new</span> ArrayList();<br><br>        list.add(<span class="hljs-number">1</span>);<br>        list.add(<span class="hljs-number">2</span>);<br>        list.add(<span class="hljs-number">3</span>);<br><br>        System.out.println(list);<span class="hljs-comment">//[1，2，3]</span><br>        Object obj = <span class="hljs-keyword">new</span> Object();<br>        System.out.println(obj);<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">&quot;@&quot;</span> + Integer.toHexString(hashCode());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">java.util.Random@7ef20235<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>java.lang.Object@27d6c5e0<br></code></pre></div></td></tr></table></figure><p>在源码中，可以发现通过反射，获取到了当前对象的<u>全限定类名</u>和@<u>十六进制哈希值字符串</u>。这就是不重写<code>toString()</code>时直接打印输出的内容。</p><hr><h4 id="二、equals方法"><a href="#二、equals方法" class="headerlink" title="二、equals方法"></a><strong>二、equals方法</strong></h4><p><strong>equals()：对象比较</strong></p><blockquote><p><a href="https://blog.csdn.net/weixin_43232955/article/details/103216143"><strong>String类对象比较</strong></a> 使用的是 equals（）方法，实际上String类的equals（）方法就是重写 Object类中的equals（）方法</p></blockquote><ul><li><strong>基本数据类型</strong>的比较用 <code>==</code> (如： a == 3，b == 4, a == b，比较的是值是否相等）</li><li><strong>引用类型数据</strong>比较：调用 <code>equals()</code>方法进行比较</li></ul><p>用equals()来比较对象内容是否相同：</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person per1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Mr .Q&quot;</span>, <span class="hljs-number">18</span>);<br>        Person per2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Mr .Q&quot;</span>, <span class="hljs-number">18</span>);<br>        System.out.println(per1.equals(per2));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">false</span><br></code></pre></div></td></tr></table></figure><p>两个对象per1和per2的内容相等，结果应该是true啊？为什么会是false呢？？？</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210630145520.jpg" style="zoom: 50%;" /><p><strong>因为此时直接调用equals()方法默认进行比较的是两个对象的地址</strong></p><p>在源码中，<strong>传递来的Object对象和当前对象比较地址值，返回布尔值。</strong></p><p>我们之前开始学Java时就应该了解，每使用一次new，就是一次”开天辟地“。new一下就会在堆上创建新空间，两个对象地址自然不会相同，所以为false。</p><p>但是在判断两个对象是否相等时，比如要判断一个Person类的两个对象的姓名是否相同时，此时要重新重写<code>equals()</code></p><p>依旧是上面的例子，重写equals()方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person per1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Mr .Q&quot;</span>, <span class="hljs-number">18</span>);<br>        Person per2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Mr . Q&quot;</span>, <span class="hljs-number">18</span>);<br>        System.out.println(per1.equals(per2));<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> String name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.name = name;<br>            <span class="hljs-keyword">this</span>.age = age;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == obj) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!(obj <span class="hljs-keyword">instanceof</span> Person)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            Person p = (Person) obj;<br>            <span class="hljs-keyword">return</span> Objects.equals(name, p.name) &amp;&amp; Objects.equals(age, p.age);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*   @Override   使用编译器可以自动生成</span><br><span class="hljs-comment">    public boolean equals(Object o) &#123;</span><br><span class="hljs-comment">        if (this == o)</span><br><span class="hljs-comment">            return true;</span><br><span class="hljs-comment">        if (o == null || getClass() != o.getClass())</span><br><span class="hljs-comment">            return false;</span><br><span class="hljs-comment">        Person person = (Person) o;</span><br><span class="hljs-comment">        return age == person.age &amp;&amp; Objects.equals(name, person.name);</span><br><span class="hljs-comment">    &#125; */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">true</span><br></code></pre></div></td></tr></table></figure><p><strong>所以，引用类型的数据在进行比较时，应该先重写<code>equals()</code>方法，不然比较的还是两个对象的堆内存地址值，必然不会相等.</strong></p><hr><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210630145529.gif" style="zoom: 67%;" />]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>Object类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora入门用法</title>
    <link href="/2021/06/30/Typora/"/>
    <url>/2021/06/30/Typora/</url>
    
    <content type="html"><![CDATA[<hr><p>两年前左右开始使用的Typora。不过用了这么长时间，才发现，这个编辑器的功能如此强大，而且好多功能我还不知道，请原谅我莫哟看文档hahaha</p><p>今天就简整理了一下Typora的一些入门用法</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210630145535.jpg" style="zoom:25%;" /><hr><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Typora是一款轻便简洁的Markdown编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。即时渲染使得你写Markdown就想是写Word文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。</p><ul><li>Typora删除了预览窗口，以及所有其他不必要的干扰。取而代之的是实时预览。</li><li>Markdown的语法因不同的解析器或编辑器而异，Typora使用的是<a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/">GitHub Flavored Markdown</a>。</li></ul><hr><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 <code>.md</code>， <code>.markdown</code>。</p><hr><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>Typora可以直接在markdown中画流程图，而且语法简洁易懂，这是个让我异常惊喜的功能。</p><p>Typora使用<code>flowchart.js</code>来生成简单的SVG流程图，此外它还支持<a href="https://link.zhihu.com/?target=https://mermaidjs.github.io/">mermaid engine</a>。要知道，在市面上你绝少看到此类用户体验良好的作图App，更别说集成在一个markdown编辑器里面了。Typora支持三类流程图：</p><ul><li>sequence</li><li>flowchart</li><li>gantt</li></ul><p>依次介绍。首先，只需要敲入以下代码，然后选择语言为<code>sequence</code>即可生成下面的图。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sequence">李雷 -&gt; 韩梅梅: Hello 梅梅, How are you?<br>Note right of 韩梅梅: 韩梅梅心想<br>韩梅梅 --&gt; 李雷: I&#x27;m fine, thanks, and you?<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210701092920.png"></p><p>对于<strong>Flowchart</strong>，可以使用下面的code，然后语法选择<code>flow</code></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs flow">st=&gt;start: 闹钟响起<br>op=&gt;operation: 与床板分离<br>cond=&gt;condition: 分离成功?<br>e=&gt;end: 快乐的一天<br><br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210630221731.png"></p><p><a href="https://link.zhihu.com/?target=https://mermaidjs.github.io/">Mermaid</a>是另一个流程图生成的引擎，在官网中它是这么介绍自己的</p><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">Generation <span class="hljs-keyword">of</span> diagrams <span class="hljs-keyword">and</span> flowcharts <span class="hljs-built_in">from</span> <span class="hljs-keyword">text</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">a</span> similar manner <span class="hljs-keyword">as</span> markdown.<br></code></pre></div></td></tr></table></figure><p>除了<strong>Sequence</strong>和<strong>Flowchart</strong>两类图之外，Mermaid还提供一种叫做<strong>gantt</strong>的图。插入下面的代码，然后语法选<code>mermaid</code>就会自动渲染成gantt图了。</p><pre><code class=" mermaid">gantt        dateFormat  YYYY-MM-DD        title 快乐的生活        section 吃一把鸡就学习        学习            :done,    des1, 2014-01-06,2014-01-09        疯狂学习               :active,  des2, 2014-01-09, 3d        继续疯狂学习               :         des3, after des2, 5d        吃鸡！               :         des4, after des3, 4d        section 具体内容        学习Python :crit, done, 2014-01-06,72h        学习C++          :crit, done, after des1, 2d        学习Lisp             :crit, active, 3d        学习图形学        :crit, 4d        跳伞           :2d        打枪                      :2d</code></pre><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210630221744.png"></p><p>由于，我的页面不支持，需要引入插件。流程图暂时看不到效果，用截图暂时顶替。</p><hr><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>Typora的快捷键继承了Mac OS最大的优点，那就是命令与GUI的完美结合，方便直观，比如一级标题就是<code>ctrl + 1</code>，二级标题就是<code>ctrl + 2</code>，依次类推。这些快捷键使得在修改某段文字的标记的时候速度大大加快，原来的流程是手动去改文字的标记，现在我只需要按一下快捷键就行了。顺便感谢command键，按起来也比emacs的默认快捷键方便多了。</p><ul><li>加粗： <code>Ctrl + B</code></li><li>查找和替换： <code>Ctrl + H</code></li><li>插入链接： <code>Ctrl + K</code></li><li>插入代码快： <code>Ctrl + Shift + C</code> </li><li>插入图片： <code>Ctrl + Shift + I</code></li><li>有序列表：<code>Ctrl + Shift + [</code></li><li>无序列表：<code>Ctrl + Shift + ]</code></li><li>撤销： <code>Ctrl + Z</code></li><li>一级标题： <code>Ctrl + 1</code> – 以此类推</li></ul><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">Ctrl<span class="hljs-string">+1</span>  一阶标题   Ctrl+B  字体加粗<br>Ctrl<span class="hljs-string">+2</span>  二阶标题    Ctrl+I  字体倾斜<br>Ctrl<span class="hljs-string">+3</span>  三阶标题   Ctrl+U  下划线<br>Ctrl<span class="hljs-string">+4</span>  四阶标题   Ctrl+Home   返回Typora顶部<br>Ctrl<span class="hljs-string">+5</span>  五阶标题    Ctrl+End    返回Typora底部<br>Ctrl<span class="hljs-string">+6</span>  六阶标题     Ctrl+T  创建表格<br>Ctrl+L  选中某句话     Ctrl+K  创建超链接<br>Ctrl+D  选中某个单词        Ctrl+F  搜索<br>Ctrl+E  选中相同格式的文字    Ctrl+H  搜索并替换<br>Alt+Shift<span class="hljs-string">+5</span> 删除线  Ctrl+Shift+I    插入图片<br>Ctrl+Shift+M    公式块  Ctrl+Shift+Q    引用<br><br>注：一些实体符号需要在实体符号之前加”\”才能够显示<br></code></pre></div></td></tr></table></figure><hr><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>输入 <code>[ toc ]</code> 然后回车，即可创建一个“目录”。TOC从文档中提取所有标题，其内容将自动更新。例如本篇目录如下：</p><p>[toc]</p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210630221749.png"></p><p>目录同流程图一样，截图暂时顶替。</p><hr><h3 id="引用文字"><a href="#引用文字" class="headerlink" title="引用文字"></a>引用文字</h3><p>格式：<code>&gt;+空格</code>，效果如下：</p><blockquote><p>（这里是添加引用内容的地方）</p></blockquote><hr><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>快捷键组合 <code>CTRL+SHIFT+] </code>方式插入无序列表也，可以<code>-+空格</code>实现，效果：</p><ul><li>A</li><li>A</li><li>A</li></ul><p>连续两次回车，才可以清除无序列表的继承，变回段落输入内容模式</p><hr><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>快捷键组合 <code>CTRL+SHIFT+[</code>方式插入无序列表，也可以<code>序号+.+空格</code>实现，效果：</p><ol><li>A</li><li>A</li><li>A</li></ol><p>同上。</p><hr><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>在编辑区域输入 Markdown 语法：”- [ ]” ，注意空格。</p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210630201729.png"></p><p>效果：</p><ul><li><input disabled="" type="checkbox"> 任务</li></ul><p>如果希望任务项默认处于勾选状态，在编缉区域输入 Markdown 语法：”- [X]”，也要注意空格。</p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210630201730.png"></p><p>效果：</p><ul><li><input checked="" disabled="" type="checkbox"> 任务</li></ul><p>说实话，这个任务列表建议，使用菜单方式生成任务项，点击 ”段落“ -&gt; ”任务列表“。使用菜单方式，也可以修改任务项的勾选状态。点击 ”段落“ -&gt; ”任务状态“ -&gt; ”切换任务状态“。具体为什么这么建议自己体会。</p><hr><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>快捷键<code>CTRL+SHIFT+K</code>，效果如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> array[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : array) &#123;<br>    System.out.println(i);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>代码块</strong>、<strong>公式块</strong>、<strong>表格</strong>用法简单类似，不再单独列出来。</p><hr><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>这个例子的脚注为[<a href="https://jackcat.top/2021/06/30/Typora">1]</a>。</p><p>也可以使用a标签替代<a href="https://jackcat.top/2021/06/30/Typora">[1]</a></p><p>注意：该例子脚注标识是1，脚注标识可以为字母数字下划线。脚注内容可为任意字符，包括中文。</p><hr><h3 id="代码标记"><a href="#代码标记" class="headerlink" title="代码标记"></a>代码标记</h3><p>标记代码使用<strong>反引号</strong>，即在英文输入法下，ESC键下（1键左边的符号）。效果如下：</p><p><code>代码标记</code></p><hr><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>使用<code>~~删除线~~</code></p><p> 快捷键<code>Alt + Shift + 5</code>，效果如下：</p><p><del>删除线</del></p><hr><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>通过<code>&lt;u&gt;下划线的内容&lt;/u&gt;</code> 或者 快捷键<code>Ctrl + U</code>可实现下划线，效果：</p><p><u>下划线的内容</u></p><hr><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>快捷键：<code>---+空格</code></p><hr><h3 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h3><p>可以使用<code>&lt;sup&gt;文本&lt;/sup&gt;</code>实现上标。</p><p>(需在设置中打开该功能)</p><p>eg：X<sup>2</sup></p><hr><h3 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h3><p>可以使用 <code>&lt;sub&gt;文本&lt;/sub&gt;</code>实现下标。</p><p>(需在设置中打开该功能)</p><p>eg：H<sub>2</sub>O</p><hr><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>使用 <code>*单个星号*</code> 或者 <code>_单下划线_</code> 可以字体倾斜。快捷键 <code>Ctrl + I</code></p><p><em>斜体</em></p><hr><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><p>使用 <code>**两个星号**</code> 或者 <code>__两个下划线__</code> 可以字体加粗。快捷键 <code>Ctrl + B</code></p><p><strong>加粗</strong></p><hr><h3 id="加粗斜体"><a href="#加粗斜体" class="headerlink" title="加粗斜体"></a>加粗斜体</h3><p>使用<code>***加粗斜体***</code>可以加粗斜体。</p><p><em><strong>加粗斜体</strong></em></p><hr><h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><p>Github的Markdown语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。各版本markdown(md)支持表情内容不同,可以自己尝试。</p><p>例如：<code>:sunflower:，:rabbit2:，:rose:，:fish:</code>，效果如下：</p><p>🌻</p><p>🐇</p><p>🌹</p><p>🐟 </p><p>附上各类Typora Emoji图标的符号码，<a href="https://www.cnblogs.com/wangjs-jacky/p/12011208.html">链接在这</a></p><hr><h3 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h3><p><code>==高亮==</code>(需在设置中打开该功能) 有些页面不支持</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210701092928.png"  /><hr><h3 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h3><p>使用 <code>&lt;center&gt;这是要居中的内容&lt;/center&gt;</code>可以使文本居中</p><center>这是要居中的文本内容</center><hr><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><p><strong>文本加粗</strong><br><code>** 正常显示星号 **</code></p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">\   反斜线<br>`   反引号<br>*   星号<br>_   下划线<br>&#123;&#125;  花括号<br>[]  方括号<br>()  小括号<br>#   井字号<br>+   加号<br>-   减号<br>.   英文句点<br>!   感叹号<br></code></pre></div></td></tr></table></figure><hr><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>支持HTML，这一点我觉得还是非常不错的，使用 HTML+CSS 可以更方便的DIY</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><p>eg：<kbd>效果 :<kbd> 支持HTML</kbd> </p><hr><p>总之也差不多了</p><p>还有些特别简单的，例如插入图片啊、链接啊什么的，这些自己摸索摸索都没问题。</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210630145521.gif" style="zoom:25%;" /><p>参考链接：</p><ul><li><p><a href="https://blog.csdn.net/witnessai1/article/details/52551362">Markdown语法手册</a></p></li><li><p><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 教程</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Scanner类</title>
    <link href="/2021/06/29/Scanner%E7%B1%BB/"/>
    <url>/2021/06/29/Scanner%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p><strong>Scanner中关于next()、nextInt()和nextLine()的问题</strong></p><hr><p>　　翻车了呀！！！Java中最先学到的输入方法就是用Scanner类，方便好用，学的时候没想太多直接往上莽，没想到会在输入上出问题，结果还真遇到了。废话不多说，先写篇blog压压惊。</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210629190814.jpg" style="zoom:25%;" /><hr><h4 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a>一、简述</h4><p>　　<code>java.util.Scanner </code> 是 Java5 的新特征，我们可以通过  <code>Scanner</code>  类来获取用户的输入。是 jdk1.5 之后的为了简化文本扫描的新增类，支持读取多种数据类型。</p><p>使用 <code>Scanner</code> 扫描，<strong>创建扫描器</strong>后，<strong>控制台输入数据</strong>，此时<strong>数据全部存入缓冲区</strong>；再使用 <code>next（）</code>等方法<strong>从一块缓冲区读取</strong>相应内容。一般从遇到的第一个有效字符开始读取，当遇到分隔符或结束符停止读取。</p><p>使用 <code>nextInt（）</code>， <code>next（）</code>， <code>nextLine（）</code> 读取方式的具体差异:<br><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210629175201.png"  /></p><hr><h4 id="二、next-与nextLine-区别"><a href="#二、next-与nextLine-区别" class="headerlink" title="二、next()与nextLine()区别"></a>二、next()与nextLine()区别</h4><p><strong>next（）:</strong></p><ul><li>1、一定要读取到有效字符后才可以结束输入。</li><li>2、对输入有效字符之前遇到的空白，<code>next（）</code> 方法会自动将其去掉。</li><li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li><li>4、<code>next（）</code> 不能得到带有空格的字符串。</li><li>5、会自动过滤掉有效字符前的无效字符</li></ul><p><strong>nextLine（）：</strong></p><ul><li>1、以 Enter 为结束符,也就是说 <code>nextLine（）</code> 方法返回的是输入回车之前的所有字符。</li><li>2、可以获得空白。</li><li>3、读取整行的数据包括单词间的空格，到回车结束，读取结束后，光标放在下一行开头。</li></ul><hr><h4 id="三、问题"><a href="#三、问题" class="headerlink" title="三、问题"></a>三、问题</h4><p>　　遇到的问题：在用 <code>Scanner</code> 的时候，如果上一次用的是 <code>nextInt（）</code>，如果接着用 <code>nextLine()</code> 时，<code>nextLine（）</code>直接跳过！！！为什么？？为什么只是 <code>nextLine（）</code>会出现这种情况，而其他的，如<code>nextFloat（）</code> 就不会出现，这是怎么回事？？</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210629190652.jpg" style="zoom:25%;" /><p><strong>比如:</strong></p><p><strong>例1：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <br>        System.out.println(<span class="hljs-string">&quot;请输入数字：&quot;</span>);<br>        <span class="hljs-keyword">int</span> option = input.nextInt();<br>        System.out.println(option);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入字符串1：&quot;</span>);<br>        String string1 = input.nextLine();<br>        System.out.println(string1);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入字符串2：&quot;</span>);<br>        String string2 = input.nextLine();<br>        System.out.println(string2);<br>        <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">请输入数字：<br><span class="hljs-number">12</span><br><span class="hljs-number">12</span><br>请输入字符串<span class="hljs-number">1</span>：<br><br>请输入字符串<span class="hljs-number">2</span>：<br>asda<br>asda<br></code></pre></div></td></tr></table></figure><p>　　从运行结果上看，在输入第一个整数输出后，本应该输入字符串1，但是运行结果显示的是直接跳过了字符串1的输入，直接进行了字符串2 的输入输出。</p><p><strong>例2：</strong>（按照问题我把第二个字符串输入改成了一个float变量）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <br>        System.out.println(<span class="hljs-string">&quot;请输入数字：&quot;</span>);<br>        <span class="hljs-keyword">int</span> option = input.nextInt();<br>        System.out.println(option);<br><br>        System.out.println(<span class="hljs-string">&quot;请输小数：&quot;</span>);<br>        <span class="hljs-keyword">float</span> option1 = input.nextFloat();<br>        System.out.println(option1);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入字符串：&quot;</span>);<br>        String string = input.nextLine();<br>        System.out.println(string);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">请输入数字：<br><span class="hljs-number">12</span><br><span class="hljs-number">12</span><br>请输小数：<br><span class="hljs-number">12.1</span><br><span class="hljs-number">12.1</span><br>请输入字符串：<br><br><br>Process finished with exit code <span class="hljs-number">0</span><br><br></code></pre></div></td></tr></table></figure><p>　　从运行结果上看，前两个整数和小数的输入与输出都是正常的，但是到了第三个变量的输入时又出现了例1的情况。</p><p><strong>出错分析：</strong></p><p>　　API上的解释nextLine，public String nextLine（）此扫描器执行当前行，并返回跳过的输入信息。此方法返回当前行的其余部分，不包括结尾处的行分隔符。当前位置移至下一行的行首。（有点晦涩难懂，重要在下句话）</p><p>　　<strong>你使用 <code>nextInt()</code> 的时候，读取一定是数值型的字符，就是说你会输入12这样的，然后就按换行符接着使用 <code>nextLine()</code>，它是读到行分隔符就结束，而行分隔符前已经没信息，所以没有读到任何可返回的信息。</strong></p><p>　　<strong><code>nextInt（）</code>  接收一个整型字符，<code>nextline（）</code> 读入一行文本，会读入”\n”字符，但”\n”并不会成为返回的字符串值的一部分</strong>。原理和 <code>next（）</code>一样，也就是不会保留回车。</p><p>　　<strong>交叉使用出错的原因：</strong><code>nextInt（） </code>只读取了整数数值，剩下**”\n”**还没有读取，并将光标放在本行中整数后面。接着 <code>nextLine（） </code>会读取”\n”，并结束本次读取。</p><hr><h4 id="四、解决方法"><a href="#四、解决方法" class="headerlink" title="四、解决方法"></a>四、解决方法</h4><p><strong>例3：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        <span class="hljs-comment">//输入并输出一个整数</span><br>        <span class="hljs-keyword">int</span> n = in.nextInt();<br>        System.out.println(n);<br><br>        <span class="hljs-comment">//输入并输出一个字符串</span><br>        String s = in.next();<br>        System.out.println(s);<br><br>        <span class="hljs-comment">//输入并输出一个字符串</span><br>        String ss = in.nextLine();<br>        System.out.println(ss);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果（1）：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">12</span> day day day day<span class="hljs-comment">//输入</span><br><span class="hljs-number">12</span><br>day<br> day day day<br><br>Process finished with exit code <span class="hljs-number">0</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">运行情况分析：</span><br><span class="hljs-comment">12 day day day day  //输入，每个类型间用空格分开</span><br><span class="hljs-comment">12//读取并输出12</span><br><span class="hljs-comment">day//输出day说明输出12后光标在12后面，所以next读取输出了day</span><br><span class="hljs-comment"> day day day</span><br><span class="hljs-comment">//输出了 day day day说明上一个读取后光标在其后，但 day day day前和中间有空格输出，说明nextLine一直读到本行结束并可以读取空格（还有回车，此处没举例）</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><p>运行结果（2）：(出现的问题和上面例子相同，不在赘述)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">12</span><span class="hljs-comment">//输入</span><br><span class="hljs-number">12</span><span class="hljs-comment">//输出</span><br><br>asd<span class="hljs-comment">//输入</span><br>asd<span class="hljs-comment">//输出</span><br></code></pre></div></td></tr></table></figure><p><strong>例4:</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        <span class="hljs-comment">//输入并输出一个整数</span><br>        <span class="hljs-keyword">int</span> n = in.nextInt();<br>        System.out.println(n);<br><br>        <span class="hljs-comment">//输入并输出一个字符串</span><br>        in.nextLine();<br>        String s = in.nextLine();<br>        System.out.println(s);<br><br>        <span class="hljs-comment">//输入并输出一个字符串</span><br>        String ss = in.nextLine();<br>        System.out.println(ss);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">12</span><span class="hljs-comment">//输入</span><br><span class="hljs-number">12</span><br>asd<span class="hljs-comment">//输入</span><br>asd<br>asfaf<span class="hljs-comment">//输入</span><br>asfaf<br></code></pre></div></td></tr></table></figure><p>注意：回车表示一行输入结束。</p><p><strong>解决办法：</strong></p><p>　　<strong>1、在交叉使用时可以用next()代替nextLine（）；</strong></p><p>　　<strong>2、可以在nextInt（）(或next（）和nextLine（）之间添加一个nextLine（）用来吸收掉空格或回车；</strong></p><p>再举一个例子：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <br>        <span class="hljs-comment">//输入并输出一个整数</span><br>        <span class="hljs-keyword">int</span> n = in.nextInt();<br>        System.out.println(n);<br><br>        in.nextLine();<span class="hljs-comment">//添加nextLine吸收回车</span><br>        <span class="hljs-comment">//输入并输出一个字符串</span><br>        String String1 = in.nextLine();<br>        System.out.println(String1);<br><br>        <span class="hljs-comment">//输入并输出一个小数</span><br>        Double s = in.nextDouble();<br>        System.out.println(s);<br><br>        <span class="hljs-comment">//输入并输出一个字符串</span><br>        String String2 = in.next();<span class="hljs-comment">//改用next()</span><br>        System.out.println(String2);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">12</span><br><span class="hljs-number">12</span><br>asd<br>asd<br><span class="hljs-number">12.1</span><br><span class="hljs-number">12.1</span><br>zxc<br>zxc<br></code></pre></div></td></tr></table></figure><p>从运行结果来看，交叉使用出现的问题已解决。可能还存在其它没发现的问题，不过还好，以后会经常和这打交道，就怕它没问题。</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210629190854.jpg" style="zoom:25%;" /><hr><h4 id="五、补充"><a href="#五、补充" class="headerlink" title="五、补充"></a>五、补充</h4><p>接下来我们演示一个最简单的的数据输入，并通过 Scanner 类的 next（）与 nextLine（）方法获取输入的字符串。</p><p><strong>例5：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner; <br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in); <br><br>        System.out.println(<span class="hljs-string">&quot;next方式接收：&quot;</span>);<br>        <span class="hljs-comment">// 判断是否还有输入</span><br>        <span class="hljs-keyword">if</span>(scan.hasNext())&#123;   <br>        String str1 = scan.next();<br>        System.out.println(<span class="hljs-string">&quot;输入的数据为：&quot;</span>+str1);  <br>        &#125;  <br><br>    &#125;  <br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">next方式接收：<br>Today is fine<br>输入的数据为：Today<br></code></pre></div></td></tr></table></figure><p><strong>例6：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScannerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        <span class="hljs-comment">//nextLine方式接收字符串</span><br>        System.out.println(<span class="hljs-string">&quot;nextLine方式接收：&quot;</span>);<br>        <span class="hljs-comment">// 判断是否还有输入</span><br>        <span class="hljs-keyword">if</span>(scan.hasNextLine())&#123;<br>            String str2 = scan.nextLine();<br>            System.out.println(<span class="hljs-string">&quot;输入的数据为：&quot;</span>+str2);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript">nextLine方式接收：<br>Today <span class="hljs-keyword">is</span> fine<br>输入的数据为：Today <span class="hljs-keyword">is</span> fine<br></code></pre></div></td></tr></table></figure><p>以上两个出现的问题和上述一样，单独补充出来主要是提一下 <strong><code>hasNext（）</code></strong> 和 <strong><code>hasNextLine（）</code></strong> 。用法就是在读取前需要使用  <code>hasNext（）</code>  与 <code>hasNextLine（）</code> <strong>判断是否还有输入的数据</strong>。</p><hr><p>怎么说，搞这玩意好耗时间啊！</p><p>可能太菜了把，就如同，同样是两个简单的BubbleSort，别人写的效率就是比你高。</p><p>所有说啊，多想想什么地方要改改，专业术语就是优化hahaha</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210629190655.jpg" style="zoom:25%;" />]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>Scanner类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构排序</title>
    <link href="/2021/06/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/06/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<hr><p>数据结构啊，头疼。不经常看就忘，特别是排序这一挺重要的一块。</p><p>感觉很有必要系统的整理一下，方便再遗忘后，更高效率的复习。</p><hr><h3 id="1-常见的八大排序算法："><a href="#1-常见的八大排序算法：" class="headerlink" title="1.常见的八大排序算法："></a>1.常见的八大排序算法：</h3><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/%E6%8E%92%E5%BA%8F.png"></p><p>排序可分为两大类：</p><p><strong>内部排序</strong>（Internal Sorting）：待排序的记录全部存放在计算机内存中进行的排序过程；</p><p><strong>外部排序</strong>（External Sorting）：待排序的记录数量很大，内存不能存储全部记录，需要对外存进行访问的排序过程。</p><p>外部排序自己现阶段还没有接触和学习，因此只整理了基本八大排序算法。</p><hr><h3 id="2-性能比较"><a href="#2-性能比较" class="headerlink" title="2.性能比较"></a>2.性能比较</h3><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%9B%BE.jpg"></p><hr><h3 id="3-直接插入算法"><a href="#3-直接插入算法" class="headerlink" title="3.直接插入算法"></a>3.直接插入算法</h3><p><strong>算法思想：</strong>将数组中的所有元素依次跟前面已经排好的元素相比较，如果选择的元素比已排序的元素小，则交换，直到全部元素都比较过。也就是每次将一个待排序的数据按照大小插入到前面已经排好序的适当位置，直到全部数据插入完成为止。</p><p><strong>算法步骤：</strong></p><ol><li>建立一个哨兵（即临时变量），把要插入的数据赋给它。</li><li>插入数据从后面开始比较，如果大于前面的就记录下标，并将数据后移，直到插入数据碰到比它小的。 </li><li>将临时变量赋值给当前记录下标。</li><li>for循环即完成全部数据插入。</li></ol><p><strong>算法动态演示：</strong></p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E5%8A%A8%E5%9B%BE%E6%BC%94%E7%A4%BA.gif"></p><p><strong>代码实现：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> array[], <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j, temp;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; len; i++)<br>    &#123;<br>        temp = array[i];<br>        <span class="hljs-keyword">for</span>(j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(temp &lt; array[j])<br>            &#123;<br>                array[j + <span class="hljs-number">1</span>] = array[j];<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        array[j + <span class="hljs-number">1</span>] = temp;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> a[] = &#123;<span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(a) / <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(a[<span class="hljs-number">0</span>]);<br> <br>    <span class="hljs-built_in">InsertSort</span>(a, length);<br> <br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>稳定性：</strong> 由于每次插入元素时总是从后往前先比较在移动，所以不会出现相同元素相对位置，发生变化的情况即直接插入排序是一个<strong>稳定</strong>的排序方法。</p><p><strong>时间复杂度：</strong>O（n²）</p><hr><h3 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4.希尔排序"></a>4.希尔排序</h3><p><strong>算法思想：</strong>首先将待排序的元素分为多个子序列，使得每个子序的元素个数相对较少，对各个子序分别进行直接插入排序，待整个待排序序列“基本有序后”，再对所有元素进行一次直接插入排序。 </p><p><strong>算法步骤：</strong></p><p>将待排序数组按照步长gap进行分组，然后将每组的元素利用直接插入排序的方法进行排序；每次将gap折半减小，循环上述操作；当gap=1时，利用直接插入，完成排序。</p><ol><li>第一层循环：将gap依次折半，对序列进行分组，直到gap=1</li><li>第二、三层循环：也即直接插入排序所需要的两次循环。</li></ol><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8Fgap.png"></p><p><strong>算法动态演示：</strong></p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E5%9B%BE%E8%A7%A3.gif"></p><p><strong>代码实现：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> array[], <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j, temp, gap;<br>    <span class="hljs-keyword">for</span>(gap = len / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap = gap / <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(i = gap; i &lt; len; i++)<br>        &#123;<br>            temp = array[i];<br>            <span class="hljs-keyword">for</span>(j = i - gap; j &gt;= <span class="hljs-number">0</span>; j -= gap)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(temp &lt; array[j])<br>                &#123;<br>                    array[j + gap] = array[j];<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            array[j + gap] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> a[] = &#123;<span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(a) / <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(a[<span class="hljs-number">0</span>]);<br> <br>    <span class="hljs-built_in">ShellSort</span>(a, length);<br> <br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p> <strong>稳定性</strong></p><p>  当相同关键字的记录被划分到不同的子表时，可能会改变它们之间的相对次序，因此，希尔排序是一种<strong>不稳定</strong>的排序方法。</p><p>通过源代码我们能看出来，<strong>希尔排序就是在直接插入排序的基础上加入了分组策略</strong>。</p><p><strong>时间复杂度：</strong>O(N*logN)</p><hr><h3 id="5-冒泡排序"><a href="#5-冒泡排序" class="headerlink" title="5.冒泡排序"></a>5.冒泡排序</h3><p><strong>算法思想：</strong>在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。每一趟排序后的效果都是讲没有沉下去的元素给沉下去。</p><p>冒泡排序最基本的排序算法，不再详细记录，不会的好好反思。</p><p><strong>动态演示：</strong></p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%8A%A8%E6%80%81%E5%9B%BE.gif"></p><p><strong>代码实现：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,j,t;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len<span class="hljs-number">-1</span>;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;len<span class="hljs-number">-1</span>-i;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[j]&gt;a[j+<span class="hljs-number">1</span>])<br>&#123;<br>t=a[j];<br>a[j]=a[j+<span class="hljs-number">1</span>];<br>a[j+<span class="hljs-number">1</span>]=t;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> a[] = &#123;<span class="hljs-number">29</span>, <span class="hljs-number">18</span>, <span class="hljs-number">87</span>, <span class="hljs-number">56</span>, <span class="hljs-number">3</span>, <span class="hljs-number">27</span>&#125;;<br><span class="hljs-keyword">int</span> length = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(a) / <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(a[<span class="hljs-number">0</span>]);<br> <br><span class="hljs-built_in">BubbleSort</span>(a, length);<br> <br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br> <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>稳定性</strong></p><p> 冒泡排序是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。相同元素的前后顺序并没有改变，冒泡排序是一种稳定排序算法。</p><p><strong>时间复杂度:</strong> O(n²)</p><p>若文件的初始状态是正序的，一趟扫描即可完成排序。所需的关键字比较次数C和记录移动次数M均达到最小值：Cmin = N - 1, Mmin = 0。所以，冒泡排序<strong>最好</strong>时间复杂度为O(N)。</p><p>若初始文件是反序的，需要进行 N -1 趟排序。每趟排序要进行 N - i 次关键字的比较(1 ≤ i ≤ N - 1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值：Cmax = N(N-1)/2 = O(N^2) ，Mmax = 3N(N-1)/2 = O(N^2)，冒泡排序的<strong>最坏</strong>时间复杂度为O(N^2)。</p><hr><h3 id="6-快速排序（高效）"><a href="#6-快速排序（高效）" class="headerlink" title="6.快速排序（高效）"></a>6.快速排序（高效）</h3><p><strong>算法思想：</strong></p><p>快速排序为应用最多的排序算法，快速排序和归并排序一样，采用的都是分治思想。</p><p>原理：对于一组给定的记录，通过一趟排序后，将原序列分为两部分，其中前部分的所有记录均比后部分的所有记录小，然后再依次对前后两部分的记录进行快速排序，递归该过程，直到序列中的所有记录均为有序为止。</p><p><strong>算法步骤：（递归+挖坑填数）</strong></p><ol><li>i=L，j=R，将基准数挖出形成第一个坑a[i]；</li><li>j–由后向前找出比它小的数，找到后挖出此数a[j]填到前一个坑a[i]中；</li><li>i++从前向后找出比它大的数，找到后也挖出此数填到前一个坑a[j]中；</li><li>再重复2，3，直到i=j，将基准数填到a[i]。</li></ol><p><strong>算法动态演示：</strong></p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%8A%A8%E6%80%81%E5%9B%BE.gif"></p><p><strong>代码实现：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;stdio.h&gt;<br><br><span class="hljs-built_in">int</span> a<span class="hljs-literal">[<span class="hljs-number">100</span>]</span>,n;<br><br>void <span class="hljs-constructor">QuickSort(<span class="hljs-params">int</span> <span class="hljs-params">array</span>[], <span class="hljs-params">int</span> <span class="hljs-params">low</span>, <span class="hljs-params">int</span> <span class="hljs-params">high</span>)</span><br>&#123;<br> <span class="hljs-built_in">int</span> i = low;<br> <span class="hljs-built_in">int</span> j = high;<br> <span class="hljs-built_in">int</span> key = <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br> <span class="hljs-keyword">if</span>(i &lt; j)<br>&#123;   <br> <span class="hljs-keyword">while</span> (i &lt; j)<br>&#123;<br> <span class="hljs-keyword">while</span> (i &lt; j<span class="hljs-operator"> &amp;&amp; </span><span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> &gt;= key) <span class="hljs-comment">// 从右向左找第一个小于key的数</span><br>&#123;j--;&#125;<br> <span class="hljs-keyword">if</span> (i &lt; j) <br>&#123;<br>     <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>;<br> &#125;<br> <span class="hljs-keyword">while</span> (i &lt; j<span class="hljs-operator"> &amp;&amp; </span><span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> &lt;= key)<span class="hljs-comment">// 从左向右找第一个大于等于key的数</span><br>&#123;i++;&#125;<br> <span class="hljs-keyword">if</span> (i &lt; j) <br>&#123;<br> <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> = <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br> &#125;<br> &#125;<br> <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = key;<br><span class="hljs-built_in">int</span> standard = i;<br> <span class="hljs-constructor">QuickSort(<span class="hljs-params">array</span>, <span class="hljs-params">low</span>, <span class="hljs-params">standard</span> - 1)</span>; <span class="hljs-comment">// 递归调用 </span><br> <span class="hljs-constructor">QuickSort(<span class="hljs-params">array</span>, <span class="hljs-params">standard</span> + 1, <span class="hljs-params">high</span>)</span>;<br>&#125;<br>&#125;<br> <span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span><br>&#123;    <br>    printf(<span class="hljs-string">&quot;Please input n:\n&quot;</span>);<br>    scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br> <br>    printf(<span class="hljs-string">&quot;Please input number:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>);<br>    &#125;<br><br><span class="hljs-constructor">QuickSort(<span class="hljs-params">a</span>,1,<span class="hljs-params">n</span>)</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>printf(<span class="hljs-string">&quot;%-3d&quot;</span>,a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>);<br>&#125; <br>return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>稳定性</strong></p><p>快速排序是一个<strong>不稳定</strong>的排序算法。快速排序比大部分排序算法都要快。尽管在某些特殊的情况下有比快速排序快的算法，但通一般情况下，没有比它更快的。</p><p><strong>时间平均复杂度:</strong> O(nlog2n)</p><hr><h3 id="7-选择排序"><a href="#7-选择排序" class="headerlink" title="7.选择排序"></a>7.选择排序</h3><p><strong>算法思想：</strong></p><p>在要排序的一组数中，选出最小的一个数与第1个位置的数交换；然后在剩下的数当中再找最小的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。</p><p><strong>算法步骤：</strong></p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.jpg"></p><p><strong>算法动态演示：</strong></p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F1.gif"></p><p>第一个图相对来说更友好、直观点。方便理解嘛！</p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F2.gif"></p><p><strong>代码实现：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SelectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> array[], <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j, temp,k;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>    &#123;<br>    k=i;<br>    <span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>;j&lt;len;j++)<br>    &#123;<br>    <span class="hljs-keyword">if</span>(array[j]&lt;array[k])<br>    &#123;<br>    k=j;<br>    temp=array[k];<br>    array[k]=array[i];<br>    array[i]=temp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> a[] = &#123;<span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(a) / <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(a[<span class="hljs-number">0</span>]);<br> <br>    <span class="hljs-built_in">SelectSort</span>(a, length);<br> <br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>稳定性</strong></p><p> 选择排序的时间复杂度为O(n²)，由于每次选择仅考虑某一位置上的数据情况，可能会破坏之前数据的相对位置，因此它是一种<strong>不稳定</strong>的排序方法。 例如：序列 [9，9，1]第一次就将第一个[9]与[1]交换，导致第一个9挪动到第二个9后面。</p><p><strong>时间复杂度：</strong> O(n²)</p><hr><h3 id="8-堆排序"><a href="#8-堆排序" class="headerlink" title="8.堆排序"></a>8.堆排序</h3><p>这个还真不会啊啊啊！！！</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/sdfsd.jpg" style="zoom:25%;" /><p>划重点，划重点！！！</p><p><strong>堆排序：</strong></p><p>堆排序是利用<strong>堆</strong>这种数据结构而设计的一种排序算法，堆排序是一种<strong>选择排序，</strong>它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。首先简单了解下堆结构。</p><p><strong>堆的概念：</strong></p><p><strong>堆</strong>是一棵<strong>顺序存储</strong>的<strong>完全二叉树</strong>。</p><p>其中每个结点的关键字都<strong>小于或等于</strong>其孩子结点的关键字，这样的堆称为<strong>小根堆</strong>。</p><p>其中每个结点的关键字都<strong>大于或等于</strong>其孩子结点的关键字，这样的堆称为<strong>大根堆</strong>。</p><p>如下图：</p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/%E5%A4%A7%E9%A1%B6%E5%A0%86%E5%92%8C%E5%B0%8F%E9%A1%B6%E5%A0%86.png"></p><p>同时，我们对堆中的结点按层进行编号，将这种逻辑结构映射到数组中就是下面这个样子该数组从逻辑上讲就是一个堆结构。</p><p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/arr.png"></p><p>公式来描述一下堆的定义就是：</p><p><strong>大顶堆：arr[i] &gt;= arr[2i+1] &amp;&amp; arr[i] &gt;= arr[2i+2]</strong>  </p><p><strong>小顶堆：arr[i] &lt;= arr[2i+1] &amp;&amp; arr[i] &lt;= arr[2i+2]</strong>  </p><p><strong>算法思想：</strong></p><p>将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列。</p><p><strong>构建步骤：</strong></p><p><strong>步骤一 ，构造初始堆。将给定无序序列构造成一个大顶堆（一般升序采用大顶堆，降序采用小顶堆)。</strong></p><p>1.假设给定无序序列结构如下</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/1.png" style="zoom:50%;" /><p>2.此时我们从最后一个非叶子结点开始（叶结点自然不用调整，第一个非叶子结点 <strong>arr.length/2-1=5/2-1=1</strong>，也就是下面的6结点），从左至右，从下至上进行调整。</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/2.png" style="zoom:50%;" /><p>3.找到第二个非叶节点4，由于[4,9,8]中9元素最大，4和9交换。</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/3.png" style="zoom:50%;" /><p>4.这时，交换导致了子根[4,5,6]结构混乱，继续调整，[4,5,6]中6最大，交换4和6。</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/4.png" style="zoom:50%;" /><p>5.此时，我们就将一个无需序列构造成了一个大顶堆。</p><p><strong>步骤二 将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。</strong></p><hr><p>a.将堆顶元素9和末尾元素4进行交换</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/5.png" style="zoom:50%;" /><p>b.重新调整结构，使其继续满足堆定义</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/6.png" style="zoom:50%;" /><p>c.再将堆顶元素8与末尾元素5进行交换，得到第二大元素8.</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/7.png" style="zoom:50%;" /><p>d.后续过程，继续进行调整，交换，如此反复进行，最终使得整个序列有序</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/8.png" style="zoom:80%;" /><p>再简单总结下堆排序的基本思路：</p><ul><li>a.将无需序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆;</li><li>b.将堆顶元素与末尾元素交换，将最大元素”沉”到数组末端;</li><li>c.重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序。</li></ul><p><strong>算法动态演示：</strong></p><p>由于一些概念逻辑不好理解，所以多放了几张图。图1如下：</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/%E5%A0%86%E6%8E%92%E5%BA%8F%E5%8A%A8%E6%80%81%E5%9B%BE.gif"  /><p>图2如下：</p><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/%E5%9B%BE/%E5%A0%86%E6%8E%92%E5%BA%8F%E5%8A%A8%E6%80%81%E5%9B%BE2.gif" style="zoom: 80%;" /><p><strong>代码实现：（小顶堆）</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;stdio.h&gt;<span class="hljs-comment">//适用于数据量大的时候(构建浪费时间)</span><br> <br>void <span class="hljs-constructor">AdjustMinHeap(<span class="hljs-params">int</span> <span class="hljs-operator">*</span><span class="hljs-params">array</span>, <span class="hljs-params">int</span> <span class="hljs-params">pos</span>, <span class="hljs-params">int</span> <span class="hljs-params">len</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> tmp, child;<br>    <span class="hljs-keyword">for</span>(tmp = <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">pos</span>]</span>; <span class="hljs-number">2</span><span class="hljs-operator"> * </span>pos + <span class="hljs-number">1</span> &lt;= len; pos = child)<br>    &#123;<br>        child = <span class="hljs-number">2</span><span class="hljs-operator"> * </span>pos + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(child &lt; len<span class="hljs-operator"> &amp;&amp; </span><span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">child</span>]</span> &gt; <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">child</span> + <span class="hljs-number">1</span>]</span>)<br>        &#123;<br>            child++;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">child</span>]</span> &lt; tmp)<br>        &#123;<br>            <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">pos</span>]</span> = <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">child</span>]</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            break;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">pos</span>]</span> = tmp;<br>&#125;<br> <br>void <span class="hljs-constructor">Swap(<span class="hljs-params">int</span> <span class="hljs-operator">*</span><span class="hljs-params">a</span>, <span class="hljs-params">int</span> <span class="hljs-operator">*</span><span class="hljs-params">b</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> temp;<br>    temp = *a;<br>    *a = *b;<br>    *b = temp;<br>&#125;<br> <br>void <span class="hljs-constructor">HeapSort(<span class="hljs-params">int</span> <span class="hljs-operator">*</span><span class="hljs-params">array</span>, <span class="hljs-params">int</span> <span class="hljs-params">len</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> i;<br> <br>    <span class="hljs-keyword">for</span>(i = len/<span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-constructor">AdjustMinHeap(<span class="hljs-params">array</span>, <span class="hljs-params">i</span>, <span class="hljs-params">len</span> - 1)</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">for</span>(i = len - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-constructor">Swap(&amp;<span class="hljs-params">array</span>[0], &amp;<span class="hljs-params">array</span>[<span class="hljs-params">i</span>])</span>;<br>        <span class="hljs-constructor">AdjustMinHeap(<span class="hljs-params">array</span>, 0, <span class="hljs-params">i</span> - 1)</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> i;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">array</span><span class="hljs-literal">[]</span> = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">1</span>, <span class="hljs-number">18</span>, <span class="hljs-number">27</span>&#125;;<br>    <span class="hljs-built_in">int</span> length = sizeof(<span class="hljs-built_in">array</span>)<span class="hljs-operator"> / </span>sizeof(<span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>);<br> <br>    <span class="hljs-constructor">HeapSort(<span class="hljs-params">array</span>, <span class="hljs-params">length</span>)</span>;<br> <br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>, <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>);<br>    &#125;<br> <br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>稳定性</strong></p><p>堆排序是一种<strong>不稳定</strong>的排序方法。因为在堆的调整过程中，关键字进行比较和交换所走的是该结点到叶子结点的一条路径，因此对于相同的关键字就可能出现排在后面的关键字被交换到前面来的。</p><p><strong>时间复杂度</strong>：O(N*logN)。</p><hr><p>还剩两个！！更不动了呀！！<img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/dfsd.jpg" style="zoom:25%;" /></p><p>他喵的，中途意外电脑重启更新，没保存呐！！倦了倦了，直接躺平!</p><p>有时间再ing。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>c</category>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java的label标签</title>
    <link href="/2021/06/04/java%E7%9A%84label%20%E6%A0%87%E7%AD%BE/"/>
    <url>/2021/06/04/java%E7%9A%84label%20%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<hr><p>今天学java看到了一个label标签，以前也没碰到过，可能是接触的太少了。了解了一下用法，感觉挺不错的，随手记了下来。</p><hr><h2 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h2><p>Java中的标签(<strong>Label</strong>)是为循环设计的，是为了在多重循环中方便的使用<strong>break</strong>和<strong>continue</strong>。</p><p><strong>Label</strong>不是Java中的关键字，而是一个任意的标识符，就是标签。</p><p>在一条语句的开头加一条标签，就对该语句进行了标记，如果你在某条程序运行后向跳转到那条被标记的语句，这时候就用到它了。</p><p>优点：就是可以任意跳出循环跳到标签的位置。<strong>Label</strong>通常是和<strong>break</strong>和<strong>continue</strong>一起使用。</p><h2 id="使用介绍："><a href="#使用介绍：" class="headerlink" title="使用介绍："></a>使用介绍：</h2><p><strong>基本的使用方法是：</strong></p><p>1、定义标签的名称，如 <strong>test1</strong></p><p>2、找到需要用到标签的地方写下 <strong>test1</strong>: 即可</p><p>我们一般也不怎么用<strong>Label</strong>，但是它到底有什么用呢？</p><p>试想一个这样的情况：有一个两重循环，但是当在内层循环中找到了满足的条件，就停止两重循环就退出执行。不难想到肯定会用<strong>break</strong>关键字，但是如果仅仅是<strong>break</strong>，那么Java默认只会退出当前循环，即内层循环。</p><p>如：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;i = &quot; + i + &quot; &quot;);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>         &#125;<br>         <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;j = &quot; + j+&quot; &quot;);<br>     &#125;<br>     <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输出结果：<br><span class="hljs-attr">i</span> = <span class="hljs-number">0</span> <span class="hljs-attr">j</span> = <span class="hljs-number">0</span> <span class="hljs-attr">j</span> = <span class="hljs-number">2</span> <br><span class="hljs-attr">i</span> = <span class="hljs-number">1</span> <span class="hljs-attr">j</span> = <span class="hljs-number">0</span> <span class="hljs-attr">j</span> = <span class="hljs-number">2</span> <br><span class="hljs-attr">i</span> = <span class="hljs-number">2</span> <span class="hljs-attr">j</span> = <span class="hljs-number">0</span> <span class="hljs-attr">j</span> = <span class="hljs-number">2</span> <br><span class="hljs-attr">i</span> = <span class="hljs-number">3</span> <span class="hljs-attr">j</span> = <span class="hljs-number">0</span> <span class="hljs-attr">j</span> = <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>加入<strong>label</strong>标签后：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">test1:<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;i = &quot; + i + &quot; &quot;);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">continue</span> test1;<br>         &#125;<br>         <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;j = &quot; + j+&quot; &quot;);<br>     &#125;<br>     <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输出结果：<br><span class="hljs-attr">i</span> = <span class="hljs-number">0</span> <span class="hljs-attr">j</span> = <span class="hljs-number">0</span> <span class="hljs-attr">i</span> = <span class="hljs-number">1</span> <span class="hljs-attr">j</span> = <span class="hljs-number">0</span> <span class="hljs-attr">i</span> = <span class="hljs-number">2</span> <span class="hljs-attr">j</span> = <span class="hljs-number">0</span> <span class="hljs-attr">i</span> = <span class="hljs-number">3</span> <span class="hljs-attr">j</span> = <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>从这个简单的例子中便可以看出<strong>label</strong>的作用。</p><p>此时再看一下换成<strong>break</strong>的输出结果：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;i = &quot; + i + &quot; &quot;);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span>) &#123;<br>            break;<br>         &#125;<br>         <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;j = &quot; + j+&quot; &quot;);<br>     &#125;<br>     <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输出结果：<br><span class="hljs-attr">i</span> = <span class="hljs-number">0</span> <span class="hljs-attr">j</span> = <span class="hljs-number">0</span><br><span class="hljs-attr">i</span> = <span class="hljs-number">1</span> <span class="hljs-attr">j</span> = <span class="hljs-number">0</span><br><span class="hljs-attr">i</span> = <span class="hljs-number">2</span> <span class="hljs-attr">j</span> = <span class="hljs-number">0</span><br><span class="hljs-attr">i</span> = <span class="hljs-number">3</span> <span class="hljs-attr">j</span> = <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>加入标签：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">test1：<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;i = &quot; + i + &quot; &quot;);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span>) &#123;<br>            break test1;<br>         &#125;<br>         <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;j = &quot; + j+&quot; &quot;);<br>     &#125;<br>     <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输出结果：<br><span class="hljs-attr">i</span> = <span class="hljs-number">0</span> <span class="hljs-attr">j</span> = <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>这个怎么用，要自己琢磨。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><ol><li>在Java里面需要使用标签，就是因为有循环嵌套的存在，而且想从多层嵌套中<strong>break</strong>或<strong>continue</strong>。</li><li>标签起作用的唯一地方刚好是在迭代语句之前，”刚好之前“的意思表明，在标签和迭代之间置入任何语句都不好。</li></ol><p>最后奉上一段代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> TestLabel &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        String strSearch = &quot;l blessed the day l found you.&quot;;<br><br>        String substring = &quot;you&quot;;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-built_in">found</span> = <span class="hljs-keyword">false</span>;<br><br>        <span class="hljs-type">int</span> max = strSearch.length() - substring.length();<br><br>        test1:<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= max; i++) &#123;<br>            <span class="hljs-type">int</span> length = substring.length();<br><br>            <span class="hljs-type">int</span> j = i;<br><br>            <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">while</span> (length<span class="hljs-comment">-- != 0) &#123;</span><br>                <span class="hljs-keyword">if</span> (strSearch.charAt(j++) != substring.charAt(k++)) &#123;<br>                    <span class="hljs-keyword">continue</span> test1;<br><br>                &#125;<br><br>            &#125;<br><br>            <span class="hljs-built_in">found</span> = <span class="hljs-keyword">true</span>;<br><br>            break test1;<br><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">found</span>) &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;发现子字符串。&quot;);<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;字符串中没有发现子字符串。&quot;);<br>        &#125;<br>        <br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">输出结果：发现子字符串。<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>lable标签</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL常用命令</title>
    <link href="/2021/06/01/MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/06/01/MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p><strong>之前学过点数据库，但是只停留在理论上，关于数据库的实际操作却不熟练，今天温习了一点，顺便整理了一下MySQL常用命令语句。</strong></p><hr><h2 id="一、连接MySQL"><a href="#一、连接MySQL" class="headerlink" title="一、连接MySQL"></a>一、连接MySQL</h2><h4 id="1、连接到本机上的MySQ："><a href="#1、连接到本机上的MySQ：" class="headerlink" title="1、连接到本机上的MySQ："></a><strong>1、连接到本机上的MySQ：</strong></h4><p>首先在打开cmd窗口，输入mysql -u root -p ，然后空格进入MySQL控制台。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">mysql&gt; mysql -u root -p <span class="hljs-regexp">/*如果刚安装好MySQL，root是没有密码的*/</span><br></code></pre></div></td></tr></table></figure><h4 id="2、连接到远程主机上的MySQL："><a href="#2、连接到远程主机上的MySQL：" class="headerlink" title="2、连接到远程主机上的MySQL："></a><strong>2、连接到远程主机上的MySQL：</strong></h4><p> 假设远程主机的IP为：192.168.206.100，用户名为root,密码为123456。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; mysql -h <span class="hljs-number">192.168.206.100</span> -u root -p <span class="hljs-number">123456</span>; /*u与root可以不加空格*/<br></code></pre></div></td></tr></table></figure><h4 id="3、退出MySQL命令：-exit-或-quit（回车）："><a href="#3、退出MySQL命令：-exit-或-quit（回车）：" class="headerlink" title="3、退出MySQL命令： exit 或 quit（回车）："></a>3、退出MySQL命令： exit 或 quit（回车）：</h4><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">mysql&gt; <span class="hljs-keyword">exit</span>/quit;<br></code></pre></div></td></tr></table></figure><h2 id="二、MySQL–修改密码"><a href="#二、MySQL–修改密码" class="headerlink" title="二、MySQL–修改密码"></a>二、MySQL–修改密码</h2><h4 id="1、root密码为空时，设置root密码："><a href="#1、root密码为空时，设置root密码：" class="headerlink" title="1、root密码为空时，设置root密码："></a>1、root密码为空时，设置root密码：</h4><figure class="highlight haxe"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haxe">mysql&gt; mysqladmin -u root <span class="hljs-keyword">new</span><span class="hljs-type">password</span>;   -- 因为开始时root没有密码，所以-p旧密码 可以省略<br></code></pre></div></td></tr></table></figure><h4 id="2、使用-sqladmin-命令修改密码："><a href="#2、使用-sqladmin-命令修改密码：" class="headerlink" title="2、使用 sqladmin 命令修改密码："></a>2、使用 sqladmin 命令修改密码：</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; mysqladmin -u root -p<span class="hljs-number">123456</span> password <span class="hljs-number">12345678</span>;<br></code></pre></div></td></tr></table></figure><h4 id="3、使用set-passsword命令修改密码："><a href="#3、使用set-passsword命令修改密码：" class="headerlink" title="3、使用set passsword命令修改密码："></a><strong>3、使用set passsword命令修改密码：</strong></h4><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> 用户名@localhost = <span class="hljs-keyword">password</span>(<span class="hljs-string">&#x27;新密码&#x27;</span>);<br></code></pre></div></td></tr></table></figure><h4 id="4、忘记root密码情况下："><a href="#4、忘记root密码情况下：" class="headerlink" title="4、忘记root密码情况下："></a><strong>4、忘记root密码情况下：</strong></h4><ul><li>关闭正在运行的<strong>MySQL</strong>服务。</li><li> 打开DOS窗口，转到<strong>mysql\bin</strong>目录。</li><li> 输入<strong>mysqld –skip-grant-tables</strong> 回车。**–skip-grant-tables** 的意思是启动<strong>MySQL</strong>服务的时候跳过权限表认证。</li><li> 再开一个<strong>DOS</strong>窗口（因为刚才那个DOS窗口已经不能动了），输入<strong>mysq</strong>l回车，如果成功，将出现<strong>MySQL</strong>提示符 &gt;。</li><li>连接权限数据库： <strong>use mysql;</strong> 。</li><li>改密码：**update user set password=password(“新密码”) where user=”root”;**（别忘了最后加分号） 。</li><li>刷新权限（必须步骤）：<strong>flush privileges;</strong>　。</li><li>退出<strong>mysql  quit；</strong>。</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><br>mysqld <span class="hljs-comment">--skip-grant-tables   </span><br>mysql&gt; use mysql;   <span class="hljs-comment">--连接权限数据库</span><br>mysql&gt; <span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span>=<span class="hljs-keyword">password</span>(&quot;新密码&quot;) <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span>=&quot;root&quot;;   <span class="hljs-comment">-- 改密码</span><br>mysql&gt; flush <span class="hljs-keyword">privileges</span>;    <span class="hljs-comment">-- 刷新权限</span><br>mysql&gt; quit；    <span class="hljs-comment">-- 退出mysql</span><br><br></code></pre></div></td></tr></table></figure><h2 id="三、MySQL–常用命令"><a href="#三、MySQL–常用命令" class="headerlink" title="三、MySQL–常用命令"></a>三、MySQL–常用命令</h2><h4 id="1-创建数据库-create"><a href="#1-创建数据库-create" class="headerlink" title="1.创建数据库(create):"></a>1.创建数据库(create):</h4><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> db_name;  <span class="hljs-comment">-- 创建数据库</span><br><br>mysql&gt; <span class="hljs-keyword">show</span> databases;           <span class="hljs-comment">-- 显示所有的数据库</span><br><br>mysql&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> db_name;    <span class="hljs-comment">-- 删除数据库</span><br><br>mysql&gt; use db_name;              <span class="hljs-comment">-- 选择数据库</span><br><br>mysql&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_name (字段名 <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>), 字段名 <span class="hljs-type">char</span>(<span class="hljs-number">1</span>));   <span class="hljs-comment">-- 创建数据表模板</span><br><br>mysql&gt; <span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;              <span class="hljs-comment">-- 显示数据表</span><br><br>mysql&gt; <span class="hljs-keyword">desc</span> tb_name；            <span class="hljs-comment">-- 显示表结构</span><br><br>mysql&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> tb_name；      <span class="hljs-comment">-- 删除表</span><br><br></code></pre></div></td></tr></table></figure><p>eg:</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><br><span class="hljs-comment">/*创建一个学生表*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Student(<br>     Sno <span class="hljs-type">char</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">primary</span> key,<br>     Sname <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span>,<br>     Ssex <span class="hljs-type">char</span>(<span class="hljs-number">2</span>),<br>     Sage <span class="hljs-type">smallint</span>,<br>     Sdept <span class="hljs-type">char</span>(<span class="hljs-number">20</span>)<br>)；<br><br></code></pre></div></td></tr></table></figure><h4 id="2、插入数据-insert"><a href="#2、插入数据-insert" class="headerlink" title="2、插入数据(insert):"></a>2、插入数据(insert):</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/*第一种形式无需指定要插入数据的列名，只需提供被插入的值即可：*/</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_name <span class="hljs-keyword">values</span> (value1,value2,value3,...);<br><br><span class="hljs-comment">/*第二种形式需要指定列名及被插入的值：*/</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_name (column1,column2,column3,...) <span class="hljs-keyword">values</span> (value1,value2,value3...)<br></code></pre></div></td></tr></table></figure><p>eg:</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/*插入*/</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student <span class="hljs-keyword">values</span> ( <span class="hljs-number">20180001</span>,张三,男,<span class="hljs-number">20</span>,CS）;<br> <br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student <span class="hljs-keyword">values</span> ( <span class="hljs-number">20180002</span>,李四,男,<span class="hljs-number">19</span>,CS）;<br> <br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student (Sno,Sname,Ssex,Sage,Sdept) <span class="hljs-keyword">values</span> ( <span class="hljs-number">20180003</span>,王五,男,<span class="hljs-number">18</span>,MA）;<br> <br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student (Sno,Sname,Ssex,Sage,Sdept) <span class="hljs-keyword">values</span> ( <span class="hljs-number">20180004</span>,赵六,男,<span class="hljs-number">20</span>,<span class="hljs-keyword">IS</span>）<br><br></code></pre></div></td></tr></table></figure><h4 id="3、查询数据-select"><a href="#3、查询数据-select" class="headerlink" title="3、查询数据(select):"></a>3、查询数据(select):</h4><p>  <strong>select</strong>语句除了可以查看数据库中的表格和视图的信息外,还可以查看 <strong>SQL Server</strong>的系统信息、复制、创建数据表。其查询功能强大，是<strong>SQL</strong>语言的灵魂语句，也是<strong>SQL</strong>中使用频率最高的语句。<br>基本<strong>select</strong>语句：<br>      一个基本的<strong>select</strong>语句可分解成三个部分：<u>查找什么数据</u><strong>（select）</strong>、<u>从哪里查找</u><strong>（from）</strong>、<u>查找的条件是什么</u><strong>（where）</strong>。</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> &lt;目标列表达式列表&gt;[<span class="hljs-keyword">into</span> 新表名]<br><span class="hljs-keyword">from</span> 表名或视图名[<span class="hljs-keyword">where</span> &lt;条件&gt;]<br>[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> &lt;分组表达式&gt;]<br>[<span class="hljs-keyword">having</span> &lt;条件&gt;]<br>[<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> &lt;排序表达式&gt;[<span class="hljs-keyword">ASC</span>|<span class="hljs-keyword">DESC</span>]]<br><br></code></pre></div></td></tr></table></figure><h5 id="一-查询指定的列"><a href="#一-查询指定的列" class="headerlink" title="(一)查询指定的列"></a>(一)查询指定的列</h5><h6 id="1-查询表中所有列"><a href="#1-查询表中所有列" class="headerlink" title="1.查询表中所有列:"></a>1.查询表中所有列:</h6><p>在select语句指定列的位置上使用*****号时，表示查询表的所有列。模板：</p><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_name；<br></code></pre></div></td></tr></table></figure><h6 id="2-查询表中指定的列"><a href="#2-查询表中指定的列" class="headerlink" title="2.查询表中指定的列:"></a>2.查询表中指定的列:</h6><p>​    查询多列时，列名之间要用逗号隔开。 模板：</p><figure class="highlight pf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pf">mysql&gt;  select tb_name.<span class="hljs-variable">&lt;字符型字段&gt;</span>,<span class="hljs-variable">&lt;字符型字段&gt;</span> ... <span class="hljs-keyword">from</span> tb_name;<br></code></pre></div></td></tr></table></figure><h6 id="3-指定查询结果中的列标题："><a href="#3-指定查询结果中的列标题：" class="headerlink" title="3.指定查询结果中的列标题："></a>3.指定查询结果中的列标题：</h6><p>通过指定列标题（也叫<strong>列</strong>别名）可使输出结果更容易被人理解。指定列标题时，可在列名之后使用<strong>AS</strong>子句；也可使用:**列别名=&lt;表达式&gt;**的形式指定列标题。<br>        <strong>AS</strong>子句的格式为：列名或计算表达式 <strong>[AS]</strong> 列标题。模板：</p><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta">mysql&gt; <span class="hljs-keyword">select</span> &lt;字符型字段&gt; <span class="hljs-keyword">as</span> 列标题<span class="hljs-number">1</span>,&lt;字符型字段&gt; <span class="hljs-keyword">as</span> 列标题<span class="hljs-number">2</span>, &lt;字符型字段&gt; <span class="hljs-keyword">as</span> 列标题<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> bt_name；<br></code></pre></div></td></tr></table></figure><h6 id="4-查询经过计算的列（即表达式的值）"><a href="#4-查询经过计算的列（即表达式的值）" class="headerlink" title="4.查询经过计算的列（即表达式的值）:"></a>4.查询经过计算的列（即表达式的值）:</h6><p>使用<strong>select</strong>对<strong>列</strong>进行查询时，不仅可以直接<strong>以列的原始值作为结果</strong>，而且还<strong>可以将列值进行计算后所得值作为查询结果</strong>，即<strong>select子句</strong>可以查询表达式的值,表达式可由<u>列名</u>、<u>常量</u>及<u>算术运算符</u>组成。<br>        查询结果计算列显示“无列名”,一般要给计算列加列标题。其中：表达式中可以使用的运算符有：加+、减-、乘*、除/、取余%。模板：</p><figure class="highlight pf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pf">mysql&gt; select <span class="hljs-variable">&lt;字符型字段&gt;</span>,<span class="hljs-variable">&lt;字符型字段&gt;</span>,列标题 = <span class="hljs-variable">&lt;字符型字段&gt;</span> * n <span class="hljs-keyword">from</span> tb_name；<br></code></pre></div></td></tr></table></figure><h5 id="二-选择行：选择表中的部分行或全部行作为查询的结果"><a href="#二-选择行：选择表中的部分行或全部行作为查询的结果" class="headerlink" title="(二)选择行：选择表中的部分行或全部行作为查询的结果"></a><strong>(二)选择行：选择表中的部分行或全部行作为查询的结果</strong></h5><p>格式：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> [<span class="hljs-keyword">all</span><span class="hljs-operator">|</span><span class="hljs-keyword">distinct</span>] [top n[<span class="hljs-keyword">percent</span>]]<span class="hljs-operator">&lt;</span>目标列表达式列表<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">from</span> 表名<br></code></pre></div></td></tr></table></figure><p>消除查询结果中的重复行对于关系数据库来说，表中的每一行都必须是不同的(即无重复行)。但当对表进行查询时若只选择其中的某些列，查询结果中就可能会出现重复行。<br> 在select语句中使用distinct关键字可以消除结果集中的重复行。 模板：</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> &lt;字符型字段&gt;[,&lt;字符型字段&gt;,...] <span class="hljs-keyword">from</span> tb_name；<br></code></pre></div></td></tr></table></figure><h5 id="三-查询满足条件的行-用where子句实现条件查询"><a href="#三-查询满足条件的行-用where子句实现条件查询" class="headerlink" title="(三)查询满足条件的行: 用where子句实现条件查询"></a>(三)查询满足条件的行: 用where子句实现条件查询</h5><p>通过<strong>where</strong>子句实现,该子句必须紧跟在<strong>From</strong>子句之后。格式为：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> [<span class="hljs-keyword">all</span><span class="hljs-operator">|</span><span class="hljs-keyword">distinct</span>] [top n[<span class="hljs-keyword">percent</span>]]<span class="hljs-operator">&lt;</span>目标列表达式列表<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> <span class="hljs-operator">&lt;</span>条件<span class="hljs-operator">&gt;</span>；<br></code></pre></div></td></tr></table></figure><p>​        说明：在查询条件中可使用以下运算符或表达式：                  </p><p>​          运算符                 运算符标识<br>​                  比较运算符         &lt;=，&lt;，=，&gt;，&gt;=，!=，&lt;&gt;，!&gt;，!&lt;<br>​                  范围运算符         between… and，not between… and<br>​                  列举运算符         in，not in<br>​                  模糊匹配运算符 like，not like<br>​                  空值运算符         is null，is not null<br>​                  逻辑运算符         and，or，not</p><h6 id="1-使用比较运算符："><a href="#1-使用比较运算符：" class="headerlink" title="1.使用比较运算符："></a>1.使用比较运算符：</h6><p>模板：</p><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_name <span class="hljs-keyword">where</span> &lt;字符型字段&gt; &gt;= n ；<br></code></pre></div></td></tr></table></figure><h6 id="2-指定范围："><a href="#2-指定范围：" class="headerlink" title="2.指定范围："></a>2.指定范围：</h6><p>用于指定范围的关键字有两个：<strong>between…and</strong>和 <strong>not between…and</strong>。<br>        格式为：</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_name <span class="hljs-keyword">where</span> [<span class="hljs-keyword">not</span>] <span class="hljs-keyword">between</span> &lt;表达式<span class="hljs-number">1</span>&gt; <span class="hljs-keyword">and</span> &lt;表达式<span class="hljs-number">2</span>&gt;;<br></code></pre></div></td></tr></table></figure><p>其中：<strong>between</strong>关键字之后的是范围的下限（即低值）,<strong>and</strong>关键字之后的是范围的上限（即高值），用于查找字段值在（或不在）指定范围的行。</p><h6 id="3-使用列举"><a href="#3-使用列举" class="headerlink" title="3.使用列举:"></a>3.使用列举:</h6><p>使用<strong>in</strong>关键字可以指定一个值的集合，集合中列出所有可能的值，当表达式的值与集合中的任一元素个匹配时，即返回<strong>true</strong>，否则返回<strong>false</strong>。<br>        模板：</p><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_name <span class="hljs-keyword">where</span> &lt;字符型字段&gt; [not] <span class="hljs-keyword">in</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...,值n);<br></code></pre></div></td></tr></table></figure><h5 id="四-对查询结果排序"><a href="#四-对查询结果排序" class="headerlink" title="(四)对查询结果排序"></a>(四)对查询结果排序</h5><p><strong>order by</strong>子句可用于对查询结果按照一个或多个字段的值（或表达式的值）进行升序<strong>（ASC）</strong>或降序<strong>（DESC）</strong>排列，默认为升序。格式：</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">mysql&gt; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> &#123;排序表达式[ASC|DESC]&#125;[,...n]；<br></code></pre></div></td></tr></table></figure><p>其中：排序表达式既可以是单个的一个字段，也可以是由<u>字段</u>、<u>函数</u>、<u>常量</u>等组成的表达式，或一个<u>正整数</u>。模板：</p><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_name <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> &lt;排序表达式&gt; &lt;排序方法&gt;；<br></code></pre></div></td></tr></table></figure><h4 id="4、修改数据-update）"><a href="#4、修改数据-update）" class="headerlink" title="4、修改数据(update）"></a>4、修改数据(update）</h4><p>Update 语句用于修改表中的数据。格式：</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">update</span> tb_name <span class="hljs-keyword">set</span> 列名称 = 新值 <span class="hljs-keyword">where</span> 列名称 = 某值；<br></code></pre></div></td></tr></table></figure><h4 id="5、删除数据-delete"><a href="#5、删除数据-delete" class="headerlink" title="5、删除数据(delete)"></a>5、删除数据(delete)</h4><p> 删除单行。</p><p> 格式：</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_name <span class="hljs-keyword">where</span> 列名称 = 某值；<br></code></pre></div></td></tr></table></figure><p> 删除所有行。</p><p>可以在不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的。<br>          格式：</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript">mysql&gt; <span class="hljs-keyword">delete</span> * <span class="hljs-keyword">from</span> tb_name   或  <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_name；<br></code></pre></div></td></tr></table></figure><h2 id="四、MySQL-–-alter命令"><a href="#四、MySQL-–-alter命令" class="headerlink" title="四、MySQL – alter命令"></a>四、MySQL – alter命令</h2><p> <strong>alter add</strong>命令用来<u>增加表的字段</u>。  <strong>alter add</strong></p><p>命令格式：<strong>alter table</strong> 表名 <strong>add</strong>字段 类型 其他;</p><p>例如，在表<strong>MyClass</strong>中添加了一个字段<strong>passtest</strong>，类型为<strong>int(4)<strong>，默认值为</strong>0</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> MyClass <span class="hljs-keyword">add</span> passtest <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span>;<br></code></pre></div></td></tr></table></figure><ul><li><strong>添加两个字段</strong> </li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> Person <span class="hljs-keyword">add</span> age <span class="hljs-type">int</span>,<span class="hljs-keyword">add</span> address <span class="hljs-type">varchar</span>(<span class="hljs-number">11</span>); <br></code></pre></div></td></tr></table></figure><ul><li><strong>删除两个字段</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> Person <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> age,<span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> address;<br></code></pre></div></td></tr></table></figure><ul><li><strong>修改字段的注释</strong></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> `student` modify <span class="hljs-keyword">column</span> `id` <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;学号&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h4 id="（1）加索引"><a href="#（1）加索引" class="headerlink" title="（1）加索引"></a>（1）加索引</h4><p>mysql&gt; alter table 表名 add index 索引名 (字段名1[，字段名2 …]);</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> employee <span class="hljs-keyword">add</span> <span class="hljs-keyword">index</span> emp_name (<span class="hljs-type">name</span>);<br></code></pre></div></td></tr></table></figure><h4 id="（2）加主关键字的索引"><a href="#（2）加主关键字的索引" class="headerlink" title="（2）加主关键字的索引"></a>（2）加主关键字的索引</h4><p>mysql&gt; alter table 表名 add primary key (字段名);</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> employee <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary</span> key(id);<br></code></pre></div></td></tr></table></figure><h4 id="（3）加唯一限制条件的索引"><a href="#（3）加唯一限制条件的索引" class="headerlink" title="（3）加唯一限制条件的索引"></a>（3）加唯一限制条件的索引</h4><p> mysql&gt; alter table 表名 add unique 索引名 (字段名);</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> employee <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span> emp_name2(cardnumber);<br></code></pre></div></td></tr></table></figure><h4 id="（4）-删除某个索引"><a href="#（4）-删除某个索引" class="headerlink" title="（4） 删除某个索引"></a>（4） 删除某个索引</h4><p> mysql&gt; alter table 表名 drop index 索引名;</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> employee <span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> emp_name;<br></code></pre></div></td></tr></table></figure><h4 id="（5）增加字段"><a href="#（5）增加字段" class="headerlink" title="（5）增加字段"></a>（5）增加字段</h4><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">ADD</span> field_name field_type;<br></code></pre></div></td></tr></table></figure><h4 id="（6）修改原字段名称及类型"><a href="#（6）修改原字段名称及类型" class="headerlink" title="（6）修改原字段名称及类型"></a>（6）修改原字段名称及类型</h4><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span> CHANGE old_field_name new_field_name field_type;<br></code></pre></div></td></tr></table></figure><h4 id="（7）删除字段"><a href="#（7）删除字段" class="headerlink" title="（7）删除字段"></a>（7）删除字段</h4><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">mysql&gt; MySQL <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">DROP</span> field_name;<br></code></pre></div></td></tr></table></figure><p><strong>耶</strong><img src="https://cdn.youmingsama.workers.dev/1jesus/pic/main/img/20210601230616.jpg" style="zoom:50%;" /></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
